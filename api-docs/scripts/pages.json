[{"name":"FOR_SHARE","description":"org.ktorm.support.mysql.LockingMode.FOR_SHARE","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-mode/-f-o-r_-s-h-a-r-e/index.html","searchKeys":["FOR_SHARE","FOR_SHARE","org.ktorm.support.mysql.LockingMode.FOR_SHARE"]},{"name":"FOR_UPDATE","description":"org.ktorm.support.mysql.LockingMode.FOR_UPDATE","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-mode/-f-o-r_-u-p-d-a-t-e/index.html","searchKeys":["FOR_UPDATE","FOR_UPDATE","org.ktorm.support.mysql.LockingMode.FOR_UPDATE"]},{"name":"IN_BOOLEAN_MODE","description":"org.ktorm.support.mysql.SearchModifier.IN_BOOLEAN_MODE","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/-i-n_-b-o-o-l-e-a-n_-m-o-d-e/index.html","searchKeys":["IN_BOOLEAN_MODE","IN_BOOLEAN_MODE","org.ktorm.support.mysql.SearchModifier.IN_BOOLEAN_MODE"]},{"name":"IN_NATURAL_LANGUAGE_MODE","description":"org.ktorm.support.mysql.SearchModifier.IN_NATURAL_LANGUAGE_MODE","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/-i-n_-n-a-t-u-r-a-l_-l-a-n-g-u-a-g-e_-m-o-d-e/index.html","searchKeys":["IN_NATURAL_LANGUAGE_MODE","IN_NATURAL_LANGUAGE_MODE","org.ktorm.support.mysql.SearchModifier.IN_NATURAL_LANGUAGE_MODE"]},{"name":"IN_NATURAL_LANGUAGE_MODE_WITH_QUERY_EXPANSION","description":"org.ktorm.support.mysql.SearchModifier.IN_NATURAL_LANGUAGE_MODE_WITH_QUERY_EXPANSION","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/-i-n_-n-a-t-u-r-a-l_-l-a-n-g-u-a-g-e_-m-o-d-e_-w-i-t-h_-q-u-e-r-y_-e-x-p-a-n-s-i-o-n/index.html","searchKeys":["IN_NATURAL_LANGUAGE_MODE_WITH_QUERY_EXPANSION","IN_NATURAL_LANGUAGE_MODE_WITH_QUERY_EXPANSION","org.ktorm.support.mysql.SearchModifier.IN_NATURAL_LANGUAGE_MODE_WITH_QUERY_EXPANSION"]},{"name":"LOCK_IN_SHARE_MODE","description":"org.ktorm.support.mysql.LockingMode.LOCK_IN_SHARE_MODE","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-mode/-l-o-c-k_-i-n_-s-h-a-r-e_-m-o-d-e/index.html","searchKeys":["LOCK_IN_SHARE_MODE","LOCK_IN_SHARE_MODE","org.ktorm.support.mysql.LockingMode.LOCK_IN_SHARE_MODE"]},{"name":"NOWAIT","description":"org.ktorm.support.mysql.LockingWait.NOWAIT","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-wait/-n-o-w-a-i-t/index.html","searchKeys":["NOWAIT","NOWAIT","org.ktorm.support.mysql.LockingWait.NOWAIT"]},{"name":"SKIP_LOCKED","description":"org.ktorm.support.mysql.LockingWait.SKIP_LOCKED","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-wait/-s-k-i-p_-l-o-c-k-e-d/index.html","searchKeys":["SKIP_LOCKED","SKIP_LOCKED","org.ktorm.support.mysql.LockingWait.SKIP_LOCKED"]},{"name":"WAIT","description":"org.ktorm.support.mysql.LockingWait.WAIT","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-wait/-w-a-i-t/index.html","searchKeys":["WAIT","WAIT","org.ktorm.support.mysql.LockingWait.WAIT"]},{"name":"WITH_QUERY_EXPANSION","description":"org.ktorm.support.mysql.SearchModifier.WITH_QUERY_EXPANSION","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/-w-i-t-h_-q-u-e-r-y_-e-x-p-a-n-s-i-o-n/index.html","searchKeys":["WITH_QUERY_EXPANSION","WITH_QUERY_EXPANSION","org.ktorm.support.mysql.SearchModifier.WITH_QUERY_EXPANSION"]},{"name":"class BulkInsertOrUpdateOnDuplicateKeyClauseBuilder : MySqlAssignmentsBuilder","description":"org.ktorm.support.mysql.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-or-update-on-duplicate-key-clause-builder/index.html","searchKeys":["BulkInsertOrUpdateOnDuplicateKeyClauseBuilder","class BulkInsertOrUpdateOnDuplicateKeyClauseBuilder : MySqlAssignmentsBuilder","org.ktorm.support.mysql.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder"]},{"name":"class BulkInsertOrUpdateStatementBuilder<T : BaseTable<*>>(table: T) : BulkInsertStatementBuilder<T> ","description":"org.ktorm.support.mysql.BulkInsertOrUpdateStatementBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-or-update-statement-builder/index.html","searchKeys":["BulkInsertOrUpdateStatementBuilder","class BulkInsertOrUpdateStatementBuilder<T : BaseTable<*>>(table: T) : BulkInsertStatementBuilder<T> ","org.ktorm.support.mysql.BulkInsertOrUpdateStatementBuilder"]},{"name":"class InsertOrUpdateStatementBuilder : MySqlAssignmentsBuilder","description":"org.ktorm.support.mysql.InsertOrUpdateStatementBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-statement-builder/index.html","searchKeys":["InsertOrUpdateStatementBuilder","class InsertOrUpdateStatementBuilder : MySqlAssignmentsBuilder","org.ktorm.support.mysql.InsertOrUpdateStatementBuilder"]},{"name":"class MatchColumns(columns: List<ColumnExpression<*>>) : List<ColumnExpression<*>> ","description":"org.ktorm.support.mysql.MatchColumns","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-columns/index.html","searchKeys":["MatchColumns","class MatchColumns(columns: List<ColumnExpression<*>>) : List<ColumnExpression<*>> ","org.ktorm.support.mysql.MatchColumns"]},{"name":"constructor()","description":"org.ktorm.support.mysql.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-or-update-on-duplicate-key-clause-builder/-bulk-insert-or-update-on-duplicate-key-clause-builder.html","searchKeys":["BulkInsertOrUpdateOnDuplicateKeyClauseBuilder","constructor()","org.ktorm.support.mysql.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder"]},{"name":"constructor()","description":"org.ktorm.support.mysql.InsertOrUpdateStatementBuilder.InsertOrUpdateStatementBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-statement-builder/-insert-or-update-statement-builder.html","searchKeys":["InsertOrUpdateStatementBuilder","constructor()","org.ktorm.support.mysql.InsertOrUpdateStatementBuilder.InsertOrUpdateStatementBuilder"]},{"name":"constructor()","description":"org.ktorm.support.mysql.MySqlAssignmentsBuilder.MySqlAssignmentsBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-assignments-builder/-my-sql-assignments-builder.html","searchKeys":["MySqlAssignmentsBuilder","constructor()","org.ktorm.support.mysql.MySqlAssignmentsBuilder.MySqlAssignmentsBuilder"]},{"name":"constructor()","description":"org.ktorm.support.mysql.MySqlDialect.MySqlDialect","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-dialect/-my-sql-dialect.html","searchKeys":["MySqlDialect","constructor()","org.ktorm.support.mysql.MySqlDialect.MySqlDialect"]},{"name":"constructor(columns: List<ColumnExpression<*>>)","description":"org.ktorm.support.mysql.MatchColumns.MatchColumns","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-columns/-match-columns.html","searchKeys":["MatchColumns","constructor(columns: List<ColumnExpression<*>>)","org.ktorm.support.mysql.MatchColumns.MatchColumns"]},{"name":"constructor(database: Database, beautifySql: Boolean, indentSize: Int)","description":"org.ktorm.support.mysql.MySqlFormatter.MySqlFormatter","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/-my-sql-formatter.html","searchKeys":["MySqlFormatter","constructor(database: Database, beautifySql: Boolean, indentSize: Int)","org.ktorm.support.mysql.MySqlFormatter.MySqlFormatter"]},{"name":"constructor(left: QuerySourceExpression, right: QuerySourceExpression, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.mysql.NaturalJoinExpression.NaturalJoinExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-natural-join-expression/-natural-join-expression.html","searchKeys":["NaturalJoinExpression","constructor(left: QuerySourceExpression, right: QuerySourceExpression, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.mysql.NaturalJoinExpression.NaturalJoinExpression"]},{"name":"constructor(matchColumns: List<ColumnExpression<*>>, searchString: String, searchModifier: SearchModifier? = null, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.mysql.MatchAgainstExpression.MatchAgainstExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/-match-against-expression.html","searchKeys":["MatchAgainstExpression","constructor(matchColumns: List<ColumnExpression<*>>, searchString: String, searchModifier: SearchModifier? = null, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.mysql.MatchAgainstExpression.MatchAgainstExpression"]},{"name":"constructor(mode: LockingMode, tables: List<TableExpression>, wait: LockingWait)","description":"org.ktorm.support.mysql.LockingClause.LockingClause","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-clause/-locking-clause.html","searchKeys":["LockingClause","constructor(mode: LockingMode, tables: List<TableExpression>, wait: LockingWait)","org.ktorm.support.mysql.LockingClause.LockingClause"]},{"name":"constructor(sqlType: SqlType<T>, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.mysql.DefaultValueExpression.DefaultValueExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-default-value-expression/-default-value-expression.html","searchKeys":["DefaultValueExpression","constructor(sqlType: SqlType<T>, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.mysql.DefaultValueExpression.DefaultValueExpression"]},{"name":"constructor(table: T)","description":"org.ktorm.support.mysql.BulkInsertOrUpdateStatementBuilder.BulkInsertOrUpdateStatementBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-or-update-statement-builder/-bulk-insert-or-update-statement-builder.html","searchKeys":["BulkInsertOrUpdateStatementBuilder","constructor(table: T)","org.ktorm.support.mysql.BulkInsertOrUpdateStatementBuilder.BulkInsertOrUpdateStatementBuilder"]},{"name":"constructor(table: T)","description":"org.ktorm.support.mysql.BulkInsertStatementBuilder.BulkInsertStatementBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-statement-builder/-bulk-insert-statement-builder.html","searchKeys":["BulkInsertStatementBuilder","constructor(table: T)","org.ktorm.support.mysql.BulkInsertStatementBuilder.BulkInsertStatementBuilder"]},{"name":"constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.mysql.InsertOrUpdateExpression.InsertOrUpdateExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-expression/-insert-or-update-expression.html","searchKeys":["InsertOrUpdateExpression","constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.mysql.InsertOrUpdateExpression.InsertOrUpdateExpression"]},{"name":"constructor(table: TableExpression, assignments: List<List<ColumnAssignmentExpression<*>>>, updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.mysql.BulkInsertExpression.BulkInsertExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-expression/-bulk-insert-expression.html","searchKeys":["BulkInsertExpression","constructor(table: TableExpression, assignments: List<List<ColumnAssignmentExpression<*>>>, updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.mysql.BulkInsertExpression.BulkInsertExpression"]},{"name":"data class BulkInsertExpression(val table: TableExpression, val assignments: List<List<ColumnAssignmentExpression<*>>>, val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.support.mysql.BulkInsertExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-expression/index.html","searchKeys":["BulkInsertExpression","data class BulkInsertExpression(val table: TableExpression, val assignments: List<List<ColumnAssignmentExpression<*>>>, val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.support.mysql.BulkInsertExpression"]},{"name":"data class DefaultValueExpression<T : Any>(val sqlType: SqlType<T>, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.support.mysql.DefaultValueExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-default-value-expression/index.html","searchKeys":["DefaultValueExpression","data class DefaultValueExpression<T : Any>(val sqlType: SqlType<T>, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.support.mysql.DefaultValueExpression"]},{"name":"data class InsertOrUpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.support.mysql.InsertOrUpdateExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-expression/index.html","searchKeys":["InsertOrUpdateExpression","data class InsertOrUpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.support.mysql.InsertOrUpdateExpression"]},{"name":"data class LockingClause(val mode: LockingMode, val tables: List<TableExpression>, val wait: LockingWait)","description":"org.ktorm.support.mysql.LockingClause","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-clause/index.html","searchKeys":["LockingClause","data class LockingClause(val mode: LockingMode, val tables: List<TableExpression>, val wait: LockingWait)","org.ktorm.support.mysql.LockingClause"]},{"name":"data class MatchAgainstExpression(val matchColumns: List<ColumnExpression<*>>, val searchString: String, val searchModifier: SearchModifier? = null, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","description":"org.ktorm.support.mysql.MatchAgainstExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/index.html","searchKeys":["MatchAgainstExpression","data class MatchAgainstExpression(val matchColumns: List<ColumnExpression<*>>, val searchString: String, val searchModifier: SearchModifier? = null, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","org.ktorm.support.mysql.MatchAgainstExpression"]},{"name":"data class NaturalJoinExpression(val left: QuerySourceExpression, val right: QuerySourceExpression, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : QuerySourceExpression","description":"org.ktorm.support.mysql.NaturalJoinExpression","location":"ktorm-support-mysql/org.ktorm.support.mysql/-natural-join-expression/index.html","searchKeys":["NaturalJoinExpression","data class NaturalJoinExpression(val left: QuerySourceExpression, val right: QuerySourceExpression, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : QuerySourceExpression","org.ktorm.support.mysql.NaturalJoinExpression"]},{"name":"enum LockingMode : Enum<LockingMode> ","description":"org.ktorm.support.mysql.LockingMode","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-mode/index.html","searchKeys":["LockingMode","enum LockingMode : Enum<LockingMode> ","org.ktorm.support.mysql.LockingMode"]},{"name":"enum LockingWait : Enum<LockingWait> ","description":"org.ktorm.support.mysql.LockingWait","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-wait/index.html","searchKeys":["LockingWait","enum LockingWait : Enum<LockingWait> ","org.ktorm.support.mysql.LockingWait"]},{"name":"enum SearchModifier : Enum<SearchModifier> ","description":"org.ktorm.support.mysql.SearchModifier","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/index.html","searchKeys":["SearchModifier","enum SearchModifier : Enum<SearchModifier> ","org.ktorm.support.mysql.SearchModifier"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): EntitySequence<E, T>","description":"org.ktorm.support.mysql.locking","location":"ktorm-support-mysql/org.ktorm.support.mysql/locking.html","searchKeys":["locking","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): EntitySequence<E, T>","org.ktorm.support.mysql.locking"]},{"name":"fun <T : Any> Column<T>.defaultValue(): DefaultValueExpression<T>","description":"org.ktorm.support.mysql.defaultValue","location":"ktorm-support-mysql/org.ktorm.support.mysql/default-value.html","searchKeys":["defaultValue","fun <T : Any> Column<T>.defaultValue(): DefaultValueExpression<T>","org.ktorm.support.mysql.defaultValue"]},{"name":"fun <T : Any> ColumnDeclaring<T>.ifNull(right: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.mysql.ifNull","location":"ktorm-support-mysql/org.ktorm.support.mysql/if-null.html","searchKeys":["ifNull","fun <T : Any> ColumnDeclaring<T>.ifNull(right: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.mysql.ifNull"]},{"name":"fun <T : Any> ColumnDeclaring<T>.ifNull(right: T?): FunctionExpression<T>","description":"org.ktorm.support.mysql.ifNull","location":"ktorm-support-mysql/org.ktorm.support.mysql/if-null.html","searchKeys":["ifNull","fun <T : Any> ColumnDeclaring<T>.ifNull(right: T?): FunctionExpression<T>","org.ktorm.support.mysql.ifNull"]},{"name":"fun <T : Any> IF(condition: ColumnDeclaring<Boolean>, then: ColumnDeclaring<T>, otherwise: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.mysql.IF","location":"ktorm-support-mysql/org.ktorm.support.mysql/-i-f.html","searchKeys":["IF","fun <T : Any> IF(condition: ColumnDeclaring<Boolean>, then: ColumnDeclaring<T>, otherwise: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.mysql.IF"]},{"name":"fun <T : Any> values(column: Column<T>): FunctionExpression<T>","description":"org.ktorm.support.mysql.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder.values","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-or-update-on-duplicate-key-clause-builder/values.html","searchKeys":["values","fun <T : Any> values(column: Column<T>): FunctionExpression<T>","org.ktorm.support.mysql.BulkInsertOrUpdateOnDuplicateKeyClauseBuilder.values"]},{"name":"fun <T : BaseTable<*>> Database.bulkInsert(table: T, block: BulkInsertStatementBuilder<T>.() -> Unit): Int","description":"org.ktorm.support.mysql.bulkInsert","location":"ktorm-support-mysql/org.ktorm.support.mysql/bulk-insert.html","searchKeys":["bulkInsert","fun <T : BaseTable<*>> Database.bulkInsert(table: T, block: BulkInsertStatementBuilder<T>.() -> Unit): Int","org.ktorm.support.mysql.bulkInsert"]},{"name":"fun <T : BaseTable<*>> Database.bulkInsertOrUpdate(table: T, block: BulkInsertOrUpdateStatementBuilder<T>.() -> Unit): Int","description":"org.ktorm.support.mysql.bulkInsertOrUpdate","location":"ktorm-support-mysql/org.ktorm.support.mysql/bulk-insert-or-update.html","searchKeys":["bulkInsertOrUpdate","fun <T : BaseTable<*>> Database.bulkInsertOrUpdate(table: T, block: BulkInsertOrUpdateStatementBuilder<T>.() -> Unit): Int","org.ktorm.support.mysql.bulkInsertOrUpdate"]},{"name":"fun <T : BaseTable<*>> Database.insertOrUpdate(table: T, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","description":"org.ktorm.support.mysql.insertOrUpdate","location":"ktorm-support-mysql/org.ktorm.support.mysql/insert-or-update.html","searchKeys":["insertOrUpdate","fun <T : BaseTable<*>> Database.insertOrUpdate(table: T, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","org.ktorm.support.mysql.insertOrUpdate"]},{"name":"fun <T : BaseTable<*>> T.bulkInsert(block: BulkInsertStatementBuilder<T>.() -> Unit): Int","description":"org.ktorm.support.mysql.bulkInsert","location":"ktorm-support-mysql/org.ktorm.support.mysql/bulk-insert.html","searchKeys":["bulkInsert","fun <T : BaseTable<*>> T.bulkInsert(block: BulkInsertStatementBuilder<T>.() -> Unit): Int","org.ktorm.support.mysql.bulkInsert"]},{"name":"fun <T : BaseTable<*>> T.bulkInsertOrUpdate(block: BulkInsertOrUpdateStatementBuilder<T>.() -> Unit): Int","description":"org.ktorm.support.mysql.bulkInsertOrUpdate","location":"ktorm-support-mysql/org.ktorm.support.mysql/bulk-insert-or-update.html","searchKeys":["bulkInsertOrUpdate","fun <T : BaseTable<*>> T.bulkInsertOrUpdate(block: BulkInsertOrUpdateStatementBuilder<T>.() -> Unit): Int","org.ktorm.support.mysql.bulkInsertOrUpdate"]},{"name":"fun <T : BaseTable<*>> T.insertOrUpdate(block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","description":"org.ktorm.support.mysql.insertOrUpdate","location":"ktorm-support-mysql/org.ktorm.support.mysql/insert-or-update.html","searchKeys":["insertOrUpdate","fun <T : BaseTable<*>> T.insertOrUpdate(block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","org.ktorm.support.mysql.insertOrUpdate"]},{"name":"fun <T : Comparable<T>> greatest(left: ColumnDeclaring<T>, right: T): FunctionExpression<T>","description":"org.ktorm.support.mysql.greatest","location":"ktorm-support-mysql/org.ktorm.support.mysql/greatest.html","searchKeys":["greatest","fun <T : Comparable<T>> greatest(left: ColumnDeclaring<T>, right: T): FunctionExpression<T>","org.ktorm.support.mysql.greatest"]},{"name":"fun <T : Comparable<T>> greatest(left: T, right: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.mysql.greatest","location":"ktorm-support-mysql/org.ktorm.support.mysql/greatest.html","searchKeys":["greatest","fun <T : Comparable<T>> greatest(left: T, right: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.mysql.greatest"]},{"name":"fun <T : Comparable<T>> greatest(vararg columns: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.mysql.greatest","location":"ktorm-support-mysql/org.ktorm.support.mysql/greatest.html","searchKeys":["greatest","fun <T : Comparable<T>> greatest(vararg columns: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.mysql.greatest"]},{"name":"fun <T : Comparable<T>> least(left: ColumnDeclaring<T>, right: T): FunctionExpression<T>","description":"org.ktorm.support.mysql.least","location":"ktorm-support-mysql/org.ktorm.support.mysql/least.html","searchKeys":["least","fun <T : Comparable<T>> least(left: ColumnDeclaring<T>, right: T): FunctionExpression<T>","org.ktorm.support.mysql.least"]},{"name":"fun <T : Comparable<T>> least(left: T, right: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.mysql.least","location":"ktorm-support-mysql/org.ktorm.support.mysql/least.html","searchKeys":["least","fun <T : Comparable<T>> least(left: T, right: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.mysql.least"]},{"name":"fun <T : Comparable<T>> least(vararg columns: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.mysql.least","location":"ktorm-support-mysql/org.ktorm.support.mysql/least.html","searchKeys":["least","fun <T : Comparable<T>> least(vararg columns: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.mysql.least"]},{"name":"fun BaseTable<*>.naturalJoin(right: BaseTable<*>): QuerySource","description":"org.ktorm.support.mysql.naturalJoin","location":"ktorm-support-mysql/org.ktorm.support.mysql/natural-join.html","searchKeys":["naturalJoin","fun BaseTable<*>.naturalJoin(right: BaseTable<*>): QuerySource","org.ktorm.support.mysql.naturalJoin"]},{"name":"fun ColumnDeclaring<String>.replace(oldValue: String, newValue: String): FunctionExpression<String>","description":"org.ktorm.support.mysql.replace","location":"ktorm-support-mysql/org.ktorm.support.mysql/replace.html","searchKeys":["replace","fun ColumnDeclaring<String>.replace(oldValue: String, newValue: String): FunctionExpression<String>","org.ktorm.support.mysql.replace"]},{"name":"fun ColumnDeclaring<String>.toLowerCase(): FunctionExpression<String>","description":"org.ktorm.support.mysql.toLowerCase","location":"ktorm-support-mysql/org.ktorm.support.mysql/to-lower-case.html","searchKeys":["toLowerCase","fun ColumnDeclaring<String>.toLowerCase(): FunctionExpression<String>","org.ktorm.support.mysql.toLowerCase"]},{"name":"fun ColumnDeclaring<String>.toUpperCase(): FunctionExpression<String>","description":"org.ktorm.support.mysql.toUpperCase","location":"ktorm-support-mysql/org.ktorm.support.mysql/to-upper-case.html","searchKeys":["toUpperCase","fun ColumnDeclaring<String>.toUpperCase(): FunctionExpression<String>","org.ktorm.support.mysql.toUpperCase"]},{"name":"fun MatchColumns.against(searchString: String, modifier: SearchModifier? = null): MatchAgainstExpression","description":"org.ktorm.support.mysql.against","location":"ktorm-support-mysql/org.ktorm.support.mysql/against.html","searchKeys":["against","fun MatchColumns.against(searchString: String, modifier: SearchModifier? = null): MatchAgainstExpression","org.ktorm.support.mysql.against"]},{"name":"fun Query.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): Query","description":"org.ktorm.support.mysql.locking","location":"ktorm-support-mysql/org.ktorm.support.mysql/locking.html","searchKeys":["locking","fun Query.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): Query","org.ktorm.support.mysql.locking"]},{"name":"fun QuerySource.naturalJoin(right: BaseTable<*>): QuerySource","description":"org.ktorm.support.mysql.naturalJoin","location":"ktorm-support-mysql/org.ktorm.support.mysql/natural-join.html","searchKeys":["naturalJoin","fun QuerySource.naturalJoin(right: BaseTable<*>): QuerySource","org.ktorm.support.mysql.naturalJoin"]},{"name":"fun dateDiff(left: ColumnDeclaring<LocalDate>, right: ColumnDeclaring<LocalDate>): FunctionExpression<Int>","description":"org.ktorm.support.mysql.dateDiff","location":"ktorm-support-mysql/org.ktorm.support.mysql/date-diff.html","searchKeys":["dateDiff","fun dateDiff(left: ColumnDeclaring<LocalDate>, right: ColumnDeclaring<LocalDate>): FunctionExpression<Int>","org.ktorm.support.mysql.dateDiff"]},{"name":"fun dateDiff(left: ColumnDeclaring<LocalDate>, right: LocalDate): FunctionExpression<Int>","description":"org.ktorm.support.mysql.dateDiff","location":"ktorm-support-mysql/org.ktorm.support.mysql/date-diff.html","searchKeys":["dateDiff","fun dateDiff(left: ColumnDeclaring<LocalDate>, right: LocalDate): FunctionExpression<Int>","org.ktorm.support.mysql.dateDiff"]},{"name":"fun dateDiff(left: LocalDate, right: ColumnDeclaring<LocalDate>): FunctionExpression<Int>","description":"org.ktorm.support.mysql.dateDiff","location":"ktorm-support-mysql/org.ktorm.support.mysql/date-diff.html","searchKeys":["dateDiff","fun dateDiff(left: LocalDate, right: ColumnDeclaring<LocalDate>): FunctionExpression<Int>","org.ktorm.support.mysql.dateDiff"]},{"name":"fun item(block: AssignmentsBuilder.(T) -> Unit)","description":"org.ktorm.support.mysql.BulkInsertStatementBuilder.item","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-statement-builder/item.html","searchKeys":["item","fun item(block: AssignmentsBuilder.(T) -> Unit)","org.ktorm.support.mysql.BulkInsertStatementBuilder.item"]},{"name":"fun match(vararg columns: Column<*>): MatchColumns","description":"org.ktorm.support.mysql.match","location":"ktorm-support-mysql/org.ktorm.support.mysql/match.html","searchKeys":["match","fun match(vararg columns: Column<*>): MatchColumns","org.ktorm.support.mysql.match"]},{"name":"fun onDuplicateKey(block: AssignmentsBuilder.() -> Unit)","description":"org.ktorm.support.mysql.InsertOrUpdateStatementBuilder.onDuplicateKey","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-statement-builder/on-duplicate-key.html","searchKeys":["onDuplicateKey","fun onDuplicateKey(block: AssignmentsBuilder.() -> Unit)","org.ktorm.support.mysql.InsertOrUpdateStatementBuilder.onDuplicateKey"]},{"name":"fun onDuplicateKey(block: BulkInsertOrUpdateOnDuplicateKeyClauseBuilder.(T) -> Unit)","description":"org.ktorm.support.mysql.BulkInsertOrUpdateStatementBuilder.onDuplicateKey","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-or-update-statement-builder/on-duplicate-key.html","searchKeys":["onDuplicateKey","fun onDuplicateKey(block: BulkInsertOrUpdateOnDuplicateKeyClauseBuilder.(T) -> Unit)","org.ktorm.support.mysql.BulkInsertOrUpdateStatementBuilder.onDuplicateKey"]},{"name":"fun rand(): FunctionExpression<Double>","description":"org.ktorm.support.mysql.rand","location":"ktorm-support-mysql/org.ktorm.support.mysql/rand.html","searchKeys":["rand","fun rand(): FunctionExpression<Double>","org.ktorm.support.mysql.rand"]},{"name":"fun valueOf(value: String): LockingMode","description":"org.ktorm.support.mysql.LockingMode.valueOf","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LockingMode","org.ktorm.support.mysql.LockingMode.valueOf"]},{"name":"fun valueOf(value: String): LockingWait","description":"org.ktorm.support.mysql.LockingWait.valueOf","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-wait/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LockingWait","org.ktorm.support.mysql.LockingWait.valueOf"]},{"name":"fun valueOf(value: String): SearchModifier","description":"org.ktorm.support.mysql.SearchModifier.valueOf","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SearchModifier","org.ktorm.support.mysql.SearchModifier.valueOf"]},{"name":"fun values(): Array<LockingMode>","description":"org.ktorm.support.mysql.LockingMode.values","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-mode/values.html","searchKeys":["values","fun values(): Array<LockingMode>","org.ktorm.support.mysql.LockingMode.values"]},{"name":"fun values(): Array<LockingWait>","description":"org.ktorm.support.mysql.LockingWait.values","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-wait/values.html","searchKeys":["values","fun values(): Array<LockingWait>","org.ktorm.support.mysql.LockingWait.values"]},{"name":"fun values(): Array<SearchModifier>","description":"org.ktorm.support.mysql.SearchModifier.values","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/values.html","searchKeys":["values","fun values(): Array<SearchModifier>","org.ktorm.support.mysql.SearchModifier.values"]},{"name":"inline fun <T : Any> Column<*>.jsonExtract(path: String, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the result's SqlType, please specify manually.\")): FunctionExpression<T>","description":"org.ktorm.support.mysql.jsonExtract","location":"ktorm-support-mysql/org.ktorm.support.mysql/json-extract.html","searchKeys":["jsonExtract","inline fun <T : Any> Column<*>.jsonExtract(path: String, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the result's SqlType, please specify manually.\")): FunctionExpression<T>","org.ktorm.support.mysql.jsonExtract"]},{"name":"inline fun <T : Any> Column<List<T>>.jsonContains(item: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the item's SqlType, please specify manually.\")): FunctionExpression<Boolean>","description":"org.ktorm.support.mysql.jsonContains","location":"ktorm-support-mysql/org.ktorm.support.mysql/json-contains.html","searchKeys":["jsonContains","inline fun <T : Any> Column<List<T>>.jsonContains(item: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the item's SqlType, please specify manually.\")): FunctionExpression<Boolean>","org.ktorm.support.mysql.jsonContains"]},{"name":"inline fun <T : Any> IF(condition: ColumnDeclaring<Boolean>, then: T, otherwise: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the param's SqlType, please specify manually.\")): FunctionExpression<T>","description":"org.ktorm.support.mysql.IF","location":"ktorm-support-mysql/org.ktorm.support.mysql/-i-f.html","searchKeys":["IF","inline fun <T : Any> IF(condition: ColumnDeclaring<Boolean>, then: T, otherwise: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the param's SqlType, please specify manually.\")): FunctionExpression<T>","org.ktorm.support.mysql.IF"]},{"name":"interface MySqlExpressionVisitor : SqlExpressionVisitor","description":"org.ktorm.support.mysql.MySqlExpressionVisitor","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/index.html","searchKeys":["MySqlExpressionVisitor","interface MySqlExpressionVisitor : SqlExpressionVisitor","org.ktorm.support.mysql.MySqlExpressionVisitor"]},{"name":"open class BulkInsertStatementBuilder<T : BaseTable<*>>(table: T)","description":"org.ktorm.support.mysql.BulkInsertStatementBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-statement-builder/index.html","searchKeys":["BulkInsertStatementBuilder","open class BulkInsertStatementBuilder<T : BaseTable<*>>(table: T)","org.ktorm.support.mysql.BulkInsertStatementBuilder"]},{"name":"open class MySqlAssignmentsBuilder : AssignmentsBuilder","description":"org.ktorm.support.mysql.MySqlAssignmentsBuilder","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-assignments-builder/index.html","searchKeys":["MySqlAssignmentsBuilder","open class MySqlAssignmentsBuilder : AssignmentsBuilder","org.ktorm.support.mysql.MySqlAssignmentsBuilder"]},{"name":"open class MySqlDialect : SqlDialect","description":"org.ktorm.support.mysql.MySqlDialect","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-dialect/index.html","searchKeys":["MySqlDialect","open class MySqlDialect : SqlDialect","org.ktorm.support.mysql.MySqlDialect"]},{"name":"open class MySqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter, MySqlExpressionVisitor","description":"org.ktorm.support.mysql.MySqlFormatter","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/index.html","searchKeys":["MySqlFormatter","open class MySqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter, MySqlExpressionVisitor","org.ktorm.support.mysql.MySqlFormatter"]},{"name":"open fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitDefaultValue","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-default-value.html","searchKeys":["visitDefaultValue","open fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","org.ktorm.support.mysql.MySqlExpressionVisitor.visitDefaultValue"]},{"name":"open fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitBulkInsert","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-bulk-insert.html","searchKeys":["visitBulkInsert","open fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","org.ktorm.support.mysql.MySqlExpressionVisitor.visitBulkInsert"]},{"name":"open fun visitBulkInsertAssignments(assignments: List<List<ColumnAssignmentExpression<*>>>): List<List<ColumnAssignmentExpression<*>>>","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitBulkInsertAssignments","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-bulk-insert-assignments.html","searchKeys":["visitBulkInsertAssignments","open fun visitBulkInsertAssignments(assignments: List<List<ColumnAssignmentExpression<*>>>): List<List<ColumnAssignmentExpression<*>>>","org.ktorm.support.mysql.MySqlExpressionVisitor.visitBulkInsertAssignments"]},{"name":"open fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitInsertOrUpdate","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-insert-or-update.html","searchKeys":["visitInsertOrUpdate","open fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","org.ktorm.support.mysql.MySqlExpressionVisitor.visitInsertOrUpdate"]},{"name":"open fun visitMatchAgainst(expr: MatchAgainstExpression): MatchAgainstExpression","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitMatchAgainst","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-match-against.html","searchKeys":["visitMatchAgainst","open fun visitMatchAgainst(expr: MatchAgainstExpression): MatchAgainstExpression","org.ktorm.support.mysql.MySqlExpressionVisitor.visitMatchAgainst"]},{"name":"open fun visitNaturalJoin(expr: NaturalJoinExpression): NaturalJoinExpression","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitNaturalJoin","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-natural-join.html","searchKeys":["visitNaturalJoin","open fun visitNaturalJoin(expr: NaturalJoinExpression): NaturalJoinExpression","org.ktorm.support.mysql.MySqlExpressionVisitor.visitNaturalJoin"]},{"name":"open override fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","description":"org.ktorm.support.mysql.MySqlFormatter.visitDefaultValue","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit-default-value.html","searchKeys":["visitDefaultValue","open override fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","org.ktorm.support.mysql.MySqlFormatter.visitDefaultValue"]},{"name":"open override fun <T : Any> visitScalar(expr: ScalarExpression<T>): ScalarExpression<T>","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitScalar","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-scalar.html","searchKeys":["visitScalar","open override fun <T : Any> visitScalar(expr: ScalarExpression<T>): ScalarExpression<T>","org.ktorm.support.mysql.MySqlExpressionVisitor.visitScalar"]},{"name":"open override fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","description":"org.ktorm.support.mysql.MySqlDialect.createExpressionVisitor","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-dialect/create-expression-visitor.html","searchKeys":["createExpressionVisitor","open override fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","org.ktorm.support.mysql.MySqlDialect.createExpressionVisitor"]},{"name":"open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","description":"org.ktorm.support.mysql.MySqlDialect.createSqlFormatter","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-dialect/create-sql-formatter.html","searchKeys":["createSqlFormatter","open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","org.ktorm.support.mysql.MySqlDialect.createSqlFormatter"]},{"name":"open override fun toString(): String","description":"org.ktorm.support.mysql.SearchModifier.toString","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.support.mysql.SearchModifier.toString"]},{"name":"open override fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visit","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit.html","searchKeys":["visit","open override fun visit(expr: SqlExpression): SqlExpression","org.ktorm.support.mysql.MySqlExpressionVisitor.visit"]},{"name":"open override fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.support.mysql.MySqlFormatter.visit","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit.html","searchKeys":["visit","open override fun visit(expr: SqlExpression): SqlExpression","org.ktorm.support.mysql.MySqlFormatter.visit"]},{"name":"open override fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","description":"org.ktorm.support.mysql.MySqlFormatter.visitBulkInsert","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit-bulk-insert.html","searchKeys":["visitBulkInsert","open override fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","org.ktorm.support.mysql.MySqlFormatter.visitBulkInsert"]},{"name":"open override fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","description":"org.ktorm.support.mysql.MySqlFormatter.visitInsertOrUpdate","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit-insert-or-update.html","searchKeys":["visitInsertOrUpdate","open override fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","org.ktorm.support.mysql.MySqlFormatter.visitInsertOrUpdate"]},{"name":"open override fun visitMatchAgainst(expr: MatchAgainstExpression): MatchAgainstExpression","description":"org.ktorm.support.mysql.MySqlFormatter.visitMatchAgainst","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit-match-against.html","searchKeys":["visitMatchAgainst","open override fun visitMatchAgainst(expr: MatchAgainstExpression): MatchAgainstExpression","org.ktorm.support.mysql.MySqlFormatter.visitMatchAgainst"]},{"name":"open override fun visitNaturalJoin(expr: NaturalJoinExpression): NaturalJoinExpression","description":"org.ktorm.support.mysql.MySqlFormatter.visitNaturalJoin","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit-natural-join.html","searchKeys":["visitNaturalJoin","open override fun visitNaturalJoin(expr: NaturalJoinExpression): NaturalJoinExpression","org.ktorm.support.mysql.MySqlFormatter.visitNaturalJoin"]},{"name":"open override fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","description":"org.ktorm.support.mysql.MySqlExpressionVisitor.visitQuerySource","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-expression-visitor/visit-query-source.html","searchKeys":["visitQuerySource","open override fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","org.ktorm.support.mysql.MySqlExpressionVisitor.visitQuerySource"]},{"name":"open override fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","description":"org.ktorm.support.mysql.MySqlFormatter.visitQuerySource","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit-query-source.html","searchKeys":["visitQuerySource","open override fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","org.ktorm.support.mysql.MySqlFormatter.visitQuerySource"]},{"name":"open override fun visitSelect(expr: SelectExpression): SelectExpression","description":"org.ktorm.support.mysql.MySqlFormatter.visitSelect","location":"ktorm-support-mysql/org.ktorm.support.mysql/-my-sql-formatter/visit-select.html","searchKeys":["visitSelect","open override fun visitSelect(expr: SelectExpression): SelectExpression","org.ktorm.support.mysql.MySqlFormatter.visitSelect"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.mysql.BulkInsertExpression.extraProperties","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.mysql.BulkInsertExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.mysql.DefaultValueExpression.extraProperties","location":"ktorm-support-mysql/org.ktorm.support.mysql/-default-value-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.mysql.DefaultValueExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.mysql.InsertOrUpdateExpression.extraProperties","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.mysql.InsertOrUpdateExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.mysql.MatchAgainstExpression.extraProperties","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.mysql.MatchAgainstExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.mysql.NaturalJoinExpression.extraProperties","location":"ktorm-support-mysql/org.ktorm.support.mysql/-natural-join-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.mysql.NaturalJoinExpression.extraProperties"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.mysql.BulkInsertExpression.isLeafNode","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.mysql.BulkInsertExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.mysql.InsertOrUpdateExpression.isLeafNode","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.mysql.InsertOrUpdateExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.mysql.MatchAgainstExpression.isLeafNode","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.mysql.MatchAgainstExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.mysql.NaturalJoinExpression.isLeafNode","location":"ktorm-support-mysql/org.ktorm.support.mysql/-natural-join-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.mysql.NaturalJoinExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = true","description":"org.ktorm.support.mysql.DefaultValueExpression.isLeafNode","location":"ktorm-support-mysql/org.ktorm.support.mysql/-default-value-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = true","org.ktorm.support.mysql.DefaultValueExpression.isLeafNode"]},{"name":"open override val sqlType: SqlType<Boolean>","description":"org.ktorm.support.mysql.MatchAgainstExpression.sqlType","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<Boolean>","org.ktorm.support.mysql.MatchAgainstExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.support.mysql.DefaultValueExpression.sqlType","location":"ktorm-support-mysql/org.ktorm.support.mysql/-default-value-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.support.mysql.DefaultValueExpression.sqlType"]},{"name":"val assignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.mysql.InsertOrUpdateExpression.assignments","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-expression/assignments.html","searchKeys":["assignments","val assignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.mysql.InsertOrUpdateExpression.assignments"]},{"name":"val assignments: List<List<ColumnAssignmentExpression<*>>>","description":"org.ktorm.support.mysql.BulkInsertExpression.assignments","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-expression/assignments.html","searchKeys":["assignments","val assignments: List<List<ColumnAssignmentExpression<*>>>","org.ktorm.support.mysql.BulkInsertExpression.assignments"]},{"name":"val entries: EnumEntries<LockingMode>","description":"org.ktorm.support.mysql.LockingMode.entries","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-mode/entries.html","searchKeys":["entries","val entries: EnumEntries<LockingMode>","org.ktorm.support.mysql.LockingMode.entries"]},{"name":"val entries: EnumEntries<LockingWait>","description":"org.ktorm.support.mysql.LockingWait.entries","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-wait/entries.html","searchKeys":["entries","val entries: EnumEntries<LockingWait>","org.ktorm.support.mysql.LockingWait.entries"]},{"name":"val entries: EnumEntries<SearchModifier>","description":"org.ktorm.support.mysql.SearchModifier.entries","location":"ktorm-support-mysql/org.ktorm.support.mysql/-search-modifier/entries.html","searchKeys":["entries","val entries: EnumEntries<SearchModifier>","org.ktorm.support.mysql.SearchModifier.entries"]},{"name":"val left: QuerySourceExpression","description":"org.ktorm.support.mysql.NaturalJoinExpression.left","location":"ktorm-support-mysql/org.ktorm.support.mysql/-natural-join-expression/left.html","searchKeys":["left","val left: QuerySourceExpression","org.ktorm.support.mysql.NaturalJoinExpression.left"]},{"name":"val matchColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.mysql.MatchAgainstExpression.matchColumns","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/match-columns.html","searchKeys":["matchColumns","val matchColumns: List<ColumnExpression<*>>","org.ktorm.support.mysql.MatchAgainstExpression.matchColumns"]},{"name":"val mode: LockingMode","description":"org.ktorm.support.mysql.LockingClause.mode","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-clause/mode.html","searchKeys":["mode","val mode: LockingMode","org.ktorm.support.mysql.LockingClause.mode"]},{"name":"val right: QuerySourceExpression","description":"org.ktorm.support.mysql.NaturalJoinExpression.right","location":"ktorm-support-mysql/org.ktorm.support.mysql/-natural-join-expression/right.html","searchKeys":["right","val right: QuerySourceExpression","org.ktorm.support.mysql.NaturalJoinExpression.right"]},{"name":"val searchModifier: SearchModifier? = null","description":"org.ktorm.support.mysql.MatchAgainstExpression.searchModifier","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/search-modifier.html","searchKeys":["searchModifier","val searchModifier: SearchModifier? = null","org.ktorm.support.mysql.MatchAgainstExpression.searchModifier"]},{"name":"val searchString: String","description":"org.ktorm.support.mysql.MatchAgainstExpression.searchString","location":"ktorm-support-mysql/org.ktorm.support.mysql/-match-against-expression/search-string.html","searchKeys":["searchString","val searchString: String","org.ktorm.support.mysql.MatchAgainstExpression.searchString"]},{"name":"val table: TableExpression","description":"org.ktorm.support.mysql.BulkInsertExpression.table","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.support.mysql.BulkInsertExpression.table"]},{"name":"val table: TableExpression","description":"org.ktorm.support.mysql.InsertOrUpdateExpression.table","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.support.mysql.InsertOrUpdateExpression.table"]},{"name":"val tables: List<TableExpression>","description":"org.ktorm.support.mysql.LockingClause.tables","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-clause/tables.html","searchKeys":["tables","val tables: List<TableExpression>","org.ktorm.support.mysql.LockingClause.tables"]},{"name":"val updateAssignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.mysql.BulkInsertExpression.updateAssignments","location":"ktorm-support-mysql/org.ktorm.support.mysql/-bulk-insert-expression/update-assignments.html","searchKeys":["updateAssignments","val updateAssignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.mysql.BulkInsertExpression.updateAssignments"]},{"name":"val updateAssignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.mysql.InsertOrUpdateExpression.updateAssignments","location":"ktorm-support-mysql/org.ktorm.support.mysql/-insert-or-update-expression/update-assignments.html","searchKeys":["updateAssignments","val updateAssignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.mysql.InsertOrUpdateExpression.updateAssignments"]},{"name":"val wait: LockingWait","description":"org.ktorm.support.mysql.LockingClause.wait","location":"ktorm-support-mysql/org.ktorm.support.mysql/-locking-clause/wait.html","searchKeys":["wait","val wait: LockingWait","org.ktorm.support.mysql.LockingClause.wait"]},{"name":"constructor()","description":"org.ktorm.support.sqlserver.SqlServerDialect.SqlServerDialect","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-sql-server-dialect/-sql-server-dialect.html","searchKeys":["SqlServerDialect","constructor()","org.ktorm.support.sqlserver.SqlServerDialect.SqlServerDialect"]},{"name":"constructor(database: Database, beautifySql: Boolean, indentSize: Int)","description":"org.ktorm.support.sqlserver.SqlServerFormatter.SqlServerFormatter","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-sql-server-formatter/-sql-server-formatter.html","searchKeys":["SqlServerFormatter","constructor(database: Database, beautifySql: Boolean, indentSize: Int)","org.ktorm.support.sqlserver.SqlServerFormatter.SqlServerFormatter"]},{"name":"fun BaseTable<*>.datetimeoffset(name: String): Column<OffsetDateTime>","description":"org.ktorm.support.sqlserver.datetimeoffset","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/datetimeoffset.html","searchKeys":["datetimeoffset","fun BaseTable<*>.datetimeoffset(name: String): Column<OffsetDateTime>","org.ktorm.support.sqlserver.datetimeoffset"]},{"name":"object DateTimeOffsetSqlType : SqlType<OffsetDateTime> ","description":"org.ktorm.support.sqlserver.DateTimeOffsetSqlType","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-date-time-offset-sql-type/index.html","searchKeys":["DateTimeOffsetSqlType","object DateTimeOffsetSqlType : SqlType<OffsetDateTime> ","org.ktorm.support.sqlserver.DateTimeOffsetSqlType"]},{"name":"open class SqlServerDialect : SqlDialect","description":"org.ktorm.support.sqlserver.SqlServerDialect","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-sql-server-dialect/index.html","searchKeys":["SqlServerDialect","open class SqlServerDialect : SqlDialect","org.ktorm.support.sqlserver.SqlServerDialect"]},{"name":"open class SqlServerFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter","description":"org.ktorm.support.sqlserver.SqlServerFormatter","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-sql-server-formatter/index.html","searchKeys":["SqlServerFormatter","open class SqlServerFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter","org.ktorm.support.sqlserver.SqlServerFormatter"]},{"name":"open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","description":"org.ktorm.support.sqlserver.SqlServerDialect.createSqlFormatter","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-sql-server-dialect/create-sql-formatter.html","searchKeys":["createSqlFormatter","open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","org.ktorm.support.sqlserver.SqlServerDialect.createSqlFormatter"]},{"name":"open override fun visitQuery(expr: QueryExpression): QueryExpression","description":"org.ktorm.support.sqlserver.SqlServerFormatter.visitQuery","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-sql-server-formatter/visit-query.html","searchKeys":["visitQuery","open override fun visitQuery(expr: QueryExpression): QueryExpression","org.ktorm.support.sqlserver.SqlServerFormatter.visitQuery"]},{"name":"open override fun visitWindowFrameBound(expr: WindowFrameBoundExpression): WindowFrameBoundExpression","description":"org.ktorm.support.sqlserver.SqlServerFormatter.visitWindowFrameBound","location":"ktorm-support-sqlserver/org.ktorm.support.sqlserver/-sql-server-formatter/visit-window-frame-bound.html","searchKeys":["visitWindowFrameBound","open override fun visitWindowFrameBound(expr: WindowFrameBoundExpression): WindowFrameBoundExpression","org.ktorm.support.sqlserver.SqlServerFormatter.visitWindowFrameBound"]},{"name":"class BulkInsertOrUpdateStatementBuilder<T : BaseTable<*>>(table: T) : BulkInsertStatementBuilder<T> ","description":"org.ktorm.support.sqlite.BulkInsertOrUpdateStatementBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-or-update-statement-builder/index.html","searchKeys":["BulkInsertOrUpdateStatementBuilder","class BulkInsertOrUpdateStatementBuilder<T : BaseTable<*>>(table: T) : BulkInsertStatementBuilder<T> ","org.ktorm.support.sqlite.BulkInsertOrUpdateStatementBuilder"]},{"name":"class InsertOrUpdateOnConflictClauseBuilder : SQLiteAssignmentsBuilder","description":"org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-on-conflict-clause-builder/index.html","searchKeys":["InsertOrUpdateOnConflictClauseBuilder","class InsertOrUpdateOnConflictClauseBuilder : SQLiteAssignmentsBuilder","org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder"]},{"name":"class InsertOrUpdateStatementBuilder : SQLiteAssignmentsBuilder","description":"org.ktorm.support.sqlite.InsertOrUpdateStatementBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-statement-builder/index.html","searchKeys":["InsertOrUpdateStatementBuilder","class InsertOrUpdateStatementBuilder : SQLiteAssignmentsBuilder","org.ktorm.support.sqlite.InsertOrUpdateStatementBuilder"]},{"name":"constructor()","description":"org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.InsertOrUpdateOnConflictClauseBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-on-conflict-clause-builder/-insert-or-update-on-conflict-clause-builder.html","searchKeys":["InsertOrUpdateOnConflictClauseBuilder","constructor()","org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.InsertOrUpdateOnConflictClauseBuilder"]},{"name":"constructor()","description":"org.ktorm.support.sqlite.InsertOrUpdateStatementBuilder.InsertOrUpdateStatementBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-statement-builder/-insert-or-update-statement-builder.html","searchKeys":["InsertOrUpdateStatementBuilder","constructor()","org.ktorm.support.sqlite.InsertOrUpdateStatementBuilder.InsertOrUpdateStatementBuilder"]},{"name":"constructor()","description":"org.ktorm.support.sqlite.SQLiteAssignmentsBuilder.SQLiteAssignmentsBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-assignments-builder/-s-q-lite-assignments-builder.html","searchKeys":["SQLiteAssignmentsBuilder","constructor()","org.ktorm.support.sqlite.SQLiteAssignmentsBuilder.SQLiteAssignmentsBuilder"]},{"name":"constructor()","description":"org.ktorm.support.sqlite.SQLiteDialect.SQLiteDialect","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-dialect/-s-q-lite-dialect.html","searchKeys":["SQLiteDialect","constructor()","org.ktorm.support.sqlite.SQLiteDialect.SQLiteDialect"]},{"name":"constructor(database: Database, beautifySql: Boolean, indentSize: Int)","description":"org.ktorm.support.sqlite.SQLiteFormatter.SQLiteFormatter","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-formatter/-s-q-lite-formatter.html","searchKeys":["SQLiteFormatter","constructor(database: Database, beautifySql: Boolean, indentSize: Int)","org.ktorm.support.sqlite.SQLiteFormatter.SQLiteFormatter"]},{"name":"constructor(table: T)","description":"org.ktorm.support.sqlite.BulkInsertOrUpdateStatementBuilder.BulkInsertOrUpdateStatementBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-or-update-statement-builder/-bulk-insert-or-update-statement-builder.html","searchKeys":["BulkInsertOrUpdateStatementBuilder","constructor(table: T)","org.ktorm.support.sqlite.BulkInsertOrUpdateStatementBuilder.BulkInsertOrUpdateStatementBuilder"]},{"name":"constructor(table: T)","description":"org.ktorm.support.sqlite.BulkInsertStatementBuilder.BulkInsertStatementBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-statement-builder/-bulk-insert-statement-builder.html","searchKeys":["BulkInsertStatementBuilder","constructor(table: T)","org.ktorm.support.sqlite.BulkInsertStatementBuilder.BulkInsertStatementBuilder"]},{"name":"constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), where: ScalarExpression<Boolean>? = null, returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.InsertOrUpdateExpression","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/-insert-or-update-expression.html","searchKeys":["InsertOrUpdateExpression","constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), where: ScalarExpression<Boolean>? = null, returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.sqlite.InsertOrUpdateExpression.InsertOrUpdateExpression"]},{"name":"constructor(table: TableExpression, assignments: List<List<ColumnAssignmentExpression<*>>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), where: ScalarExpression<Boolean>? = null, returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.sqlite.BulkInsertExpression.BulkInsertExpression","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/-bulk-insert-expression.html","searchKeys":["BulkInsertExpression","constructor(table: TableExpression, assignments: List<List<ColumnAssignmentExpression<*>>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), where: ScalarExpression<Boolean>? = null, returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.sqlite.BulkInsertExpression.BulkInsertExpression"]},{"name":"data class BulkInsertExpression(val table: TableExpression, val assignments: List<List<ColumnAssignmentExpression<*>>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val where: ScalarExpression<Boolean>? = null, val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.support.sqlite.BulkInsertExpression","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/index.html","searchKeys":["BulkInsertExpression","data class BulkInsertExpression(val table: TableExpression, val assignments: List<List<ColumnAssignmentExpression<*>>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val where: ScalarExpression<Boolean>? = null, val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.support.sqlite.BulkInsertExpression"]},{"name":"data class InsertOrUpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val where: ScalarExpression<Boolean>? = null, val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/index.html","searchKeys":["InsertOrUpdateExpression","data class InsertOrUpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val where: ScalarExpression<Boolean>? = null, val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.support.sqlite.InsertOrUpdateExpression"]},{"name":"fun <T : Any> ColumnDeclaring<T>.ifNull(right: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.sqlite.ifNull","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/if-null.html","searchKeys":["ifNull","fun <T : Any> ColumnDeclaring<T>.ifNull(right: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.sqlite.ifNull"]},{"name":"fun <T : Any> ColumnDeclaring<T>.ifNull(right: T?): FunctionExpression<T>","description":"org.ktorm.support.sqlite.ifNull","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/if-null.html","searchKeys":["ifNull","fun <T : Any> ColumnDeclaring<T>.ifNull(right: T?): FunctionExpression<T>","org.ktorm.support.sqlite.ifNull"]},{"name":"fun <T : Any> excluded(column: Column<T>): ColumnExpression<T>","description":"org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.excluded","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-on-conflict-clause-builder/excluded.html","searchKeys":["excluded","fun <T : Any> excluded(column: Column<T>): ColumnExpression<T>","org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.excluded"]},{"name":"fun <T : Any> iif(condition: ColumnDeclaring<Boolean>, then: ColumnDeclaring<T>, otherwise: ColumnDeclaring<T>): FunctionExpression<T>","description":"org.ktorm.support.sqlite.iif","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/iif.html","searchKeys":["iif","fun <T : Any> iif(condition: ColumnDeclaring<Boolean>, then: ColumnDeclaring<T>, otherwise: ColumnDeclaring<T>): FunctionExpression<T>","org.ktorm.support.sqlite.iif"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Column<C>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<C?>","description":"org.ktorm.support.sqlite.bulkInsertOrUpdateReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert-or-update-returning.html","searchKeys":["bulkInsertOrUpdateReturning","fun <T : BaseTable<*>, C : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Column<C>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<C?>","org.ktorm.support.sqlite.bulkInsertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.bulkInsertReturning(table: T, returning: Column<C>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<C?>","description":"org.ktorm.support.sqlite.bulkInsertReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert-returning.html","searchKeys":["bulkInsertReturning","fun <T : BaseTable<*>, C : Any> Database.bulkInsertReturning(table: T, returning: Column<C>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<C?>","org.ktorm.support.sqlite.bulkInsertReturning"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.insertOrUpdateReturning(table: T, returning: Column<C>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): C?","description":"org.ktorm.support.sqlite.insertOrUpdateReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/insert-or-update-returning.html","searchKeys":["insertOrUpdateReturning","fun <T : BaseTable<*>, C : Any> Database.insertOrUpdateReturning(table: T, returning: Column<C>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): C?","org.ktorm.support.sqlite.insertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.insertReturning(table: T, returning: Column<C>, block: AssignmentsBuilder.(T) -> Unit): C?","description":"org.ktorm.support.sqlite.insertReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/insert-returning.html","searchKeys":["insertReturning","fun <T : BaseTable<*>, C : Any> Database.insertReturning(table: T, returning: Column<C>, block: AssignmentsBuilder.(T) -> Unit): C?","org.ktorm.support.sqlite.insertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","description":"org.ktorm.support.sqlite.bulkInsertOrUpdateReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert-or-update-returning.html","searchKeys":["bulkInsertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","org.ktorm.support.sqlite.bulkInsertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","description":"org.ktorm.support.sqlite.bulkInsertReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert-returning.html","searchKeys":["bulkInsertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","org.ktorm.support.sqlite.bulkInsertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","description":"org.ktorm.support.sqlite.insertOrUpdateReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/insert-or-update-returning.html","searchKeys":["insertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","org.ktorm.support.sqlite.insertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: AssignmentsBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","description":"org.ktorm.support.sqlite.insertReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/insert-returning.html","searchKeys":["insertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: AssignmentsBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","org.ktorm.support.sqlite.insertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","description":"org.ktorm.support.sqlite.bulkInsertOrUpdateReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert-or-update-returning.html","searchKeys":["bulkInsertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","org.ktorm.support.sqlite.bulkInsertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","description":"org.ktorm.support.sqlite.bulkInsertReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert-returning.html","searchKeys":["bulkInsertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","org.ktorm.support.sqlite.bulkInsertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Pair<C1?, C2?>","description":"org.ktorm.support.sqlite.insertOrUpdateReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/insert-or-update-returning.html","searchKeys":["insertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Pair<C1?, C2?>","org.ktorm.support.sqlite.insertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: AssignmentsBuilder.(T) -> Unit): Pair<C1?, C2?>","description":"org.ktorm.support.sqlite.insertReturning","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/insert-returning.html","searchKeys":["insertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: AssignmentsBuilder.(T) -> Unit): Pair<C1?, C2?>","org.ktorm.support.sqlite.insertReturning"]},{"name":"fun <T : BaseTable<*>> Database.bulkInsert(table: T, block: BulkInsertStatementBuilder<T>.(T) -> Unit): Int","description":"org.ktorm.support.sqlite.bulkInsert","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert.html","searchKeys":["bulkInsert","fun <T : BaseTable<*>> Database.bulkInsert(table: T, block: BulkInsertStatementBuilder<T>.(T) -> Unit): Int","org.ktorm.support.sqlite.bulkInsert"]},{"name":"fun <T : BaseTable<*>> Database.bulkInsertOrUpdate(table: T, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): Int","description":"org.ktorm.support.sqlite.bulkInsertOrUpdate","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/bulk-insert-or-update.html","searchKeys":["bulkInsertOrUpdate","fun <T : BaseTable<*>> Database.bulkInsertOrUpdate(table: T, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): Int","org.ktorm.support.sqlite.bulkInsertOrUpdate"]},{"name":"fun <T : BaseTable<*>> Database.insertOrUpdate(table: T, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","description":"org.ktorm.support.sqlite.insertOrUpdate","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/insert-or-update.html","searchKeys":["insertOrUpdate","fun <T : BaseTable<*>> Database.insertOrUpdate(table: T, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","org.ktorm.support.sqlite.insertOrUpdate"]},{"name":"fun ColumnDeclaring<*>.jsonPatch(right: ColumnDeclaring<*>): FunctionExpression<String>","description":"org.ktorm.support.sqlite.jsonPatch","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/json-patch.html","searchKeys":["jsonPatch","fun ColumnDeclaring<*>.jsonPatch(right: ColumnDeclaring<*>): FunctionExpression<String>","org.ktorm.support.sqlite.jsonPatch"]},{"name":"fun ColumnDeclaring<*>.jsonRemove(path: String): FunctionExpression<String>","description":"org.ktorm.support.sqlite.jsonRemove","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/json-remove.html","searchKeys":["jsonRemove","fun ColumnDeclaring<*>.jsonRemove(path: String): FunctionExpression<String>","org.ktorm.support.sqlite.jsonRemove"]},{"name":"fun ColumnDeclaring<*>.jsonValid(): FunctionExpression<Boolean>","description":"org.ktorm.support.sqlite.jsonValid","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/json-valid.html","searchKeys":["jsonValid","fun ColumnDeclaring<*>.jsonValid(): FunctionExpression<Boolean>","org.ktorm.support.sqlite.jsonValid"]},{"name":"fun ColumnDeclaring<String>.instr(right: ColumnDeclaring<String>): FunctionExpression<Int>","description":"org.ktorm.support.sqlite.instr","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/instr.html","searchKeys":["instr","fun ColumnDeclaring<String>.instr(right: ColumnDeclaring<String>): FunctionExpression<Int>","org.ktorm.support.sqlite.instr"]},{"name":"fun ColumnDeclaring<String>.instr(right: String): FunctionExpression<Int>","description":"org.ktorm.support.sqlite.instr","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/instr.html","searchKeys":["instr","fun ColumnDeclaring<String>.instr(right: String): FunctionExpression<Int>","org.ktorm.support.sqlite.instr"]},{"name":"fun ColumnDeclaring<String>.replace(oldValue: String, newValue: String): FunctionExpression<String>","description":"org.ktorm.support.sqlite.replace","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/replace.html","searchKeys":["replace","fun ColumnDeclaring<String>.replace(oldValue: String, newValue: String): FunctionExpression<String>","org.ktorm.support.sqlite.replace"]},{"name":"fun ColumnDeclaring<String>.toLowerCase(): FunctionExpression<String>","description":"org.ktorm.support.sqlite.toLowerCase","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/to-lower-case.html","searchKeys":["toLowerCase","fun ColumnDeclaring<String>.toLowerCase(): FunctionExpression<String>","org.ktorm.support.sqlite.toLowerCase"]},{"name":"fun ColumnDeclaring<String>.toUpperCase(): FunctionExpression<String>","description":"org.ktorm.support.sqlite.toUpperCase","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/to-upper-case.html","searchKeys":["toUpperCase","fun ColumnDeclaring<String>.toUpperCase(): FunctionExpression<String>","org.ktorm.support.sqlite.toUpperCase"]},{"name":"fun doNothing()","description":"org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.doNothing","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-on-conflict-clause-builder/do-nothing.html","searchKeys":["doNothing","fun doNothing()","org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.doNothing"]},{"name":"fun item(block: AssignmentsBuilder.() -> Unit)","description":"org.ktorm.support.sqlite.BulkInsertStatementBuilder.item","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-statement-builder/item.html","searchKeys":["item","fun item(block: AssignmentsBuilder.() -> Unit)","org.ktorm.support.sqlite.BulkInsertStatementBuilder.item"]},{"name":"fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","description":"org.ktorm.support.sqlite.BulkInsertOrUpdateStatementBuilder.onConflict","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-or-update-statement-builder/on-conflict.html","searchKeys":["onConflict","fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","org.ktorm.support.sqlite.BulkInsertOrUpdateStatementBuilder.onConflict"]},{"name":"fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","description":"org.ktorm.support.sqlite.InsertOrUpdateStatementBuilder.onConflict","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-statement-builder/on-conflict.html","searchKeys":["onConflict","fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","org.ktorm.support.sqlite.InsertOrUpdateStatementBuilder.onConflict"]},{"name":"fun random(): FunctionExpression<Long>","description":"org.ktorm.support.sqlite.random","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/random.html","searchKeys":["random","fun random(): FunctionExpression<Long>","org.ktorm.support.sqlite.random"]},{"name":"fun where(block: () -> ColumnDeclaring<Boolean>)","description":"org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.where","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-on-conflict-clause-builder/where.html","searchKeys":["where","fun where(block: () -> ColumnDeclaring<Boolean>)","org.ktorm.support.sqlite.InsertOrUpdateOnConflictClauseBuilder.where"]},{"name":"inline fun <T : Any> ColumnDeclaring<*>.jsonExtract(path: String, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the result's SqlType, please specify manually.\")): FunctionExpression<T>","description":"org.ktorm.support.sqlite.jsonExtract","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/json-extract.html","searchKeys":["jsonExtract","inline fun <T : Any> ColumnDeclaring<*>.jsonExtract(path: String, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the result's SqlType, please specify manually.\")): FunctionExpression<T>","org.ktorm.support.sqlite.jsonExtract"]},{"name":"inline fun <T : Any> iif(condition: ColumnDeclaring<Boolean>, then: T, otherwise: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the param's SqlType, please specify manually.\")): FunctionExpression<T>","description":"org.ktorm.support.sqlite.iif","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/iif.html","searchKeys":["iif","inline fun <T : Any> iif(condition: ColumnDeclaring<Boolean>, then: T, otherwise: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the param's SqlType, please specify manually.\")): FunctionExpression<T>","org.ktorm.support.sqlite.iif"]},{"name":"interface SQLiteExpressionVisitor : SqlExpressionVisitor","description":"org.ktorm.support.sqlite.SQLiteExpressionVisitor","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-expression-visitor/index.html","searchKeys":["SQLiteExpressionVisitor","interface SQLiteExpressionVisitor : SqlExpressionVisitor","org.ktorm.support.sqlite.SQLiteExpressionVisitor"]},{"name":"open class BulkInsertStatementBuilder<T : BaseTable<*>>(table: T)","description":"org.ktorm.support.sqlite.BulkInsertStatementBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-statement-builder/index.html","searchKeys":["BulkInsertStatementBuilder","open class BulkInsertStatementBuilder<T : BaseTable<*>>(table: T)","org.ktorm.support.sqlite.BulkInsertStatementBuilder"]},{"name":"open class SQLiteAssignmentsBuilder : AssignmentsBuilder","description":"org.ktorm.support.sqlite.SQLiteAssignmentsBuilder","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-assignments-builder/index.html","searchKeys":["SQLiteAssignmentsBuilder","open class SQLiteAssignmentsBuilder : AssignmentsBuilder","org.ktorm.support.sqlite.SQLiteAssignmentsBuilder"]},{"name":"open class SQLiteDialect : SqlDialect","description":"org.ktorm.support.sqlite.SQLiteDialect","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-dialect/index.html","searchKeys":["SQLiteDialect","open class SQLiteDialect : SqlDialect","org.ktorm.support.sqlite.SQLiteDialect"]},{"name":"open class SQLiteFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter, SQLiteExpressionVisitor","description":"org.ktorm.support.sqlite.SQLiteFormatter","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-formatter/index.html","searchKeys":["SQLiteFormatter","open class SQLiteFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter, SQLiteExpressionVisitor","org.ktorm.support.sqlite.SQLiteFormatter"]},{"name":"open fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","description":"org.ktorm.support.sqlite.SQLiteExpressionVisitor.visitBulkInsert","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-expression-visitor/visit-bulk-insert.html","searchKeys":["visitBulkInsert","open fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","org.ktorm.support.sqlite.SQLiteExpressionVisitor.visitBulkInsert"]},{"name":"open fun visitBulkInsertAssignments(assignments: List<List<ColumnAssignmentExpression<*>>>): List<List<ColumnAssignmentExpression<*>>>","description":"org.ktorm.support.sqlite.SQLiteExpressionVisitor.visitBulkInsertAssignments","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-expression-visitor/visit-bulk-insert-assignments.html","searchKeys":["visitBulkInsertAssignments","open fun visitBulkInsertAssignments(assignments: List<List<ColumnAssignmentExpression<*>>>): List<List<ColumnAssignmentExpression<*>>>","org.ktorm.support.sqlite.SQLiteExpressionVisitor.visitBulkInsertAssignments"]},{"name":"open fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","description":"org.ktorm.support.sqlite.SQLiteExpressionVisitor.visitInsertOrUpdate","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-expression-visitor/visit-insert-or-update.html","searchKeys":["visitInsertOrUpdate","open fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","org.ktorm.support.sqlite.SQLiteExpressionVisitor.visitInsertOrUpdate"]},{"name":"open override fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","description":"org.ktorm.support.sqlite.SQLiteDialect.createExpressionVisitor","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-dialect/create-expression-visitor.html","searchKeys":["createExpressionVisitor","open override fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","org.ktorm.support.sqlite.SQLiteDialect.createExpressionVisitor"]},{"name":"open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","description":"org.ktorm.support.sqlite.SQLiteDialect.createSqlFormatter","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-dialect/create-sql-formatter.html","searchKeys":["createSqlFormatter","open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","org.ktorm.support.sqlite.SQLiteDialect.createSqlFormatter"]},{"name":"open override fun executeUpdateAndRetrieveKeys(database: Database, sql: String, args: List<ArgumentExpression<*>>): Pair<Int, CachedRowSet>","description":"org.ktorm.support.sqlite.SQLiteDialect.executeUpdateAndRetrieveKeys","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-dialect/execute-update-and-retrieve-keys.html","searchKeys":["executeUpdateAndRetrieveKeys","open override fun executeUpdateAndRetrieveKeys(database: Database, sql: String, args: List<ArgumentExpression<*>>): Pair<Int, CachedRowSet>","org.ktorm.support.sqlite.SQLiteDialect.executeUpdateAndRetrieveKeys"]},{"name":"open override fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.support.sqlite.SQLiteExpressionVisitor.visit","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-expression-visitor/visit.html","searchKeys":["visit","open override fun visit(expr: SqlExpression): SqlExpression","org.ktorm.support.sqlite.SQLiteExpressionVisitor.visit"]},{"name":"open override fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.support.sqlite.SQLiteFormatter.visit","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-formatter/visit.html","searchKeys":["visit","open override fun visit(expr: SqlExpression): SqlExpression","org.ktorm.support.sqlite.SQLiteFormatter.visit"]},{"name":"open override fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","description":"org.ktorm.support.sqlite.SQLiteFormatter.visitBulkInsert","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-formatter/visit-bulk-insert.html","searchKeys":["visitBulkInsert","open override fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","org.ktorm.support.sqlite.SQLiteFormatter.visitBulkInsert"]},{"name":"open override fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","description":"org.ktorm.support.sqlite.SQLiteFormatter.visitInsertOrUpdate","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-s-q-lite-formatter/visit-insert-or-update.html","searchKeys":["visitInsertOrUpdate","open override fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","org.ktorm.support.sqlite.SQLiteFormatter.visitInsertOrUpdate"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.sqlite.BulkInsertExpression.extraProperties","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.sqlite.BulkInsertExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.extraProperties","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.sqlite.InsertOrUpdateExpression.extraProperties"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.sqlite.BulkInsertExpression.isLeafNode","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.sqlite.BulkInsertExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.isLeafNode","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.sqlite.InsertOrUpdateExpression.isLeafNode"]},{"name":"val assignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.assignments","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/assignments.html","searchKeys":["assignments","val assignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.sqlite.InsertOrUpdateExpression.assignments"]},{"name":"val assignments: List<List<ColumnAssignmentExpression<*>>>","description":"org.ktorm.support.sqlite.BulkInsertExpression.assignments","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/assignments.html","searchKeys":["assignments","val assignments: List<List<ColumnAssignmentExpression<*>>>","org.ktorm.support.sqlite.BulkInsertExpression.assignments"]},{"name":"val conflictColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.sqlite.BulkInsertExpression.conflictColumns","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/conflict-columns.html","searchKeys":["conflictColumns","val conflictColumns: List<ColumnExpression<*>>","org.ktorm.support.sqlite.BulkInsertExpression.conflictColumns"]},{"name":"val conflictColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.conflictColumns","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/conflict-columns.html","searchKeys":["conflictColumns","val conflictColumns: List<ColumnExpression<*>>","org.ktorm.support.sqlite.InsertOrUpdateExpression.conflictColumns"]},{"name":"val returningColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.sqlite.BulkInsertExpression.returningColumns","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/returning-columns.html","searchKeys":["returningColumns","val returningColumns: List<ColumnExpression<*>>","org.ktorm.support.sqlite.BulkInsertExpression.returningColumns"]},{"name":"val returningColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.returningColumns","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/returning-columns.html","searchKeys":["returningColumns","val returningColumns: List<ColumnExpression<*>>","org.ktorm.support.sqlite.InsertOrUpdateExpression.returningColumns"]},{"name":"val table: TableExpression","description":"org.ktorm.support.sqlite.BulkInsertExpression.table","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.support.sqlite.BulkInsertExpression.table"]},{"name":"val table: TableExpression","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.table","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.support.sqlite.InsertOrUpdateExpression.table"]},{"name":"val updateAssignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.sqlite.BulkInsertExpression.updateAssignments","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/update-assignments.html","searchKeys":["updateAssignments","val updateAssignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.sqlite.BulkInsertExpression.updateAssignments"]},{"name":"val updateAssignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.updateAssignments","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/update-assignments.html","searchKeys":["updateAssignments","val updateAssignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.sqlite.InsertOrUpdateExpression.updateAssignments"]},{"name":"val where: ScalarExpression<Boolean>? = null","description":"org.ktorm.support.sqlite.BulkInsertExpression.where","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-bulk-insert-expression/where.html","searchKeys":["where","val where: ScalarExpression<Boolean>? = null","org.ktorm.support.sqlite.BulkInsertExpression.where"]},{"name":"val where: ScalarExpression<Boolean>? = null","description":"org.ktorm.support.sqlite.InsertOrUpdateExpression.where","location":"ktorm-support-sqlite/org.ktorm.support.sqlite/-insert-or-update-expression/where.html","searchKeys":["where","val where: ScalarExpression<Boolean>? = null","org.ktorm.support.sqlite.InsertOrUpdateExpression.where"]},{"name":"abstract fun getColumnName(c: KSClassDeclaration, prop: KSPropertyDeclaration): String","description":"org.ktorm.ksp.spi.DatabaseNamingStrategy.getColumnName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-database-naming-strategy/get-column-name.html","searchKeys":["getColumnName","abstract fun getColumnName(c: KSClassDeclaration, prop: KSPropertyDeclaration): String","org.ktorm.ksp.spi.DatabaseNamingStrategy.getColumnName"]},{"name":"abstract fun getColumnPropertyName(c: KSClassDeclaration, prop: KSPropertyDeclaration): String","description":"org.ktorm.ksp.spi.CodingNamingStrategy.getColumnPropertyName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-coding-naming-strategy/get-column-property-name.html","searchKeys":["getColumnPropertyName","abstract fun getColumnPropertyName(c: KSClassDeclaration, prop: KSPropertyDeclaration): String","org.ktorm.ksp.spi.CodingNamingStrategy.getColumnPropertyName"]},{"name":"abstract fun getEntitySequenceName(c: KSClassDeclaration): String","description":"org.ktorm.ksp.spi.CodingNamingStrategy.getEntitySequenceName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-coding-naming-strategy/get-entity-sequence-name.html","searchKeys":["getEntitySequenceName","abstract fun getEntitySequenceName(c: KSClassDeclaration): String","org.ktorm.ksp.spi.CodingNamingStrategy.getEntitySequenceName"]},{"name":"abstract fun getRefColumnName(c: KSClassDeclaration, prop: KSPropertyDeclaration, ref: TableMetadata): String","description":"org.ktorm.ksp.spi.DatabaseNamingStrategy.getRefColumnName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-database-naming-strategy/get-ref-column-name.html","searchKeys":["getRefColumnName","abstract fun getRefColumnName(c: KSClassDeclaration, prop: KSPropertyDeclaration, ref: TableMetadata): String","org.ktorm.ksp.spi.DatabaseNamingStrategy.getRefColumnName"]},{"name":"abstract fun getRefColumnPropertyName(c: KSClassDeclaration, prop: KSPropertyDeclaration, ref: TableMetadata): String","description":"org.ktorm.ksp.spi.CodingNamingStrategy.getRefColumnPropertyName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-coding-naming-strategy/get-ref-column-property-name.html","searchKeys":["getRefColumnPropertyName","abstract fun getRefColumnPropertyName(c: KSClassDeclaration, prop: KSPropertyDeclaration, ref: TableMetadata): String","org.ktorm.ksp.spi.CodingNamingStrategy.getRefColumnPropertyName"]},{"name":"abstract fun getRefTablePropertyName(c: KSClassDeclaration, prop: KSPropertyDeclaration, ref: TableMetadata): String","description":"org.ktorm.ksp.spi.CodingNamingStrategy.getRefTablePropertyName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-coding-naming-strategy/get-ref-table-property-name.html","searchKeys":["getRefTablePropertyName","abstract fun getRefTablePropertyName(c: KSClassDeclaration, prop: KSPropertyDeclaration, ref: TableMetadata): String","org.ktorm.ksp.spi.CodingNamingStrategy.getRefTablePropertyName"]},{"name":"abstract fun getTableClassName(c: KSClassDeclaration): String","description":"org.ktorm.ksp.spi.CodingNamingStrategy.getTableClassName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-coding-naming-strategy/get-table-class-name.html","searchKeys":["getTableClassName","abstract fun getTableClassName(c: KSClassDeclaration): String","org.ktorm.ksp.spi.CodingNamingStrategy.getTableClassName"]},{"name":"abstract fun getTableName(c: KSClassDeclaration): String","description":"org.ktorm.ksp.spi.DatabaseNamingStrategy.getTableName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-database-naming-strategy/get-table-name.html","searchKeys":["getTableName","abstract fun getTableName(c: KSClassDeclaration): String","org.ktorm.ksp.spi.DatabaseNamingStrategy.getTableName"]},{"name":"constructor(entityClass: KSClassDeclaration, name: String, alias: String?, catalog: String?, schema: String?, tableClassName: String, entitySequenceName: String, ignoreProperties: Set<String>, columns: List<ColumnMetadata>)","description":"org.ktorm.ksp.spi.TableMetadata.TableMetadata","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/-table-metadata.html","searchKeys":["TableMetadata","constructor(entityClass: KSClassDeclaration, name: String, alias: String?, catalog: String?, schema: String?, tableClassName: String, entitySequenceName: String, ignoreProperties: Set<String>, columns: List<ColumnMetadata>)","org.ktorm.ksp.spi.TableMetadata.TableMetadata"]},{"name":"constructor(entityProperty: KSPropertyDeclaration, table: TableMetadata, name: String, isPrimaryKey: Boolean, sqlType: KSType, isReference: Boolean, referenceTable: TableMetadata?, columnPropertyName: String, refTablePropertyName: String?)","description":"org.ktorm.ksp.spi.ColumnMetadata.ColumnMetadata","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/-column-metadata.html","searchKeys":["ColumnMetadata","constructor(entityProperty: KSPropertyDeclaration, table: TableMetadata, name: String, isPrimaryKey: Boolean, sqlType: KSType, isReference: Boolean, referenceTable: TableMetadata?, columnPropertyName: String, refTablePropertyName: String?)","org.ktorm.ksp.spi.ColumnMetadata.ColumnMetadata"]},{"name":"data class ColumnMetadata(val entityProperty: KSPropertyDeclaration, val table: TableMetadata, val name: String, val isPrimaryKey: Boolean, val sqlType: KSType, val isReference: Boolean, val referenceTable: TableMetadata?, val columnPropertyName: String, val refTablePropertyName: String?)","description":"org.ktorm.ksp.spi.ColumnMetadata","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/index.html","searchKeys":["ColumnMetadata","data class ColumnMetadata(val entityProperty: KSPropertyDeclaration, val table: TableMetadata, val name: String, val isPrimaryKey: Boolean, val sqlType: KSType, val isReference: Boolean, val referenceTable: TableMetadata?, val columnPropertyName: String, val refTablePropertyName: String?)","org.ktorm.ksp.spi.ColumnMetadata"]},{"name":"data class TableMetadata(val entityClass: KSClassDeclaration, val name: String, val alias: String?, val catalog: String?, val schema: String?, val tableClassName: String, val entitySequenceName: String, val ignoreProperties: Set<String>, val columns: List<ColumnMetadata>)","description":"org.ktorm.ksp.spi.TableMetadata","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/index.html","searchKeys":["TableMetadata","data class TableMetadata(val entityClass: KSClassDeclaration, val name: String, val alias: String?, val catalog: String?, val schema: String?, val tableClassName: String, val entitySequenceName: String, val ignoreProperties: Set<String>, val columns: List<ColumnMetadata>)","org.ktorm.ksp.spi.TableMetadata"]},{"name":"interface CodingNamingStrategy","description":"org.ktorm.ksp.spi.CodingNamingStrategy","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-coding-naming-strategy/index.html","searchKeys":["CodingNamingStrategy","interface CodingNamingStrategy","org.ktorm.ksp.spi.CodingNamingStrategy"]},{"name":"interface DatabaseNamingStrategy","description":"org.ktorm.ksp.spi.DatabaseNamingStrategy","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-database-naming-strategy/index.html","searchKeys":["DatabaseNamingStrategy","interface DatabaseNamingStrategy","org.ktorm.ksp.spi.DatabaseNamingStrategy"]},{"name":"interface ExtCodeGenerator","description":"org.ktorm.ksp.spi.ExtCodeGenerator","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-ext-code-generator/index.html","searchKeys":["ExtCodeGenerator","interface ExtCodeGenerator","org.ktorm.ksp.spi.ExtCodeGenerator"]},{"name":"open fun generateFunctions(table: TableMetadata, environment: SymbolProcessorEnvironment): List<FunSpec>","description":"org.ktorm.ksp.spi.ExtCodeGenerator.generateFunctions","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-ext-code-generator/generate-functions.html","searchKeys":["generateFunctions","open fun generateFunctions(table: TableMetadata, environment: SymbolProcessorEnvironment): List<FunSpec>","org.ktorm.ksp.spi.ExtCodeGenerator.generateFunctions"]},{"name":"open fun generateProperties(table: TableMetadata, environment: SymbolProcessorEnvironment): List<PropertySpec>","description":"org.ktorm.ksp.spi.ExtCodeGenerator.generateProperties","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-ext-code-generator/generate-properties.html","searchKeys":["generateProperties","open fun generateProperties(table: TableMetadata, environment: SymbolProcessorEnvironment): List<PropertySpec>","org.ktorm.ksp.spi.ExtCodeGenerator.generateProperties"]},{"name":"open fun generateTypes(table: TableMetadata, environment: SymbolProcessorEnvironment): List<TypeSpec>","description":"org.ktorm.ksp.spi.ExtCodeGenerator.generateTypes","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-ext-code-generator/generate-types.html","searchKeys":["generateTypes","open fun generateTypes(table: TableMetadata, environment: SymbolProcessorEnvironment): List<TypeSpec>","org.ktorm.ksp.spi.ExtCodeGenerator.generateTypes"]},{"name":"val alias: String?","description":"org.ktorm.ksp.spi.TableMetadata.alias","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/alias.html","searchKeys":["alias","val alias: String?","org.ktorm.ksp.spi.TableMetadata.alias"]},{"name":"val catalog: String?","description":"org.ktorm.ksp.spi.TableMetadata.catalog","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/catalog.html","searchKeys":["catalog","val catalog: String?","org.ktorm.ksp.spi.TableMetadata.catalog"]},{"name":"val columnPropertyName: String","description":"org.ktorm.ksp.spi.ColumnMetadata.columnPropertyName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/column-property-name.html","searchKeys":["columnPropertyName","val columnPropertyName: String","org.ktorm.ksp.spi.ColumnMetadata.columnPropertyName"]},{"name":"val columns: List<ColumnMetadata>","description":"org.ktorm.ksp.spi.TableMetadata.columns","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/columns.html","searchKeys":["columns","val columns: List<ColumnMetadata>","org.ktorm.ksp.spi.TableMetadata.columns"]},{"name":"val entityClass: KSClassDeclaration","description":"org.ktorm.ksp.spi.TableMetadata.entityClass","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/entity-class.html","searchKeys":["entityClass","val entityClass: KSClassDeclaration","org.ktorm.ksp.spi.TableMetadata.entityClass"]},{"name":"val entityProperty: KSPropertyDeclaration","description":"org.ktorm.ksp.spi.ColumnMetadata.entityProperty","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/entity-property.html","searchKeys":["entityProperty","val entityProperty: KSPropertyDeclaration","org.ktorm.ksp.spi.ColumnMetadata.entityProperty"]},{"name":"val entitySequenceName: String","description":"org.ktorm.ksp.spi.TableMetadata.entitySequenceName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/entity-sequence-name.html","searchKeys":["entitySequenceName","val entitySequenceName: String","org.ktorm.ksp.spi.TableMetadata.entitySequenceName"]},{"name":"val ignoreProperties: Set<String>","description":"org.ktorm.ksp.spi.TableMetadata.ignoreProperties","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/ignore-properties.html","searchKeys":["ignoreProperties","val ignoreProperties: Set<String>","org.ktorm.ksp.spi.TableMetadata.ignoreProperties"]},{"name":"val isPrimaryKey: Boolean","description":"org.ktorm.ksp.spi.ColumnMetadata.isPrimaryKey","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/is-primary-key.html","searchKeys":["isPrimaryKey","val isPrimaryKey: Boolean","org.ktorm.ksp.spi.ColumnMetadata.isPrimaryKey"]},{"name":"val isReference: Boolean","description":"org.ktorm.ksp.spi.ColumnMetadata.isReference","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/is-reference.html","searchKeys":["isReference","val isReference: Boolean","org.ktorm.ksp.spi.ColumnMetadata.isReference"]},{"name":"val name: String","description":"org.ktorm.ksp.spi.ColumnMetadata.name","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/name.html","searchKeys":["name","val name: String","org.ktorm.ksp.spi.ColumnMetadata.name"]},{"name":"val name: String","description":"org.ktorm.ksp.spi.TableMetadata.name","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/name.html","searchKeys":["name","val name: String","org.ktorm.ksp.spi.TableMetadata.name"]},{"name":"val refTablePropertyName: String?","description":"org.ktorm.ksp.spi.ColumnMetadata.refTablePropertyName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/ref-table-property-name.html","searchKeys":["refTablePropertyName","val refTablePropertyName: String?","org.ktorm.ksp.spi.ColumnMetadata.refTablePropertyName"]},{"name":"val referenceTable: TableMetadata?","description":"org.ktorm.ksp.spi.ColumnMetadata.referenceTable","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/reference-table.html","searchKeys":["referenceTable","val referenceTable: TableMetadata?","org.ktorm.ksp.spi.ColumnMetadata.referenceTable"]},{"name":"val schema: String?","description":"org.ktorm.ksp.spi.TableMetadata.schema","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/schema.html","searchKeys":["schema","val schema: String?","org.ktorm.ksp.spi.TableMetadata.schema"]},{"name":"val sqlType: KSType","description":"org.ktorm.ksp.spi.ColumnMetadata.sqlType","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/sql-type.html","searchKeys":["sqlType","val sqlType: KSType","org.ktorm.ksp.spi.ColumnMetadata.sqlType"]},{"name":"val table: TableMetadata","description":"org.ktorm.ksp.spi.ColumnMetadata.table","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-column-metadata/table.html","searchKeys":["table","val table: TableMetadata","org.ktorm.ksp.spi.ColumnMetadata.table"]},{"name":"val tableClassName: String","description":"org.ktorm.ksp.spi.TableMetadata.tableClassName","location":"ktorm-ksp-spi/org.ktorm.ksp.spi/-table-metadata/table-class-name.html","searchKeys":["tableClassName","val tableClassName: String","org.ktorm.ksp.spi.TableMetadata.tableClassName"]},{"name":"AND","description":"org.ktorm.expression.BinaryExpressionType.AND","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-a-n-d/index.html","searchKeys":["AND","AND","org.ktorm.expression.BinaryExpressionType.AND"]},{"name":"ASCENDING","description":"org.ktorm.expression.OrderType.ASCENDING","location":"ktorm-core/org.ktorm.expression/-order-type/-a-s-c-e-n-d-i-n-g/index.html","searchKeys":["ASCENDING","ASCENDING","org.ktorm.expression.OrderType.ASCENDING"]},{"name":"AVG","description":"org.ktorm.expression.AggregateType.AVG","location":"ktorm-core/org.ktorm.expression/-aggregate-type/-a-v-g/index.html","searchKeys":["AVG","AVG","org.ktorm.expression.AggregateType.AVG"]},{"name":"AVG","description":"org.ktorm.expression.WindowFunctionType.AVG","location":"ktorm-core/org.ktorm.expression/-window-function-type/-a-v-g/index.html","searchKeys":["AVG","AVG","org.ktorm.expression.WindowFunctionType.AVG"]},{"name":"COUNT","description":"org.ktorm.expression.AggregateType.COUNT","location":"ktorm-core/org.ktorm.expression/-aggregate-type/-c-o-u-n-t/index.html","searchKeys":["COUNT","COUNT","org.ktorm.expression.AggregateType.COUNT"]},{"name":"COUNT","description":"org.ktorm.expression.WindowFunctionType.COUNT","location":"ktorm-core/org.ktorm.expression/-window-function-type/-c-o-u-n-t/index.html","searchKeys":["COUNT","COUNT","org.ktorm.expression.WindowFunctionType.COUNT"]},{"name":"CROSS_JOIN","description":"org.ktorm.expression.JoinType.CROSS_JOIN","location":"ktorm-core/org.ktorm.expression/-join-type/-c-r-o-s-s_-j-o-i-n/index.html","searchKeys":["CROSS_JOIN","CROSS_JOIN","org.ktorm.expression.JoinType.CROSS_JOIN"]},{"name":"CUME_DIST","description":"org.ktorm.expression.WindowFunctionType.CUME_DIST","location":"ktorm-core/org.ktorm.expression/-window-function-type/-c-u-m-e_-d-i-s-t/index.html","searchKeys":["CUME_DIST","CUME_DIST","org.ktorm.expression.WindowFunctionType.CUME_DIST"]},{"name":"CURRENT_ROW","description":"org.ktorm.expression.WindowFrameBoundType.CURRENT_ROW","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/-c-u-r-r-e-n-t_-r-o-w/index.html","searchKeys":["CURRENT_ROW","CURRENT_ROW","org.ktorm.expression.WindowFrameBoundType.CURRENT_ROW"]},{"name":"DEBUG","description":"org.ktorm.logging.LogLevel.DEBUG","location":"ktorm-core/org.ktorm.logging/-log-level/-d-e-b-u-g/index.html","searchKeys":["DEBUG","DEBUG","org.ktorm.logging.LogLevel.DEBUG"]},{"name":"DENSE_RANK","description":"org.ktorm.expression.WindowFunctionType.DENSE_RANK","location":"ktorm-core/org.ktorm.expression/-window-function-type/-d-e-n-s-e_-r-a-n-k/index.html","searchKeys":["DENSE_RANK","DENSE_RANK","org.ktorm.expression.WindowFunctionType.DENSE_RANK"]},{"name":"DESCENDING","description":"org.ktorm.expression.OrderType.DESCENDING","location":"ktorm-core/org.ktorm.expression/-order-type/-d-e-s-c-e-n-d-i-n-g/index.html","searchKeys":["DESCENDING","DESCENDING","org.ktorm.expression.OrderType.DESCENDING"]},{"name":"DIV","description":"org.ktorm.expression.BinaryExpressionType.DIV","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-d-i-v/index.html","searchKeys":["DIV","DIV","org.ktorm.expression.BinaryExpressionType.DIV"]},{"name":"EQUAL","description":"org.ktorm.expression.BinaryExpressionType.EQUAL","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-e-q-u-a-l/index.html","searchKeys":["EQUAL","EQUAL","org.ktorm.expression.BinaryExpressionType.EQUAL"]},{"name":"ERROR","description":"org.ktorm.logging.LogLevel.ERROR","location":"ktorm-core/org.ktorm.logging/-log-level/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","org.ktorm.logging.LogLevel.ERROR"]},{"name":"FIRST_VALUE","description":"org.ktorm.expression.WindowFunctionType.FIRST_VALUE","location":"ktorm-core/org.ktorm.expression/-window-function-type/-f-i-r-s-t_-v-a-l-u-e/index.html","searchKeys":["FIRST_VALUE","FIRST_VALUE","org.ktorm.expression.WindowFunctionType.FIRST_VALUE"]},{"name":"FOLLOWING","description":"org.ktorm.expression.WindowFrameBoundType.FOLLOWING","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/-f-o-l-l-o-w-i-n-g/index.html","searchKeys":["FOLLOWING","FOLLOWING","org.ktorm.expression.WindowFrameBoundType.FOLLOWING"]},{"name":"FULL_JOIN","description":"org.ktorm.expression.JoinType.FULL_JOIN","location":"ktorm-core/org.ktorm.expression/-join-type/-f-u-l-l_-j-o-i-n/index.html","searchKeys":["FULL_JOIN","FULL_JOIN","org.ktorm.expression.JoinType.FULL_JOIN"]},{"name":"GREATER_THAN","description":"org.ktorm.expression.BinaryExpressionType.GREATER_THAN","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-g-r-e-a-t-e-r_-t-h-a-n/index.html","searchKeys":["GREATER_THAN","GREATER_THAN","org.ktorm.expression.BinaryExpressionType.GREATER_THAN"]},{"name":"GREATER_THAN_OR_EQUAL","description":"org.ktorm.expression.BinaryExpressionType.GREATER_THAN_OR_EQUAL","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-g-r-e-a-t-e-r_-t-h-a-n_-o-r_-e-q-u-a-l/index.html","searchKeys":["GREATER_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","org.ktorm.expression.BinaryExpressionType.GREATER_THAN_OR_EQUAL"]},{"name":"INFO","description":"org.ktorm.logging.LogLevel.INFO","location":"ktorm-core/org.ktorm.logging/-log-level/-i-n-f-o/index.html","searchKeys":["INFO","INFO","org.ktorm.logging.LogLevel.INFO"]},{"name":"INNER_JOIN","description":"org.ktorm.expression.JoinType.INNER_JOIN","location":"ktorm-core/org.ktorm.expression/-join-type/-i-n-n-e-r_-j-o-i-n/index.html","searchKeys":["INNER_JOIN","INNER_JOIN","org.ktorm.expression.JoinType.INNER_JOIN"]},{"name":"IS_NOT_NULL","description":"org.ktorm.expression.UnaryExpressionType.IS_NOT_NULL","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/-i-s_-n-o-t_-n-u-l-l/index.html","searchKeys":["IS_NOT_NULL","IS_NOT_NULL","org.ktorm.expression.UnaryExpressionType.IS_NOT_NULL"]},{"name":"IS_NULL","description":"org.ktorm.expression.UnaryExpressionType.IS_NULL","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/-i-s_-n-u-l-l/index.html","searchKeys":["IS_NULL","IS_NULL","org.ktorm.expression.UnaryExpressionType.IS_NULL"]},{"name":"LAG","description":"org.ktorm.expression.WindowFunctionType.LAG","location":"ktorm-core/org.ktorm.expression/-window-function-type/-l-a-g/index.html","searchKeys":["LAG","LAG","org.ktorm.expression.WindowFunctionType.LAG"]},{"name":"LAST_VALUE","description":"org.ktorm.expression.WindowFunctionType.LAST_VALUE","location":"ktorm-core/org.ktorm.expression/-window-function-type/-l-a-s-t_-v-a-l-u-e/index.html","searchKeys":["LAST_VALUE","LAST_VALUE","org.ktorm.expression.WindowFunctionType.LAST_VALUE"]},{"name":"LEAD","description":"org.ktorm.expression.WindowFunctionType.LEAD","location":"ktorm-core/org.ktorm.expression/-window-function-type/-l-e-a-d/index.html","searchKeys":["LEAD","LEAD","org.ktorm.expression.WindowFunctionType.LEAD"]},{"name":"LEFT_JOIN","description":"org.ktorm.expression.JoinType.LEFT_JOIN","location":"ktorm-core/org.ktorm.expression/-join-type/-l-e-f-t_-j-o-i-n/index.html","searchKeys":["LEFT_JOIN","LEFT_JOIN","org.ktorm.expression.JoinType.LEFT_JOIN"]},{"name":"LESS_THAN","description":"org.ktorm.expression.BinaryExpressionType.LESS_THAN","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-l-e-s-s_-t-h-a-n/index.html","searchKeys":["LESS_THAN","LESS_THAN","org.ktorm.expression.BinaryExpressionType.LESS_THAN"]},{"name":"LESS_THAN_OR_EQUAL","description":"org.ktorm.expression.BinaryExpressionType.LESS_THAN_OR_EQUAL","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-l-e-s-s_-t-h-a-n_-o-r_-e-q-u-a-l/index.html","searchKeys":["LESS_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","org.ktorm.expression.BinaryExpressionType.LESS_THAN_OR_EQUAL"]},{"name":"LIKE","description":"org.ktorm.expression.BinaryExpressionType.LIKE","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-l-i-k-e/index.html","searchKeys":["LIKE","LIKE","org.ktorm.expression.BinaryExpressionType.LIKE"]},{"name":"MAX","description":"org.ktorm.expression.AggregateType.MAX","location":"ktorm-core/org.ktorm.expression/-aggregate-type/-m-a-x/index.html","searchKeys":["MAX","MAX","org.ktorm.expression.AggregateType.MAX"]},{"name":"MAX","description":"org.ktorm.expression.WindowFunctionType.MAX","location":"ktorm-core/org.ktorm.expression/-window-function-type/-m-a-x/index.html","searchKeys":["MAX","MAX","org.ktorm.expression.WindowFunctionType.MAX"]},{"name":"MIN","description":"org.ktorm.expression.AggregateType.MIN","location":"ktorm-core/org.ktorm.expression/-aggregate-type/-m-i-n/index.html","searchKeys":["MIN","MIN","org.ktorm.expression.AggregateType.MIN"]},{"name":"MIN","description":"org.ktorm.expression.WindowFunctionType.MIN","location":"ktorm-core/org.ktorm.expression/-window-function-type/-m-i-n/index.html","searchKeys":["MIN","MIN","org.ktorm.expression.WindowFunctionType.MIN"]},{"name":"MINUS","description":"org.ktorm.expression.BinaryExpressionType.MINUS","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-m-i-n-u-s/index.html","searchKeys":["MINUS","MINUS","org.ktorm.expression.BinaryExpressionType.MINUS"]},{"name":"NONE","description":"org.ktorm.database.TransactionIsolation.NONE","location":"ktorm-core/org.ktorm.database/-transaction-isolation/-n-o-n-e/index.html","searchKeys":["NONE","NONE","org.ktorm.database.TransactionIsolation.NONE"]},{"name":"NOT","description":"org.ktorm.expression.UnaryExpressionType.NOT","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/-n-o-t/index.html","searchKeys":["NOT","NOT","org.ktorm.expression.UnaryExpressionType.NOT"]},{"name":"NOT_EQUAL","description":"org.ktorm.expression.BinaryExpressionType.NOT_EQUAL","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-n-o-t_-e-q-u-a-l/index.html","searchKeys":["NOT_EQUAL","NOT_EQUAL","org.ktorm.expression.BinaryExpressionType.NOT_EQUAL"]},{"name":"NOT_LIKE","description":"org.ktorm.expression.BinaryExpressionType.NOT_LIKE","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-n-o-t_-l-i-k-e/index.html","searchKeys":["NOT_LIKE","NOT_LIKE","org.ktorm.expression.BinaryExpressionType.NOT_LIKE"]},{"name":"NTH_VALUE","description":"org.ktorm.expression.WindowFunctionType.NTH_VALUE","location":"ktorm-core/org.ktorm.expression/-window-function-type/-n-t-h_-v-a-l-u-e/index.html","searchKeys":["NTH_VALUE","NTH_VALUE","org.ktorm.expression.WindowFunctionType.NTH_VALUE"]},{"name":"NTILE","description":"org.ktorm.expression.WindowFunctionType.NTILE","location":"ktorm-core/org.ktorm.expression/-window-function-type/-n-t-i-l-e/index.html","searchKeys":["NTILE","NTILE","org.ktorm.expression.WindowFunctionType.NTILE"]},{"name":"OR","description":"org.ktorm.expression.BinaryExpressionType.OR","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-o-r/index.html","searchKeys":["OR","OR","org.ktorm.expression.BinaryExpressionType.OR"]},{"name":"PERCENT_RANK","description":"org.ktorm.expression.WindowFunctionType.PERCENT_RANK","location":"ktorm-core/org.ktorm.expression/-window-function-type/-p-e-r-c-e-n-t_-r-a-n-k/index.html","searchKeys":["PERCENT_RANK","PERCENT_RANK","org.ktorm.expression.WindowFunctionType.PERCENT_RANK"]},{"name":"PLUS","description":"org.ktorm.expression.BinaryExpressionType.PLUS","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-p-l-u-s/index.html","searchKeys":["PLUS","PLUS","org.ktorm.expression.BinaryExpressionType.PLUS"]},{"name":"PRECEDING","description":"org.ktorm.expression.WindowFrameBoundType.PRECEDING","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/-p-r-e-c-e-d-i-n-g/index.html","searchKeys":["PRECEDING","PRECEDING","org.ktorm.expression.WindowFrameBoundType.PRECEDING"]},{"name":"RANGE","description":"org.ktorm.expression.WindowFrameUnitType.RANGE","location":"ktorm-core/org.ktorm.expression/-window-frame-unit-type/-r-a-n-g-e/index.html","searchKeys":["RANGE","RANGE","org.ktorm.expression.WindowFrameUnitType.RANGE"]},{"name":"RANK","description":"org.ktorm.expression.WindowFunctionType.RANK","location":"ktorm-core/org.ktorm.expression/-window-function-type/-r-a-n-k/index.html","searchKeys":["RANK","RANK","org.ktorm.expression.WindowFunctionType.RANK"]},{"name":"READ_COMMITTED","description":"org.ktorm.database.TransactionIsolation.READ_COMMITTED","location":"ktorm-core/org.ktorm.database/-transaction-isolation/-r-e-a-d_-c-o-m-m-i-t-t-e-d/index.html","searchKeys":["READ_COMMITTED","READ_COMMITTED","org.ktorm.database.TransactionIsolation.READ_COMMITTED"]},{"name":"READ_UNCOMMITTED","description":"org.ktorm.database.TransactionIsolation.READ_UNCOMMITTED","location":"ktorm-core/org.ktorm.database/-transaction-isolation/-r-e-a-d_-u-n-c-o-m-m-i-t-t-e-d/index.html","searchKeys":["READ_UNCOMMITTED","READ_UNCOMMITTED","org.ktorm.database.TransactionIsolation.READ_UNCOMMITTED"]},{"name":"REM","description":"org.ktorm.expression.BinaryExpressionType.REM","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-r-e-m/index.html","searchKeys":["REM","REM","org.ktorm.expression.BinaryExpressionType.REM"]},{"name":"REPEATABLE_READ","description":"org.ktorm.database.TransactionIsolation.REPEATABLE_READ","location":"ktorm-core/org.ktorm.database/-transaction-isolation/-r-e-p-e-a-t-a-b-l-e_-r-e-a-d/index.html","searchKeys":["REPEATABLE_READ","REPEATABLE_READ","org.ktorm.database.TransactionIsolation.REPEATABLE_READ"]},{"name":"RIGHT_JOIN","description":"org.ktorm.expression.JoinType.RIGHT_JOIN","location":"ktorm-core/org.ktorm.expression/-join-type/-r-i-g-h-t_-j-o-i-n/index.html","searchKeys":["RIGHT_JOIN","RIGHT_JOIN","org.ktorm.expression.JoinType.RIGHT_JOIN"]},{"name":"ROWS","description":"org.ktorm.expression.WindowFrameUnitType.ROWS","location":"ktorm-core/org.ktorm.expression/-window-frame-unit-type/-r-o-w-s/index.html","searchKeys":["ROWS","ROWS","org.ktorm.expression.WindowFrameUnitType.ROWS"]},{"name":"ROW_NUMBER","description":"org.ktorm.expression.WindowFunctionType.ROW_NUMBER","location":"ktorm-core/org.ktorm.expression/-window-function-type/-r-o-w_-n-u-m-b-e-r/index.html","searchKeys":["ROW_NUMBER","ROW_NUMBER","org.ktorm.expression.WindowFunctionType.ROW_NUMBER"]},{"name":"SERIALIZABLE","description":"org.ktorm.database.TransactionIsolation.SERIALIZABLE","location":"ktorm-core/org.ktorm.database/-transaction-isolation/-s-e-r-i-a-l-i-z-a-b-l-e/index.html","searchKeys":["SERIALIZABLE","SERIALIZABLE","org.ktorm.database.TransactionIsolation.SERIALIZABLE"]},{"name":"SUM","description":"org.ktorm.expression.AggregateType.SUM","location":"ktorm-core/org.ktorm.expression/-aggregate-type/-s-u-m/index.html","searchKeys":["SUM","SUM","org.ktorm.expression.AggregateType.SUM"]},{"name":"SUM","description":"org.ktorm.expression.WindowFunctionType.SUM","location":"ktorm-core/org.ktorm.expression/-window-function-type/-s-u-m/index.html","searchKeys":["SUM","SUM","org.ktorm.expression.WindowFunctionType.SUM"]},{"name":"TIMES","description":"org.ktorm.expression.BinaryExpressionType.TIMES","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-t-i-m-e-s/index.html","searchKeys":["TIMES","TIMES","org.ktorm.expression.BinaryExpressionType.TIMES"]},{"name":"TRACE","description":"org.ktorm.logging.LogLevel.TRACE","location":"ktorm-core/org.ktorm.logging/-log-level/-t-r-a-c-e/index.html","searchKeys":["TRACE","TRACE","org.ktorm.logging.LogLevel.TRACE"]},{"name":"UNARY_MINUS","description":"org.ktorm.expression.UnaryExpressionType.UNARY_MINUS","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/-u-n-a-r-y_-m-i-n-u-s/index.html","searchKeys":["UNARY_MINUS","UNARY_MINUS","org.ktorm.expression.UnaryExpressionType.UNARY_MINUS"]},{"name":"UNARY_PLUS","description":"org.ktorm.expression.UnaryExpressionType.UNARY_PLUS","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/-u-n-a-r-y_-p-l-u-s/index.html","searchKeys":["UNARY_PLUS","UNARY_PLUS","org.ktorm.expression.UnaryExpressionType.UNARY_PLUS"]},{"name":"UNBOUNDED_FOLLOWING","description":"org.ktorm.expression.WindowFrameBoundType.UNBOUNDED_FOLLOWING","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/-u-n-b-o-u-n-d-e-d_-f-o-l-l-o-w-i-n-g/index.html","searchKeys":["UNBOUNDED_FOLLOWING","UNBOUNDED_FOLLOWING","org.ktorm.expression.WindowFrameBoundType.UNBOUNDED_FOLLOWING"]},{"name":"UNBOUNDED_PRECEDING","description":"org.ktorm.expression.WindowFrameBoundType.UNBOUNDED_PRECEDING","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/-u-n-b-o-u-n-d-e-d_-p-r-e-c-e-d-i-n-g/index.html","searchKeys":["UNBOUNDED_PRECEDING","UNBOUNDED_PRECEDING","org.ktorm.expression.WindowFrameBoundType.UNBOUNDED_PRECEDING"]},{"name":"WARN","description":"org.ktorm.logging.LogLevel.WARN","location":"ktorm-core/org.ktorm.logging/-log-level/-w-a-r-n/index.html","searchKeys":["WARN","WARN","org.ktorm.logging.LogLevel.WARN"]},{"name":"XOR","description":"org.ktorm.expression.BinaryExpressionType.XOR","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/-x-o-r/index.html","searchKeys":["XOR","XOR","org.ktorm.expression.BinaryExpressionType.XOR"]},{"name":"abstract class BaseTable<E : Any>(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null) : TypeReference<E> ","description":"org.ktorm.schema.BaseTable","location":"ktorm-core/org.ktorm.schema/-base-table/index.html","searchKeys":["BaseTable","abstract class BaseTable<E : Any>(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null) : TypeReference<E> ","org.ktorm.schema.BaseTable"]},{"name":"abstract class Factory<E : Entity<E>> : TypeReference<E> ","description":"org.ktorm.entity.Entity.Factory","location":"ktorm-core/org.ktorm.entity/-entity/-factory/index.html","searchKeys":["Factory","abstract class Factory<E : Entity<E>> : TypeReference<E> ","org.ktorm.entity.Entity.Factory"]},{"name":"abstract class QuerySourceExpression : SqlExpression","description":"org.ktorm.expression.QuerySourceExpression","location":"ktorm-core/org.ktorm.expression/-query-source-expression/index.html","searchKeys":["QuerySourceExpression","abstract class QuerySourceExpression : SqlExpression","org.ktorm.expression.QuerySourceExpression"]},{"name":"abstract class ScalarExpression<T : Any> : SqlExpression, ColumnDeclaring<T> ","description":"org.ktorm.expression.ScalarExpression","location":"ktorm-core/org.ktorm.expression/-scalar-expression/index.html","searchKeys":["ScalarExpression","abstract class ScalarExpression<T : Any> : SqlExpression, ColumnDeclaring<T> ","org.ktorm.expression.ScalarExpression"]},{"name":"abstract class SqlExpression","description":"org.ktorm.expression.SqlExpression","location":"ktorm-core/org.ktorm.expression/-sql-expression/index.html","searchKeys":["SqlExpression","abstract class SqlExpression","org.ktorm.expression.SqlExpression"]},{"name":"abstract class SqlFormatter(val database: Database, val beautifySql: Boolean, val indentSize: Int) : SqlExpressionVisitor","description":"org.ktorm.expression.SqlFormatter","location":"ktorm-core/org.ktorm.expression/-sql-formatter/index.html","searchKeys":["SqlFormatter","abstract class SqlFormatter(val database: Database, val beautifySql: Boolean, val indentSize: Int) : SqlExpressionVisitor","org.ktorm.expression.SqlFormatter"]},{"name":"abstract class SqlType<T : Any>(val typeCode: Int, val typeName: String)","description":"org.ktorm.schema.SqlType","location":"ktorm-core/org.ktorm.schema/-sql-type/index.html","searchKeys":["SqlType","abstract class SqlType<T : Any>(val typeCode: Int, val typeName: String)","org.ktorm.schema.SqlType"]},{"name":"abstract class TypeReference<T>","description":"org.ktorm.schema.TypeReference","location":"ktorm-core/org.ktorm.schema/-type-reference/index.html","searchKeys":["TypeReference","abstract class TypeReference<T>","org.ktorm.schema.TypeReference"]},{"name":"abstract fun aliased(label: String?): ColumnDeclaringExpression<T>","description":"org.ktorm.schema.ColumnDeclaring.aliased","location":"ktorm-core/org.ktorm.schema/-column-declaring/aliased.html","searchKeys":["aliased","abstract fun aliased(label: String?): ColumnDeclaringExpression<T>","org.ktorm.schema.ColumnDeclaring.aliased"]},{"name":"abstract fun asExpression(): ScalarExpression<T>","description":"org.ktorm.schema.ColumnDeclaring.asExpression","location":"ktorm-core/org.ktorm.schema/-column-declaring/as-expression.html","searchKeys":["asExpression","abstract fun asExpression(): ScalarExpression<T>","org.ktorm.schema.ColumnDeclaring.asExpression"]},{"name":"abstract fun commit()","description":"org.ktorm.database.Transaction.commit","location":"ktorm-core/org.ktorm.database/-transaction/commit.html","searchKeys":["commit","abstract fun commit()","org.ktorm.database.Transaction.commit"]},{"name":"abstract fun copy(): E","description":"org.ktorm.entity.Entity.copy","location":"ktorm-core/org.ktorm.entity/-entity/copy.html","searchKeys":["copy","abstract fun copy(): E","org.ktorm.entity.Entity.copy"]},{"name":"abstract fun debug(msg: String, e: Throwable? = null)","description":"org.ktorm.logging.Logger.debug","location":"ktorm-core/org.ktorm.logging/-logger/debug.html","searchKeys":["debug","abstract fun debug(msg: String, e: Throwable? = null)","org.ktorm.logging.Logger.debug"]},{"name":"abstract fun delete(): Int","description":"org.ktorm.entity.Entity.delete","location":"ktorm-core/org.ktorm.entity/-entity/delete.html","searchKeys":["delete","abstract fun delete(): Int","org.ktorm.entity.Entity.delete"]},{"name":"abstract fun discardChanges()","description":"org.ktorm.entity.Entity.discardChanges","location":"ktorm-core/org.ktorm.entity/-entity/discard-changes.html","searchKeys":["discardChanges","abstract fun discardChanges()","org.ktorm.entity.Entity.discardChanges"]},{"name":"abstract fun error(msg: String, e: Throwable? = null)","description":"org.ktorm.logging.Logger.error","location":"ktorm-core/org.ktorm.logging/-logger/error.html","searchKeys":["error","abstract fun error(msg: String, e: Throwable? = null)","org.ktorm.logging.Logger.error"]},{"name":"abstract fun flushChanges(): Int","description":"org.ktorm.entity.Entity.flushChanges","location":"ktorm-core/org.ktorm.entity/-entity/flush-changes.html","searchKeys":["flushChanges","abstract fun flushChanges(): Int","org.ktorm.entity.Entity.flushChanges"]},{"name":"abstract fun info(msg: String, e: Throwable? = null)","description":"org.ktorm.logging.Logger.info","location":"ktorm-core/org.ktorm.logging/-logger/info.html","searchKeys":["info","abstract fun info(msg: String, e: Throwable? = null)","org.ktorm.logging.Logger.info"]},{"name":"abstract fun intercept(expr: SqlExpression, visitor: SqlExpressionVisitor): SqlExpression?","description":"org.ktorm.expression.SqlExpressionVisitorInterceptor.intercept","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor-interceptor/intercept.html","searchKeys":["intercept","abstract fun intercept(expr: SqlExpression, visitor: SqlExpressionVisitor): SqlExpression?","org.ktorm.expression.SqlExpressionVisitorInterceptor.intercept"]},{"name":"abstract fun isDebugEnabled(): Boolean","description":"org.ktorm.logging.Logger.isDebugEnabled","location":"ktorm-core/org.ktorm.logging/-logger/is-debug-enabled.html","searchKeys":["isDebugEnabled","abstract fun isDebugEnabled(): Boolean","org.ktorm.logging.Logger.isDebugEnabled"]},{"name":"abstract fun isErrorEnabled(): Boolean","description":"org.ktorm.logging.Logger.isErrorEnabled","location":"ktorm-core/org.ktorm.logging/-logger/is-error-enabled.html","searchKeys":["isErrorEnabled","abstract fun isErrorEnabled(): Boolean","org.ktorm.logging.Logger.isErrorEnabled"]},{"name":"abstract fun isInfoEnabled(): Boolean","description":"org.ktorm.logging.Logger.isInfoEnabled","location":"ktorm-core/org.ktorm.logging/-logger/is-info-enabled.html","searchKeys":["isInfoEnabled","abstract fun isInfoEnabled(): Boolean","org.ktorm.logging.Logger.isInfoEnabled"]},{"name":"abstract fun isTraceEnabled(): Boolean","description":"org.ktorm.logging.Logger.isTraceEnabled","location":"ktorm-core/org.ktorm.logging/-logger/is-trace-enabled.html","searchKeys":["isTraceEnabled","abstract fun isTraceEnabled(): Boolean","org.ktorm.logging.Logger.isTraceEnabled"]},{"name":"abstract fun isWarnEnabled(): Boolean","description":"org.ktorm.logging.Logger.isWarnEnabled","location":"ktorm-core/org.ktorm.logging/-logger/is-warn-enabled.html","searchKeys":["isWarnEnabled","abstract fun isWarnEnabled(): Boolean","org.ktorm.logging.Logger.isWarnEnabled"]},{"name":"abstract fun newConnection(): Connection","description":"org.ktorm.database.TransactionManager.newConnection","location":"ktorm-core/org.ktorm.database/-transaction-manager/new-connection.html","searchKeys":["newConnection","abstract fun newConnection(): Connection","org.ktorm.database.TransactionManager.newConnection"]},{"name":"abstract fun newTransaction(isolation: TransactionIsolation? = defaultIsolation): Transaction","description":"org.ktorm.database.TransactionManager.newTransaction","location":"ktorm-core/org.ktorm.database/-transaction-manager/new-transaction.html","searchKeys":["newTransaction","abstract fun newTransaction(isolation: TransactionIsolation? = defaultIsolation): Transaction","org.ktorm.database.TransactionManager.newTransaction"]},{"name":"abstract fun rollback()","description":"org.ktorm.database.Transaction.rollback","location":"ktorm-core/org.ktorm.database/-transaction/rollback.html","searchKeys":["rollback","abstract fun rollback()","org.ktorm.database.Transaction.rollback"]},{"name":"abstract fun trace(msg: String, e: Throwable? = null)","description":"org.ktorm.logging.Logger.trace","location":"ktorm-core/org.ktorm.logging/-logger/trace.html","searchKeys":["trace","abstract fun trace(msg: String, e: Throwable? = null)","org.ktorm.logging.Logger.trace"]},{"name":"abstract fun warn(msg: String, e: Throwable? = null)","description":"org.ktorm.logging.Logger.warn","location":"ktorm-core/org.ktorm.logging/-logger/warn.html","searchKeys":["warn","abstract fun warn(msg: String, e: Throwable? = null)","org.ktorm.logging.Logger.warn"]},{"name":"abstract fun wrapArgument(argument: T?): ArgumentExpression<T>","description":"org.ktorm.schema.ColumnDeclaring.wrapArgument","location":"ktorm-core/org.ktorm.schema/-column-declaring/wrap-argument.html","searchKeys":["wrapArgument","abstract fun wrapArgument(argument: T?): ArgumentExpression<T>","org.ktorm.schema.ColumnDeclaring.wrapArgument"]},{"name":"abstract operator fun get(name: String): Any?","description":"org.ktorm.entity.Entity.get","location":"ktorm-core/org.ktorm.entity/-entity/get.html","searchKeys":["get","abstract operator fun get(name: String): Any?","org.ktorm.entity.Entity.get"]},{"name":"abstract operator fun set(name: String, value: Any?)","description":"org.ktorm.entity.Entity.set","location":"ktorm-core/org.ktorm.entity/-entity/set.html","searchKeys":["set","abstract operator fun set(name: String, value: Any?)","org.ktorm.entity.Entity.set"]},{"name":"abstract operator override fun equals(other: Any?): Boolean","description":"org.ktorm.entity.Entity.equals","location":"ktorm-core/org.ktorm.entity/-entity/equals.html","searchKeys":["equals","abstract operator override fun equals(other: Any?): Boolean","org.ktorm.entity.Entity.equals"]},{"name":"abstract override fun close()","description":"org.ktorm.database.Transaction.close","location":"ktorm-core/org.ktorm.database/-transaction/close.html","searchKeys":["close","abstract override fun close()","org.ktorm.database.Transaction.close"]},{"name":"abstract override fun hashCode(): Int","description":"org.ktorm.entity.Entity.hashCode","location":"ktorm-core/org.ktorm.entity/-entity/hash-code.html","searchKeys":["hashCode","abstract override fun hashCode(): Int","org.ktorm.entity.Entity.hashCode"]},{"name":"abstract override fun toString(): String","description":"org.ktorm.entity.Entity.toString","location":"ktorm-core/org.ktorm.entity/-entity/to-string.html","searchKeys":["toString","abstract override fun toString(): String","org.ktorm.entity.Entity.toString"]},{"name":"abstract override val sqlType: SqlType<T>","description":"org.ktorm.expression.ScalarExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-scalar-expression/sql-type.html","searchKeys":["sqlType","abstract override val sqlType: SqlType<T>","org.ktorm.expression.ScalarExpression.sqlType"]},{"name":"abstract val changedProperties: Map<String, Any?>","description":"org.ktorm.entity.Entity.changedProperties","location":"ktorm-core/org.ktorm.entity/-entity/changed-properties.html","searchKeys":["changedProperties","abstract val changedProperties: Map<String, Any?>","org.ktorm.entity.Entity.changedProperties"]},{"name":"abstract val connection: Connection","description":"org.ktorm.database.Transaction.connection","location":"ktorm-core/org.ktorm.database/-transaction/connection.html","searchKeys":["connection","abstract val connection: Connection","org.ktorm.database.Transaction.connection"]},{"name":"abstract val currentTransaction: Transaction?","description":"org.ktorm.database.TransactionManager.currentTransaction","location":"ktorm-core/org.ktorm.database/-transaction-manager/current-transaction.html","searchKeys":["currentTransaction","abstract val currentTransaction: Transaction?","org.ktorm.database.TransactionManager.currentTransaction"]},{"name":"abstract val defaultIsolation: TransactionIsolation?","description":"org.ktorm.database.TransactionManager.defaultIsolation","location":"ktorm-core/org.ktorm.database/-transaction-manager/default-isolation.html","searchKeys":["defaultIsolation","abstract val defaultIsolation: TransactionIsolation?","org.ktorm.database.TransactionManager.defaultIsolation"]},{"name":"abstract val entityClass: KClass<E>","description":"org.ktorm.entity.Entity.entityClass","location":"ktorm-core/org.ktorm.entity/-entity/entity-class.html","searchKeys":["entityClass","abstract val entityClass: KClass<E>","org.ktorm.entity.Entity.entityClass"]},{"name":"abstract val extraProperties: Map<String, Any>","description":"org.ktorm.expression.SqlExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-sql-expression/extra-properties.html","searchKeys":["extraProperties","abstract val extraProperties: Map<String, Any>","org.ktorm.expression.SqlExpression.extraProperties"]},{"name":"abstract val isLeafNode: Boolean","description":"org.ktorm.expression.SqlExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-sql-expression/is-leaf-node.html","searchKeys":["isLeafNode","abstract val isLeafNode: Boolean","org.ktorm.expression.SqlExpression.isLeafNode"]},{"name":"abstract val limit: Int?","description":"org.ktorm.expression.QueryExpression.limit","location":"ktorm-core/org.ktorm.expression/-query-expression/limit.html","searchKeys":["limit","abstract val limit: Int?","org.ktorm.expression.QueryExpression.limit"]},{"name":"abstract val offset: Int?","description":"org.ktorm.expression.QueryExpression.offset","location":"ktorm-core/org.ktorm.expression/-query-expression/offset.html","searchKeys":["offset","abstract val offset: Int?","org.ktorm.expression.QueryExpression.offset"]},{"name":"abstract val orderBy: List<OrderByExpression>","description":"org.ktorm.expression.QueryExpression.orderBy","location":"ktorm-core/org.ktorm.expression/-query-expression/order-by.html","searchKeys":["orderBy","abstract val orderBy: List<OrderByExpression>","org.ktorm.expression.QueryExpression.orderBy"]},{"name":"abstract val properties: Map<String, Any?>","description":"org.ktorm.entity.Entity.properties","location":"ktorm-core/org.ktorm.entity/-entity/properties.html","searchKeys":["properties","abstract val properties: Map<String, Any?>","org.ktorm.entity.Entity.properties"]},{"name":"abstract val sqlType: SqlType<T>","description":"org.ktorm.schema.ColumnDeclaring.sqlType","location":"ktorm-core/org.ktorm.schema/-column-declaring/sql-type.html","searchKeys":["sqlType","abstract val sqlType: SqlType<T>","org.ktorm.schema.ColumnDeclaring.sqlType"]},{"name":"abstract val tableAlias: String?","description":"org.ktorm.expression.QueryExpression.tableAlias","location":"ktorm-core/org.ktorm.expression/-query-expression/table-alias.html","searchKeys":["tableAlias","abstract val tableAlias: String?","org.ktorm.expression.QueryExpression.tableAlias"]},{"name":"annotation class KtormDsl","description":"org.ktorm.dsl.KtormDsl","location":"ktorm-core/org.ktorm.dsl/-ktorm-dsl/index.html","searchKeys":["KtormDsl","annotation class KtormDsl","org.ktorm.dsl.KtormDsl"]},{"name":"class AndroidLoggerAdapter(tag: String) : Logger","description":"org.ktorm.logging.AndroidLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/index.html","searchKeys":["AndroidLoggerAdapter","class AndroidLoggerAdapter(tag: String) : Logger","org.ktorm.logging.AndroidLoggerAdapter"]},{"name":"class BatchInsertStatementBuilder<T : BaseTable<*>>(table: T)","description":"org.ktorm.dsl.BatchInsertStatementBuilder","location":"ktorm-core/org.ktorm.dsl/-batch-insert-statement-builder/index.html","searchKeys":["BatchInsertStatementBuilder","class BatchInsertStatementBuilder<T : BaseTable<*>>(table: T)","org.ktorm.dsl.BatchInsertStatementBuilder"]},{"name":"class BatchUpdateStatementBuilder<T : BaseTable<*>>(table: T)","description":"org.ktorm.dsl.BatchUpdateStatementBuilder","location":"ktorm-core/org.ktorm.dsl/-batch-update-statement-builder/index.html","searchKeys":["BatchUpdateStatementBuilder","class BatchUpdateStatementBuilder<T : BaseTable<*>>(table: T)","org.ktorm.dsl.BatchUpdateStatementBuilder"]},{"name":"class CommonsLoggerAdapter(loggerName: String) : Logger","description":"org.ktorm.logging.CommonsLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/index.html","searchKeys":["CommonsLoggerAdapter","class CommonsLoggerAdapter(loggerName: String) : Logger","org.ktorm.logging.CommonsLoggerAdapter"]},{"name":"class ConsoleLogger(val threshold: LogLevel) : Logger","description":"org.ktorm.logging.ConsoleLogger","location":"ktorm-core/org.ktorm.logging/-console-logger/index.html","searchKeys":["ConsoleLogger","class ConsoleLogger(val threshold: LogLevel) : Logger","org.ktorm.logging.ConsoleLogger"]},{"name":"class Database(val transactionManager: TransactionManager, val dialect: SqlDialect = detectDialectImplementation(), val logger: Logger = detectLoggerImplementation(), val exceptionTranslator: (SQLException) -> Throwable? = null, val alwaysQuoteIdentifiers: Boolean = false, val generateSqlInUpperCase: Boolean? = null)","description":"org.ktorm.database.Database","location":"ktorm-core/org.ktorm.database/-database/index.html","searchKeys":["Database","class Database(val transactionManager: TransactionManager, val dialect: SqlDialect = detectDialectImplementation(), val logger: Logger = detectLoggerImplementation(), val exceptionTranslator: (SQLException) -> Throwable? = null, val alwaysQuoteIdentifiers: Boolean = false, val generateSqlInUpperCase: Boolean? = null)","org.ktorm.database.Database"]},{"name":"class DialectFeatureNotSupportedException(message: String? = null, cause: Throwable? = null) : UnsupportedOperationException","description":"org.ktorm.database.DialectFeatureNotSupportedException","location":"ktorm-core/org.ktorm.database/-dialect-feature-not-supported-exception/index.html","searchKeys":["DialectFeatureNotSupportedException","class DialectFeatureNotSupportedException(message: String? = null, cause: Throwable? = null) : UnsupportedOperationException","org.ktorm.database.DialectFeatureNotSupportedException"]},{"name":"class EntityExtensionsApi","description":"org.ktorm.entity.EntityExtensionsApi","location":"ktorm-core/org.ktorm.entity/-entity-extensions-api/index.html","searchKeys":["EntityExtensionsApi","class EntityExtensionsApi","org.ktorm.entity.EntityExtensionsApi"]},{"name":"class EntityGrouping<E : Any, T : BaseTable<E>, K : Any>(val sequence: EntitySequence<E, T>, val keySelector: (T) -> ColumnDeclaring<K>)","description":"org.ktorm.entity.EntityGrouping","location":"ktorm-core/org.ktorm.entity/-entity-grouping/index.html","searchKeys":["EntityGrouping","class EntityGrouping<E : Any, T : BaseTable<E>, K : Any>(val sequence: EntitySequence<E, T>, val keySelector: (T) -> ColumnDeclaring<K>)","org.ktorm.entity.EntityGrouping"]},{"name":"class EntitySequence<E : Any, T : BaseTable<E>>(val database: Database, val sourceTable: T, val expression: SelectExpression, val entityExtractor: (row: QueryRowSet) -> E)","description":"org.ktorm.entity.EntitySequence","location":"ktorm-core/org.ktorm.entity/-entity-sequence/index.html","searchKeys":["EntitySequence","class EntitySequence<E : Any, T : BaseTable<E>>(val database: Database, val sourceTable: T, val expression: SelectExpression, val entityExtractor: (row: QueryRowSet) -> E)","org.ktorm.entity.EntitySequence"]},{"name":"class EnumSqlType<C : Enum<C>>(val enumClass: Class<C>) : SqlType<C> ","description":"org.ktorm.schema.EnumSqlType","location":"ktorm-core/org.ktorm.schema/-enum-sql-type/index.html","searchKeys":["EnumSqlType","class EnumSqlType<C : Enum<C>>(val enumClass: Class<C>) : SqlType<C> ","org.ktorm.schema.EnumSqlType"]},{"name":"class JdbcTransactionManager(val connector: () -> Connection) : TransactionManager","description":"org.ktorm.database.JdbcTransactionManager","location":"ktorm-core/org.ktorm.database/-jdbc-transaction-manager/index.html","searchKeys":["JdbcTransactionManager","class JdbcTransactionManager(val connector: () -> Connection) : TransactionManager","org.ktorm.database.JdbcTransactionManager"]},{"name":"class JdkLoggerAdapter(loggerName: String) : Logger","description":"org.ktorm.logging.JdkLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/index.html","searchKeys":["JdkLoggerAdapter","class JdkLoggerAdapter(loggerName: String) : Logger","org.ktorm.logging.JdkLoggerAdapter"]},{"name":"class Query(val database: Database, val expression: QueryExpression)","description":"org.ktorm.dsl.Query","location":"ktorm-core/org.ktorm.dsl/-query/index.html","searchKeys":["Query","class Query(val database: Database, val expression: QueryExpression)","org.ktorm.dsl.Query"]},{"name":"class QueryRowSet : CachedRowSet","description":"org.ktorm.dsl.QueryRowSet","location":"ktorm-core/org.ktorm.dsl/-query-row-set/index.html","searchKeys":["QueryRowSet","class QueryRowSet : CachedRowSet","org.ktorm.dsl.QueryRowSet"]},{"name":"class Slf4jLoggerAdapter(loggerName: String) : Logger","description":"org.ktorm.logging.Slf4jLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/index.html","searchKeys":["Slf4jLoggerAdapter","class Slf4jLoggerAdapter(loggerName: String) : Logger","org.ktorm.logging.Slf4jLoggerAdapter"]},{"name":"class SpringManagedTransactionManager(val dataSource: DataSource) : TransactionManager","description":"org.ktorm.database.SpringManagedTransactionManager","location":"ktorm-core/org.ktorm.database/-spring-managed-transaction-manager/index.html","searchKeys":["SpringManagedTransactionManager","class SpringManagedTransactionManager(val dataSource: DataSource) : TransactionManager","org.ktorm.database.SpringManagedTransactionManager"]},{"name":"class UpdateStatementBuilder : AssignmentsBuilder","description":"org.ktorm.dsl.UpdateStatementBuilder","location":"ktorm-core/org.ktorm.dsl/-update-statement-builder/index.html","searchKeys":["UpdateStatementBuilder","class UpdateStatementBuilder : AssignmentsBuilder","org.ktorm.dsl.UpdateStatementBuilder"]},{"name":"constructor()","description":"org.ktorm.dsl.AssignmentsBuilder.AssignmentsBuilder","location":"ktorm-core/org.ktorm.dsl/-assignments-builder/-assignments-builder.html","searchKeys":["AssignmentsBuilder","constructor()","org.ktorm.dsl.AssignmentsBuilder.AssignmentsBuilder"]},{"name":"constructor()","description":"org.ktorm.dsl.UpdateStatementBuilder.UpdateStatementBuilder","location":"ktorm-core/org.ktorm.dsl/-update-statement-builder/-update-statement-builder.html","searchKeys":["UpdateStatementBuilder","constructor()","org.ktorm.dsl.UpdateStatementBuilder.UpdateStatementBuilder"]},{"name":"constructor()","description":"org.ktorm.entity.Entity.Factory.Factory","location":"ktorm-core/org.ktorm.entity/-entity/-factory/-factory.html","searchKeys":["Factory","constructor()","org.ktorm.entity.Entity.Factory.Factory"]},{"name":"constructor()","description":"org.ktorm.entity.EntityExtensionsApi.EntityExtensionsApi","location":"ktorm-core/org.ktorm.entity/-entity-extensions-api/-entity-extensions-api.html","searchKeys":["EntityExtensionsApi","constructor()","org.ktorm.entity.EntityExtensionsApi.EntityExtensionsApi"]},{"name":"constructor()","description":"org.ktorm.expression.QuerySourceExpression.QuerySourceExpression","location":"ktorm-core/org.ktorm.expression/-query-source-expression/-query-source-expression.html","searchKeys":["QuerySourceExpression","constructor()","org.ktorm.expression.QuerySourceExpression.QuerySourceExpression"]},{"name":"constructor()","description":"org.ktorm.expression.ScalarExpression.ScalarExpression","location":"ktorm-core/org.ktorm.expression/-scalar-expression/-scalar-expression.html","searchKeys":["ScalarExpression","constructor()","org.ktorm.expression.ScalarExpression.ScalarExpression"]},{"name":"constructor()","description":"org.ktorm.expression.SqlExpression.SqlExpression","location":"ktorm-core/org.ktorm.expression/-sql-expression/-sql-expression.html","searchKeys":["SqlExpression","constructor()","org.ktorm.expression.SqlExpression.SqlExpression"]},{"name":"constructor()","description":"org.ktorm.schema.TypeReference.TypeReference","location":"ktorm-core/org.ktorm.schema/-type-reference/-type-reference.html","searchKeys":["TypeReference","constructor()","org.ktorm.schema.TypeReference.TypeReference"]},{"name":"constructor(column: ColumnExpression<T>, expression: ScalarExpression<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.ColumnAssignmentExpression.ColumnAssignmentExpression","location":"ktorm-core/org.ktorm.expression/-column-assignment-expression/-column-assignment-expression.html","searchKeys":["ColumnAssignmentExpression","constructor(column: ColumnExpression<T>, expression: ScalarExpression<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.ColumnAssignmentExpression.ColumnAssignmentExpression"]},{"name":"constructor(columns: List<ColumnDeclaringExpression<*>> = emptyList(), from: QuerySourceExpression, where: ScalarExpression<Boolean>? = null, groupBy: List<ScalarExpression<*>> = emptyList(), having: ScalarExpression<Boolean>? = null, isDistinct: Boolean = false, orderBy: List<OrderByExpression> = emptyList(), offset: Int? = null, limit: Int? = null, tableAlias: String? = null, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.SelectExpression.SelectExpression","location":"ktorm-core/org.ktorm.expression/-select-expression/-select-expression.html","searchKeys":["SelectExpression","constructor(columns: List<ColumnDeclaringExpression<*>> = emptyList(), from: QuerySourceExpression, where: ScalarExpression<Boolean>? = null, groupBy: List<ScalarExpression<*>> = emptyList(), having: ScalarExpression<Boolean>? = null, isDistinct: Boolean = false, orderBy: List<OrderByExpression> = emptyList(), offset: Int? = null, limit: Int? = null, tableAlias: String? = null, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.SelectExpression.SelectExpression"]},{"name":"constructor(connector: () -> Connection)","description":"org.ktorm.database.JdbcTransactionManager.JdbcTransactionManager","location":"ktorm-core/org.ktorm.database/-jdbc-transaction-manager/-jdbc-transaction-manager.html","searchKeys":["JdbcTransactionManager","constructor(connector: () -> Connection)","org.ktorm.database.JdbcTransactionManager.JdbcTransactionManager"]},{"name":"constructor(dataSource: DataSource)","description":"org.ktorm.database.SpringManagedTransactionManager.SpringManagedTransactionManager","location":"ktorm-core/org.ktorm.database/-spring-managed-transaction-manager/-spring-managed-transaction-manager.html","searchKeys":["SpringManagedTransactionManager","constructor(dataSource: DataSource)","org.ktorm.database.SpringManagedTransactionManager.SpringManagedTransactionManager"]},{"name":"constructor(database: Database, beautifySql: Boolean, indentSize: Int)","description":"org.ktorm.expression.SqlFormatter.SqlFormatter","location":"ktorm-core/org.ktorm.expression/-sql-formatter/-sql-formatter.html","searchKeys":["SqlFormatter","constructor(database: Database, beautifySql: Boolean, indentSize: Int)","org.ktorm.expression.SqlFormatter.SqlFormatter"]},{"name":"constructor(database: Database, expression: QueryExpression)","description":"org.ktorm.dsl.Query.Query","location":"ktorm-core/org.ktorm.dsl/-query/-query.html","searchKeys":["Query","constructor(database: Database, expression: QueryExpression)","org.ktorm.dsl.Query.Query"]},{"name":"constructor(database: Database, sourceTable: BaseTable<*>, expression: QuerySourceExpression)","description":"org.ktorm.dsl.QuerySource.QuerySource","location":"ktorm-core/org.ktorm.dsl/-query-source/-query-source.html","searchKeys":["QuerySource","constructor(database: Database, sourceTable: BaseTable<*>, expression: QuerySourceExpression)","org.ktorm.dsl.QuerySource.QuerySource"]},{"name":"constructor(database: Database, sourceTable: T, expression: SelectExpression, entityExtractor: (row: QueryRowSet) -> E)","description":"org.ktorm.entity.EntitySequence.EntitySequence","location":"ktorm-core/org.ktorm.entity/-entity-sequence/-entity-sequence.html","searchKeys":["EntitySequence","constructor(database: Database, sourceTable: T, expression: SelectExpression, entityExtractor: (row: QueryRowSet) -> E)","org.ktorm.entity.EntitySequence.EntitySequence"]},{"name":"constructor(element1: E1, element2: E2, element3: E3, element4: E4)","description":"org.ktorm.entity.Tuple4.Tuple4","location":"ktorm-core/org.ktorm.entity/-tuple4/-tuple4.html","searchKeys":["Tuple4","constructor(element1: E1, element2: E2, element3: E3, element4: E4)","org.ktorm.entity.Tuple4.Tuple4"]},{"name":"constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5)","description":"org.ktorm.entity.Tuple5.Tuple5","location":"ktorm-core/org.ktorm.entity/-tuple5/-tuple5.html","searchKeys":["Tuple5","constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5)","org.ktorm.entity.Tuple5.Tuple5"]},{"name":"constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6)","description":"org.ktorm.entity.Tuple6.Tuple6","location":"ktorm-core/org.ktorm.entity/-tuple6/-tuple6.html","searchKeys":["Tuple6","constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6)","org.ktorm.entity.Tuple6.Tuple6"]},{"name":"constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7)","description":"org.ktorm.entity.Tuple7.Tuple7","location":"ktorm-core/org.ktorm.entity/-tuple7/-tuple7.html","searchKeys":["Tuple7","constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7)","org.ktorm.entity.Tuple7.Tuple7"]},{"name":"constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8)","description":"org.ktorm.entity.Tuple8.Tuple8","location":"ktorm-core/org.ktorm.entity/-tuple8/-tuple8.html","searchKeys":["Tuple8","constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8)","org.ktorm.entity.Tuple8.Tuple8"]},{"name":"constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8, element9: E9)","description":"org.ktorm.entity.Tuple9.Tuple9","location":"ktorm-core/org.ktorm.entity/-tuple9/-tuple9.html","searchKeys":["Tuple9","constructor(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8, element9: E9)","org.ktorm.entity.Tuple9.Tuple9"]},{"name":"constructor(enumClass: Class<C>)","description":"org.ktorm.schema.EnumSqlType.EnumSqlType","location":"ktorm-core/org.ktorm.schema/-enum-sql-type/-enum-sql-type.html","searchKeys":["EnumSqlType","constructor(enumClass: Class<C>)","org.ktorm.schema.EnumSqlType.EnumSqlType"]},{"name":"constructor(expression: ScalarExpression<*>, lower: ScalarExpression<*>, upper: ScalarExpression<*>, notBetween: Boolean = false, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.BetweenExpression.BetweenExpression","location":"ktorm-core/org.ktorm.expression/-between-expression/-between-expression.html","searchKeys":["BetweenExpression","constructor(expression: ScalarExpression<*>, lower: ScalarExpression<*>, upper: ScalarExpression<*>, notBetween: Boolean = false, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.BetweenExpression.BetweenExpression"]},{"name":"constructor(expression: ScalarExpression<*>, orderType: OrderType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.OrderByExpression.OrderByExpression","location":"ktorm-core/org.ktorm.expression/-order-by-expression/-order-by-expression.html","searchKeys":["OrderByExpression","constructor(expression: ScalarExpression<*>, orderType: OrderType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.OrderByExpression.OrderByExpression"]},{"name":"constructor(expression: ScalarExpression<T>, declaredName: String? = null, sqlType: SqlType<T> = expression.sqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.ColumnDeclaringExpression.ColumnDeclaringExpression","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/-column-declaring-expression.html","searchKeys":["ColumnDeclaringExpression","constructor(expression: ScalarExpression<T>, declaredName: String? = null, sqlType: SqlType<T> = expression.sqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.ColumnDeclaringExpression.ColumnDeclaringExpression"]},{"name":"constructor(expression: SqlExpression, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.CastingExpression.CastingExpression","location":"ktorm-core/org.ktorm.expression/-casting-expression/-casting-expression.html","searchKeys":["CastingExpression","constructor(expression: SqlExpression, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.CastingExpression.CastingExpression"]},{"name":"constructor(functionName: String, arguments: List<ScalarExpression<*>>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.FunctionExpression.FunctionExpression","location":"ktorm-core/org.ktorm.expression/-function-expression/-function-expression.html","searchKeys":["FunctionExpression","constructor(functionName: String, arguments: List<ScalarExpression<*>>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.FunctionExpression.FunctionExpression"]},{"name":"constructor(left: QueryExpression, right: QueryExpression, isUnionAll: Boolean, orderBy: List<OrderByExpression> = emptyList(), offset: Int? = null, limit: Int? = null, tableAlias: String? = null, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.UnionExpression.UnionExpression","location":"ktorm-core/org.ktorm.expression/-union-expression/-union-expression.html","searchKeys":["UnionExpression","constructor(left: QueryExpression, right: QueryExpression, isUnionAll: Boolean, orderBy: List<OrderByExpression> = emptyList(), offset: Int? = null, limit: Int? = null, tableAlias: String? = null, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.UnionExpression.UnionExpression"]},{"name":"constructor(left: ScalarExpression<*>, query: QueryExpression? = null, values: List<ScalarExpression<*>>? = null, notInList: Boolean = false, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.InListExpression.InListExpression","location":"ktorm-core/org.ktorm.expression/-in-list-expression/-in-list-expression.html","searchKeys":["InListExpression","constructor(left: ScalarExpression<*>, query: QueryExpression? = null, values: List<ScalarExpression<*>>? = null, notInList: Boolean = false, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.InListExpression.InListExpression"]},{"name":"constructor(loggerName: String)","description":"org.ktorm.logging.CommonsLoggerAdapter.CommonsLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/-commons-logger-adapter.html","searchKeys":["CommonsLoggerAdapter","constructor(loggerName: String)","org.ktorm.logging.CommonsLoggerAdapter.CommonsLoggerAdapter"]},{"name":"constructor(loggerName: String)","description":"org.ktorm.logging.JdkLoggerAdapter.JdkLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/-jdk-logger-adapter.html","searchKeys":["JdkLoggerAdapter","constructor(loggerName: String)","org.ktorm.logging.JdkLoggerAdapter.JdkLoggerAdapter"]},{"name":"constructor(loggerName: String)","description":"org.ktorm.logging.Slf4jLoggerAdapter.Slf4jLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/-slf4j-logger-adapter.html","searchKeys":["Slf4jLoggerAdapter","constructor(loggerName: String)","org.ktorm.logging.Slf4jLoggerAdapter.Slf4jLoggerAdapter"]},{"name":"constructor(message: String? = null, cause: Throwable? = null)","description":"org.ktorm.database.DialectFeatureNotSupportedException.DialectFeatureNotSupportedException","location":"ktorm-core/org.ktorm.database/-dialect-feature-not-supported-exception/-dialect-feature-not-supported-exception.html","searchKeys":["DialectFeatureNotSupportedException","constructor(message: String? = null, cause: Throwable? = null)","org.ktorm.database.DialectFeatureNotSupportedException.DialectFeatureNotSupportedException"]},{"name":"constructor(name: String, tableAlias: String? = null, catalog: String? = null, schema: String? = null, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.TableExpression.TableExpression","location":"ktorm-core/org.ktorm.expression/-table-expression/-table-expression.html","searchKeys":["TableExpression","constructor(name: String, tableAlias: String? = null, catalog: String? = null, schema: String? = null, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.TableExpression.TableExpression"]},{"name":"constructor(operand: ColumnDeclaring<T>?, whenClauses: List<Pair<ColumnDeclaring<T>, ColumnDeclaring<R>>> = emptyList(), elseClause: ColumnDeclaring<R>? = null)","description":"org.ktorm.dsl.CaseWhen.CaseWhen","location":"ktorm-core/org.ktorm.dsl/-case-when/-case-when.html","searchKeys":["CaseWhen","constructor(operand: ColumnDeclaring<T>?, whenClauses: List<Pair<ColumnDeclaring<T>, ColumnDeclaring<R>>> = emptyList(), elseClause: ColumnDeclaring<R>? = null)","org.ktorm.dsl.CaseWhen.CaseWhen"]},{"name":"constructor(operand: ScalarExpression<*>?, whenClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>, elseClause: ScalarExpression<T>?, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.CaseWhenExpression.CaseWhenExpression","location":"ktorm-core/org.ktorm.expression/-case-when-expression/-case-when-expression.html","searchKeys":["CaseWhenExpression","constructor(operand: ScalarExpression<*>?, whenClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>, elseClause: ScalarExpression<T>?, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.CaseWhenExpression.CaseWhenExpression"]},{"name":"constructor(parent: CaseWhen<T, R>, condition: ColumnDeclaring<T>)","description":"org.ktorm.dsl.WhenContinuation.WhenContinuation","location":"ktorm-core/org.ktorm.dsl/-when-continuation/-when-continuation.html","searchKeys":["WhenContinuation","constructor(parent: CaseWhen<T, R>, condition: ColumnDeclaring<T>)","org.ktorm.dsl.WhenContinuation.WhenContinuation"]},{"name":"constructor(partitionBy: List<ScalarExpression<*>> = emptyList(), orderBy: List<OrderByExpression> = emptyList(), frameUnit: WindowFrameUnitType? = null, frameStart: WindowFrameBoundExpression? = null, frameEnd: WindowFrameBoundExpression? = null, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.WindowSpecificationExpression.WindowSpecificationExpression","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/-window-specification-expression.html","searchKeys":["WindowSpecificationExpression","constructor(partitionBy: List<ScalarExpression<*>> = emptyList(), orderBy: List<OrderByExpression> = emptyList(), frameUnit: WindowFrameUnitType? = null, frameStart: WindowFrameBoundExpression? = null, frameEnd: WindowFrameBoundExpression? = null, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.WindowSpecificationExpression.WindowSpecificationExpression"]},{"name":"constructor(properties: List<KProperty1<*, *>>)","description":"org.ktorm.schema.NestedBinding.NestedBinding","location":"ktorm-core/org.ktorm.schema/-nested-binding/-nested-binding.html","searchKeys":["NestedBinding","constructor(properties: List<KProperty1<*, *>>)","org.ktorm.schema.NestedBinding.NestedBinding"]},{"name":"constructor(query: QueryExpression, notExists: Boolean = false, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.ExistsExpression.ExistsExpression","location":"ktorm-core/org.ktorm.expression/-exists-expression/-exists-expression.html","searchKeys":["ExistsExpression","constructor(query: QueryExpression, notExists: Boolean = false, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.ExistsExpression.ExistsExpression"]},{"name":"constructor(referenceTable: BaseTable<*>, onProperty: KProperty1<*, *>)","description":"org.ktorm.schema.ReferenceBinding.ReferenceBinding","location":"ktorm-core/org.ktorm.schema/-reference-binding/-reference-binding.html","searchKeys":["ReferenceBinding","constructor(referenceTable: BaseTable<*>, onProperty: KProperty1<*, *>)","org.ktorm.schema.ReferenceBinding.ReferenceBinding"]},{"name":"constructor(rs: ResultSet)","description":"org.ktorm.database.CachedRowSet.CachedRowSet","location":"ktorm-core/org.ktorm.database/-cached-row-set/-cached-row-set.html","searchKeys":["CachedRowSet","constructor(rs: ResultSet)","org.ktorm.database.CachedRowSet.CachedRowSet"]},{"name":"constructor(sequence: EntitySequence<E, T>, keySelector: (T) -> ColumnDeclaring<K>)","description":"org.ktorm.entity.EntityGrouping.EntityGrouping","location":"ktorm-core/org.ktorm.entity/-entity-grouping/-entity-grouping.html","searchKeys":["EntityGrouping","constructor(sequence: EntitySequence<E, T>, keySelector: (T) -> ColumnDeclaring<K>)","org.ktorm.entity.EntityGrouping.EntityGrouping"]},{"name":"constructor(table: BaseTable<*>, name: String, binding: ColumnBinding? = null, extraBindings: List<ColumnBinding> = emptyList(), sqlType: SqlType<T>)","description":"org.ktorm.schema.Column.Column","location":"ktorm-core/org.ktorm.schema/-column/-column.html","searchKeys":["Column","constructor(table: BaseTable<*>, name: String, binding: ColumnBinding? = null, extraBindings: List<ColumnBinding> = emptyList(), sqlType: SqlType<T>)","org.ktorm.schema.Column.Column"]},{"name":"constructor(table: T)","description":"org.ktorm.dsl.BatchInsertStatementBuilder.BatchInsertStatementBuilder","location":"ktorm-core/org.ktorm.dsl/-batch-insert-statement-builder/-batch-insert-statement-builder.html","searchKeys":["BatchInsertStatementBuilder","constructor(table: T)","org.ktorm.dsl.BatchInsertStatementBuilder.BatchInsertStatementBuilder"]},{"name":"constructor(table: T)","description":"org.ktorm.dsl.BatchUpdateStatementBuilder.BatchUpdateStatementBuilder","location":"ktorm-core/org.ktorm.dsl/-batch-update-statement-builder/-batch-update-statement-builder.html","searchKeys":["BatchUpdateStatementBuilder","constructor(table: T)","org.ktorm.dsl.BatchUpdateStatementBuilder.BatchUpdateStatementBuilder"]},{"name":"constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.InsertExpression.InsertExpression","location":"ktorm-core/org.ktorm.expression/-insert-expression/-insert-expression.html","searchKeys":["InsertExpression","constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.InsertExpression.InsertExpression"]},{"name":"constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, where: ScalarExpression<Boolean>? = null, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.UpdateExpression.UpdateExpression","location":"ktorm-core/org.ktorm.expression/-update-expression/-update-expression.html","searchKeys":["UpdateExpression","constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, where: ScalarExpression<Boolean>? = null, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.UpdateExpression.UpdateExpression"]},{"name":"constructor(table: TableExpression, columns: List<ColumnExpression<*>>, query: QueryExpression, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.InsertFromQueryExpression.InsertFromQueryExpression","location":"ktorm-core/org.ktorm.expression/-insert-from-query-expression/-insert-from-query-expression.html","searchKeys":["InsertFromQueryExpression","constructor(table: TableExpression, columns: List<ColumnExpression<*>>, query: QueryExpression, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.InsertFromQueryExpression.InsertFromQueryExpression"]},{"name":"constructor(table: TableExpression, where: ScalarExpression<Boolean>?, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.DeleteExpression.DeleteExpression","location":"ktorm-core/org.ktorm.expression/-delete-expression/-delete-expression.html","searchKeys":["DeleteExpression","constructor(table: TableExpression, where: ScalarExpression<Boolean>?, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.DeleteExpression.DeleteExpression"]},{"name":"constructor(table: TableExpression?, name: String, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.ColumnExpression.ColumnExpression","location":"ktorm-core/org.ktorm.expression/-column-expression/-column-expression.html","searchKeys":["ColumnExpression","constructor(table: TableExpression?, name: String, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.ColumnExpression.ColumnExpression"]},{"name":"constructor(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null)","description":"org.ktorm.schema.BaseTable.BaseTable","location":"ktorm-core/org.ktorm.schema/-base-table/-base-table.html","searchKeys":["BaseTable","constructor(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null)","org.ktorm.schema.BaseTable.BaseTable"]},{"name":"constructor(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null)","description":"org.ktorm.schema.Table.Table","location":"ktorm-core/org.ktorm.schema/-table/-table.html","searchKeys":["Table","constructor(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null)","org.ktorm.schema.Table.Table"]},{"name":"constructor(tag: String)","description":"org.ktorm.logging.AndroidLoggerAdapter.AndroidLoggerAdapter","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/-android-logger-adapter.html","searchKeys":["AndroidLoggerAdapter","constructor(tag: String)","org.ktorm.logging.AndroidLoggerAdapter.AndroidLoggerAdapter"]},{"name":"constructor(threshold: LogLevel)","description":"org.ktorm.logging.ConsoleLogger.ConsoleLogger","location":"ktorm-core/org.ktorm.logging/-console-logger/-console-logger.html","searchKeys":["ConsoleLogger","constructor(threshold: LogLevel)","org.ktorm.logging.ConsoleLogger.ConsoleLogger"]},{"name":"constructor(transactionManager: TransactionManager, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), exceptionTranslator: (SQLException) -> Throwable? = null, alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null)","description":"org.ktorm.database.Database.Database","location":"ktorm-core/org.ktorm.database/-database/-database.html","searchKeys":["Database","constructor(transactionManager: TransactionManager, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), exceptionTranslator: (SQLException) -> Throwable? = null, alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null)","org.ktorm.database.Database.Database"]},{"name":"constructor(type: AggregateType, argument: ScalarExpression<*>?, isDistinct: Boolean = false, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.AggregateExpression.AggregateExpression","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/-aggregate-expression.html","searchKeys":["AggregateExpression","constructor(type: AggregateType, argument: ScalarExpression<*>?, isDistinct: Boolean = false, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.AggregateExpression.AggregateExpression"]},{"name":"constructor(type: BinaryExpressionType, left: ScalarExpression<*>, right: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.BinaryExpression.BinaryExpression","location":"ktorm-core/org.ktorm.expression/-binary-expression/-binary-expression.html","searchKeys":["BinaryExpression","constructor(type: BinaryExpressionType, left: ScalarExpression<*>, right: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.BinaryExpression.BinaryExpression"]},{"name":"constructor(type: JoinType, left: QuerySourceExpression, right: QuerySourceExpression, condition: ScalarExpression<Boolean>? = null, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.JoinExpression.JoinExpression","location":"ktorm-core/org.ktorm.expression/-join-expression/-join-expression.html","searchKeys":["JoinExpression","constructor(type: JoinType, left: QuerySourceExpression, right: QuerySourceExpression, condition: ScalarExpression<Boolean>? = null, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.JoinExpression.JoinExpression"]},{"name":"constructor(type: UnaryExpressionType, operand: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.UnaryExpression.UnaryExpression","location":"ktorm-core/org.ktorm.expression/-unary-expression/-unary-expression.html","searchKeys":["UnaryExpression","constructor(type: UnaryExpressionType, operand: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.UnaryExpression.UnaryExpression"]},{"name":"constructor(type: WindowFrameBoundType, argument: ScalarExpression<*>?, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.WindowFrameBoundExpression.WindowFrameBoundExpression","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-expression/-window-frame-bound-expression.html","searchKeys":["WindowFrameBoundExpression","constructor(type: WindowFrameBoundType, argument: ScalarExpression<*>?, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.WindowFrameBoundExpression.WindowFrameBoundExpression"]},{"name":"constructor(type: WindowFunctionType, arguments: List<ScalarExpression<*>>, isDistinct: Boolean = false, window: WindowSpecificationExpression = WindowSpecificationExpression(), sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.WindowFunctionExpression.WindowFunctionExpression","location":"ktorm-core/org.ktorm.expression/-window-function-expression/-window-function-expression.html","searchKeys":["WindowFunctionExpression","constructor(type: WindowFunctionType, arguments: List<ScalarExpression<*>>, isDistinct: Boolean = false, window: WindowSpecificationExpression = WindowSpecificationExpression(), sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.WindowFunctionExpression.WindowFunctionExpression"]},{"name":"constructor(typeCode: Int, typeName: String)","description":"org.ktorm.schema.SqlType.SqlType","location":"ktorm-core/org.ktorm.schema/-sql-type/-sql-type.html","searchKeys":["SqlType","constructor(typeCode: Int, typeName: String)","org.ktorm.schema.SqlType.SqlType"]},{"name":"constructor(typeRef: TypeReference<C>)","description":"org.ktorm.schema.EnumSqlType.EnumSqlType","location":"ktorm-core/org.ktorm.schema/-enum-sql-type/-enum-sql-type.html","searchKeys":["EnumSqlType","constructor(typeRef: TypeReference<C>)","org.ktorm.schema.EnumSqlType.EnumSqlType"]},{"name":"constructor(value: T?, sqlType: SqlType<T>, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.expression.ArgumentExpression.ArgumentExpression","location":"ktorm-core/org.ktorm.expression/-argument-expression/-argument-expression.html","searchKeys":["ArgumentExpression","constructor(value: T?, sqlType: SqlType<T>, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.expression.ArgumentExpression.ArgumentExpression"]},{"name":"data class AggregateExpression<T : Any>(val type: AggregateType, val argument: ScalarExpression<*>?, val isDistinct: Boolean = false, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.AggregateExpression","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/index.html","searchKeys":["AggregateExpression","data class AggregateExpression<T : Any>(val type: AggregateType, val argument: ScalarExpression<*>?, val isDistinct: Boolean = false, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.AggregateExpression"]},{"name":"data class ArgumentExpression<T : Any>(val value: T?, val sqlType: SqlType<T>, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.ArgumentExpression","location":"ktorm-core/org.ktorm.expression/-argument-expression/index.html","searchKeys":["ArgumentExpression","data class ArgumentExpression<T : Any>(val value: T?, val sqlType: SqlType<T>, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.ArgumentExpression"]},{"name":"data class BetweenExpression(val expression: ScalarExpression<*>, val lower: ScalarExpression<*>, val upper: ScalarExpression<*>, val notBetween: Boolean = false, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","description":"org.ktorm.expression.BetweenExpression","location":"ktorm-core/org.ktorm.expression/-between-expression/index.html","searchKeys":["BetweenExpression","data class BetweenExpression(val expression: ScalarExpression<*>, val lower: ScalarExpression<*>, val upper: ScalarExpression<*>, val notBetween: Boolean = false, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","org.ktorm.expression.BetweenExpression"]},{"name":"data class BinaryExpression<T : Any>(val type: BinaryExpressionType, val left: ScalarExpression<*>, val right: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.BinaryExpression","location":"ktorm-core/org.ktorm.expression/-binary-expression/index.html","searchKeys":["BinaryExpression","data class BinaryExpression<T : Any>(val type: BinaryExpressionType, val left: ScalarExpression<*>, val right: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.BinaryExpression"]},{"name":"data class CaseWhen<T : Any, R : Any>(val operand: ColumnDeclaring<T>?, val whenClauses: List<Pair<ColumnDeclaring<T>, ColumnDeclaring<R>>> = emptyList(), val elseClause: ColumnDeclaring<R>? = null)","description":"org.ktorm.dsl.CaseWhen","location":"ktorm-core/org.ktorm.dsl/-case-when/index.html","searchKeys":["CaseWhen","data class CaseWhen<T : Any, R : Any>(val operand: ColumnDeclaring<T>?, val whenClauses: List<Pair<ColumnDeclaring<T>, ColumnDeclaring<R>>> = emptyList(), val elseClause: ColumnDeclaring<R>? = null)","org.ktorm.dsl.CaseWhen"]},{"name":"data class CaseWhenExpression<T : Any>(val operand: ScalarExpression<*>?, val whenClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>, val elseClause: ScalarExpression<T>?, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.CaseWhenExpression","location":"ktorm-core/org.ktorm.expression/-case-when-expression/index.html","searchKeys":["CaseWhenExpression","data class CaseWhenExpression<T : Any>(val operand: ScalarExpression<*>?, val whenClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>, val elseClause: ScalarExpression<T>?, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.CaseWhenExpression"]},{"name":"data class CastingExpression<T : Any>(val expression: SqlExpression, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.CastingExpression","location":"ktorm-core/org.ktorm.expression/-casting-expression/index.html","searchKeys":["CastingExpression","data class CastingExpression<T : Any>(val expression: SqlExpression, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.CastingExpression"]},{"name":"data class Column<T : Any>(val table: BaseTable<*>, val name: String, val binding: ColumnBinding? = null, val extraBindings: List<ColumnBinding> = emptyList(), val sqlType: SqlType<T>) : ColumnDeclaring<T> ","description":"org.ktorm.schema.Column","location":"ktorm-core/org.ktorm.schema/-column/index.html","searchKeys":["Column","data class Column<T : Any>(val table: BaseTable<*>, val name: String, val binding: ColumnBinding? = null, val extraBindings: List<ColumnBinding> = emptyList(), val sqlType: SqlType<T>) : ColumnDeclaring<T> ","org.ktorm.schema.Column"]},{"name":"data class ColumnAssignmentExpression<T : Any>(val column: ColumnExpression<T>, val expression: ScalarExpression<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.ColumnAssignmentExpression","location":"ktorm-core/org.ktorm.expression/-column-assignment-expression/index.html","searchKeys":["ColumnAssignmentExpression","data class ColumnAssignmentExpression<T : Any>(val column: ColumnExpression<T>, val expression: ScalarExpression<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.ColumnAssignmentExpression"]},{"name":"data class ColumnDeclaringExpression<T : Any>(val expression: ScalarExpression<T>, val declaredName: String? = null, val sqlType: SqlType<T> = expression.sqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.ColumnDeclaringExpression","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/index.html","searchKeys":["ColumnDeclaringExpression","data class ColumnDeclaringExpression<T : Any>(val expression: ScalarExpression<T>, val declaredName: String? = null, val sqlType: SqlType<T> = expression.sqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.ColumnDeclaringExpression"]},{"name":"data class ColumnExpression<T : Any>(val table: TableExpression?, val name: String, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.ColumnExpression","location":"ktorm-core/org.ktorm.expression/-column-expression/index.html","searchKeys":["ColumnExpression","data class ColumnExpression<T : Any>(val table: TableExpression?, val name: String, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.ColumnExpression"]},{"name":"data class DeleteExpression(val table: TableExpression, val where: ScalarExpression<Boolean>?, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.DeleteExpression","location":"ktorm-core/org.ktorm.expression/-delete-expression/index.html","searchKeys":["DeleteExpression","data class DeleteExpression(val table: TableExpression, val where: ScalarExpression<Boolean>?, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.DeleteExpression"]},{"name":"data class ExistsExpression(val query: QueryExpression, val notExists: Boolean = false, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","description":"org.ktorm.expression.ExistsExpression","location":"ktorm-core/org.ktorm.expression/-exists-expression/index.html","searchKeys":["ExistsExpression","data class ExistsExpression(val query: QueryExpression, val notExists: Boolean = false, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","org.ktorm.expression.ExistsExpression"]},{"name":"data class FunctionExpression<T : Any>(val functionName: String, val arguments: List<ScalarExpression<*>>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.FunctionExpression","location":"ktorm-core/org.ktorm.expression/-function-expression/index.html","searchKeys":["FunctionExpression","data class FunctionExpression<T : Any>(val functionName: String, val arguments: List<ScalarExpression<*>>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.FunctionExpression"]},{"name":"data class InListExpression(val left: ScalarExpression<*>, val query: QueryExpression? = null, val values: List<ScalarExpression<*>>? = null, val notInList: Boolean = false, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","description":"org.ktorm.expression.InListExpression","location":"ktorm-core/org.ktorm.expression/-in-list-expression/index.html","searchKeys":["InListExpression","data class InListExpression(val left: ScalarExpression<*>, val query: QueryExpression? = null, val values: List<ScalarExpression<*>>? = null, val notInList: Boolean = false, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","org.ktorm.expression.InListExpression"]},{"name":"data class InsertExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.InsertExpression","location":"ktorm-core/org.ktorm.expression/-insert-expression/index.html","searchKeys":["InsertExpression","data class InsertExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.InsertExpression"]},{"name":"data class InsertFromQueryExpression(val table: TableExpression, val columns: List<ColumnExpression<*>>, val query: QueryExpression, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.InsertFromQueryExpression","location":"ktorm-core/org.ktorm.expression/-insert-from-query-expression/index.html","searchKeys":["InsertFromQueryExpression","data class InsertFromQueryExpression(val table: TableExpression, val columns: List<ColumnExpression<*>>, val query: QueryExpression, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.InsertFromQueryExpression"]},{"name":"data class JoinExpression(val type: JoinType, val left: QuerySourceExpression, val right: QuerySourceExpression, val condition: ScalarExpression<Boolean>? = null, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : QuerySourceExpression","description":"org.ktorm.expression.JoinExpression","location":"ktorm-core/org.ktorm.expression/-join-expression/index.html","searchKeys":["JoinExpression","data class JoinExpression(val type: JoinType, val left: QuerySourceExpression, val right: QuerySourceExpression, val condition: ScalarExpression<Boolean>? = null, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : QuerySourceExpression","org.ktorm.expression.JoinExpression"]},{"name":"data class NestedBinding(val properties: List<KProperty1<*, *>>) : ColumnBinding","description":"org.ktorm.schema.NestedBinding","location":"ktorm-core/org.ktorm.schema/-nested-binding/index.html","searchKeys":["NestedBinding","data class NestedBinding(val properties: List<KProperty1<*, *>>) : ColumnBinding","org.ktorm.schema.NestedBinding"]},{"name":"data class OrderByExpression(val expression: ScalarExpression<*>, val orderType: OrderType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.OrderByExpression","location":"ktorm-core/org.ktorm.expression/-order-by-expression/index.html","searchKeys":["OrderByExpression","data class OrderByExpression(val expression: ScalarExpression<*>, val orderType: OrderType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.OrderByExpression"]},{"name":"data class QuerySource(val database: Database, val sourceTable: BaseTable<*>, val expression: QuerySourceExpression)","description":"org.ktorm.dsl.QuerySource","location":"ktorm-core/org.ktorm.dsl/-query-source/index.html","searchKeys":["QuerySource","data class QuerySource(val database: Database, val sourceTable: BaseTable<*>, val expression: QuerySourceExpression)","org.ktorm.dsl.QuerySource"]},{"name":"data class ReferenceBinding(val referenceTable: BaseTable<*>, val onProperty: KProperty1<*, *>) : ColumnBinding","description":"org.ktorm.schema.ReferenceBinding","location":"ktorm-core/org.ktorm.schema/-reference-binding/index.html","searchKeys":["ReferenceBinding","data class ReferenceBinding(val referenceTable: BaseTable<*>, val onProperty: KProperty1<*, *>) : ColumnBinding","org.ktorm.schema.ReferenceBinding"]},{"name":"data class SelectExpression(val columns: List<ColumnDeclaringExpression<*>> = emptyList(), val from: QuerySourceExpression, val where: ScalarExpression<Boolean>? = null, val groupBy: List<ScalarExpression<*>> = emptyList(), val having: ScalarExpression<Boolean>? = null, val isDistinct: Boolean = false, val orderBy: List<OrderByExpression> = emptyList(), val offset: Int? = null, val limit: Int? = null, val tableAlias: String? = null, val extraProperties: Map<String, Any> = emptyMap()) : QueryExpression","description":"org.ktorm.expression.SelectExpression","location":"ktorm-core/org.ktorm.expression/-select-expression/index.html","searchKeys":["SelectExpression","data class SelectExpression(val columns: List<ColumnDeclaringExpression<*>> = emptyList(), val from: QuerySourceExpression, val where: ScalarExpression<Boolean>? = null, val groupBy: List<ScalarExpression<*>> = emptyList(), val having: ScalarExpression<Boolean>? = null, val isDistinct: Boolean = false, val orderBy: List<OrderByExpression> = emptyList(), val offset: Int? = null, val limit: Int? = null, val tableAlias: String? = null, val extraProperties: Map<String, Any> = emptyMap()) : QueryExpression","org.ktorm.expression.SelectExpression"]},{"name":"data class TableExpression(val name: String, val tableAlias: String? = null, val catalog: String? = null, val schema: String? = null, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : QuerySourceExpression","description":"org.ktorm.expression.TableExpression","location":"ktorm-core/org.ktorm.expression/-table-expression/index.html","searchKeys":["TableExpression","data class TableExpression(val name: String, val tableAlias: String? = null, val catalog: String? = null, val schema: String? = null, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : QuerySourceExpression","org.ktorm.expression.TableExpression"]},{"name":"data class Tuple4<out E1, out E2, out E3, out E4>(val element1: E1, val element2: E2, val element3: E3, val element4: E4) : Serializable","description":"org.ktorm.entity.Tuple4","location":"ktorm-core/org.ktorm.entity/-tuple4/index.html","searchKeys":["Tuple4","data class Tuple4<out E1, out E2, out E3, out E4>(val element1: E1, val element2: E2, val element3: E3, val element4: E4) : Serializable","org.ktorm.entity.Tuple4"]},{"name":"data class Tuple5<out E1, out E2, out E3, out E4, out E5>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5) : Serializable","description":"org.ktorm.entity.Tuple5","location":"ktorm-core/org.ktorm.entity/-tuple5/index.html","searchKeys":["Tuple5","data class Tuple5<out E1, out E2, out E3, out E4, out E5>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5) : Serializable","org.ktorm.entity.Tuple5"]},{"name":"data class Tuple6<out E1, out E2, out E3, out E4, out E5, out E6>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6) : Serializable","description":"org.ktorm.entity.Tuple6","location":"ktorm-core/org.ktorm.entity/-tuple6/index.html","searchKeys":["Tuple6","data class Tuple6<out E1, out E2, out E3, out E4, out E5, out E6>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6) : Serializable","org.ktorm.entity.Tuple6"]},{"name":"data class Tuple7<out E1, out E2, out E3, out E4, out E5, out E6, out E7>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6, val element7: E7) : Serializable","description":"org.ktorm.entity.Tuple7","location":"ktorm-core/org.ktorm.entity/-tuple7/index.html","searchKeys":["Tuple7","data class Tuple7<out E1, out E2, out E3, out E4, out E5, out E6, out E7>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6, val element7: E7) : Serializable","org.ktorm.entity.Tuple7"]},{"name":"data class Tuple8<out E1, out E2, out E3, out E4, out E5, out E6, out E7, out E8>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6, val element7: E7, val element8: E8) : Serializable","description":"org.ktorm.entity.Tuple8","location":"ktorm-core/org.ktorm.entity/-tuple8/index.html","searchKeys":["Tuple8","data class Tuple8<out E1, out E2, out E3, out E4, out E5, out E6, out E7, out E8>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6, val element7: E7, val element8: E8) : Serializable","org.ktorm.entity.Tuple8"]},{"name":"data class Tuple9<out E1, out E2, out E3, out E4, out E5, out E6, out E7, out E8, out E9>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6, val element7: E7, val element8: E8, val element9: E9) : Serializable","description":"org.ktorm.entity.Tuple9","location":"ktorm-core/org.ktorm.entity/-tuple9/index.html","searchKeys":["Tuple9","data class Tuple9<out E1, out E2, out E3, out E4, out E5, out E6, out E7, out E8, out E9>(val element1: E1, val element2: E2, val element3: E3, val element4: E4, val element5: E5, val element6: E6, val element7: E7, val element8: E8, val element9: E9) : Serializable","org.ktorm.entity.Tuple9"]},{"name":"data class UnaryExpression<T : Any>(val type: UnaryExpressionType, val operand: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.UnaryExpression","location":"ktorm-core/org.ktorm.expression/-unary-expression/index.html","searchKeys":["UnaryExpression","data class UnaryExpression<T : Any>(val type: UnaryExpressionType, val operand: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.UnaryExpression"]},{"name":"data class UnionExpression(val left: QueryExpression, val right: QueryExpression, val isUnionAll: Boolean, val orderBy: List<OrderByExpression> = emptyList(), val offset: Int? = null, val limit: Int? = null, val tableAlias: String? = null, val extraProperties: Map<String, Any> = emptyMap()) : QueryExpression","description":"org.ktorm.expression.UnionExpression","location":"ktorm-core/org.ktorm.expression/-union-expression/index.html","searchKeys":["UnionExpression","data class UnionExpression(val left: QueryExpression, val right: QueryExpression, val isUnionAll: Boolean, val orderBy: List<OrderByExpression> = emptyList(), val offset: Int? = null, val limit: Int? = null, val tableAlias: String? = null, val extraProperties: Map<String, Any> = emptyMap()) : QueryExpression","org.ktorm.expression.UnionExpression"]},{"name":"data class UpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val where: ScalarExpression<Boolean>? = null, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.UpdateExpression","location":"ktorm-core/org.ktorm.expression/-update-expression/index.html","searchKeys":["UpdateExpression","data class UpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val where: ScalarExpression<Boolean>? = null, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.UpdateExpression"]},{"name":"data class WhenContinuation<T : Any, R : Any>(val parent: CaseWhen<T, R>, val condition: ColumnDeclaring<T>)","description":"org.ktorm.dsl.WhenContinuation","location":"ktorm-core/org.ktorm.dsl/-when-continuation/index.html","searchKeys":["WhenContinuation","data class WhenContinuation<T : Any, R : Any>(val parent: CaseWhen<T, R>, val condition: ColumnDeclaring<T>)","org.ktorm.dsl.WhenContinuation"]},{"name":"data class WindowFrameBoundExpression(val type: WindowFrameBoundType, val argument: ScalarExpression<*>?, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.WindowFrameBoundExpression","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-expression/index.html","searchKeys":["WindowFrameBoundExpression","data class WindowFrameBoundExpression(val type: WindowFrameBoundType, val argument: ScalarExpression<*>?, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.WindowFrameBoundExpression"]},{"name":"data class WindowFunctionExpression<T : Any>(val type: WindowFunctionType, val arguments: List<ScalarExpression<*>>, val isDistinct: Boolean = false, val window: WindowSpecificationExpression = WindowSpecificationExpression(), val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.expression.WindowFunctionExpression","location":"ktorm-core/org.ktorm.expression/-window-function-expression/index.html","searchKeys":["WindowFunctionExpression","data class WindowFunctionExpression<T : Any>(val type: WindowFunctionType, val arguments: List<ScalarExpression<*>>, val isDistinct: Boolean = false, val window: WindowSpecificationExpression = WindowSpecificationExpression(), val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.expression.WindowFunctionExpression"]},{"name":"data class WindowSpecificationExpression(val partitionBy: List<ScalarExpression<*>> = emptyList(), val orderBy: List<OrderByExpression> = emptyList(), val frameUnit: WindowFrameUnitType? = null, val frameStart: WindowFrameBoundExpression? = null, val frameEnd: WindowFrameBoundExpression? = null, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.expression.WindowSpecificationExpression","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/index.html","searchKeys":["WindowSpecificationExpression","data class WindowSpecificationExpression(val partitionBy: List<ScalarExpression<*>> = emptyList(), val orderBy: List<OrderByExpression> = emptyList(), val frameUnit: WindowFrameUnitType? = null, val frameStart: WindowFrameBoundExpression? = null, val frameEnd: WindowFrameBoundExpression? = null, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.expression.WindowSpecificationExpression"]},{"name":"enum AggregateType : Enum<AggregateType> ","description":"org.ktorm.expression.AggregateType","location":"ktorm-core/org.ktorm.expression/-aggregate-type/index.html","searchKeys":["AggregateType","enum AggregateType : Enum<AggregateType> ","org.ktorm.expression.AggregateType"]},{"name":"enum BinaryExpressionType : Enum<BinaryExpressionType> ","description":"org.ktorm.expression.BinaryExpressionType","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/index.html","searchKeys":["BinaryExpressionType","enum BinaryExpressionType : Enum<BinaryExpressionType> ","org.ktorm.expression.BinaryExpressionType"]},{"name":"enum JoinType : Enum<JoinType> ","description":"org.ktorm.expression.JoinType","location":"ktorm-core/org.ktorm.expression/-join-type/index.html","searchKeys":["JoinType","enum JoinType : Enum<JoinType> ","org.ktorm.expression.JoinType"]},{"name":"enum LogLevel : Enum<LogLevel> ","description":"org.ktorm.logging.LogLevel","location":"ktorm-core/org.ktorm.logging/-log-level/index.html","searchKeys":["LogLevel","enum LogLevel : Enum<LogLevel> ","org.ktorm.logging.LogLevel"]},{"name":"enum OrderType : Enum<OrderType> ","description":"org.ktorm.expression.OrderType","location":"ktorm-core/org.ktorm.expression/-order-type/index.html","searchKeys":["OrderType","enum OrderType : Enum<OrderType> ","org.ktorm.expression.OrderType"]},{"name":"enum TransactionIsolation : Enum<TransactionIsolation> ","description":"org.ktorm.database.TransactionIsolation","location":"ktorm-core/org.ktorm.database/-transaction-isolation/index.html","searchKeys":["TransactionIsolation","enum TransactionIsolation : Enum<TransactionIsolation> ","org.ktorm.database.TransactionIsolation"]},{"name":"enum UnaryExpressionType : Enum<UnaryExpressionType> ","description":"org.ktorm.expression.UnaryExpressionType","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/index.html","searchKeys":["UnaryExpressionType","enum UnaryExpressionType : Enum<UnaryExpressionType> ","org.ktorm.expression.UnaryExpressionType"]},{"name":"enum WindowFrameBoundType : Enum<WindowFrameBoundType> ","description":"org.ktorm.expression.WindowFrameBoundType","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/index.html","searchKeys":["WindowFrameBoundType","enum WindowFrameBoundType : Enum<WindowFrameBoundType> ","org.ktorm.expression.WindowFrameBoundType"]},{"name":"enum WindowFrameUnitType : Enum<WindowFrameUnitType> ","description":"org.ktorm.expression.WindowFrameUnitType","location":"ktorm-core/org.ktorm.expression/-window-frame-unit-type/index.html","searchKeys":["WindowFrameUnitType","enum WindowFrameUnitType : Enum<WindowFrameUnitType> ","org.ktorm.expression.WindowFrameUnitType"]},{"name":"enum WindowFunctionType : Enum<WindowFunctionType> ","description":"org.ktorm.expression.WindowFunctionType","location":"ktorm-core/org.ktorm.expression/-window-function-type/index.html","searchKeys":["WindowFunctionType","enum WindowFunctionType : Enum<WindowFunctionType> ","org.ktorm.expression.WindowFunctionType"]},{"name":"fun <A : Appendable> Query.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (row: QueryRowSet) -> CharSequence): A","description":"org.ktorm.dsl.joinTo","location":"ktorm-core/org.ktorm.dsl/join-to.html","searchKeys":["joinTo","fun <A : Appendable> Query.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (row: QueryRowSet) -> CharSequence): A","org.ktorm.dsl.joinTo"]},{"name":"fun <C : Any, R : Any> Column<C>.transform(fromUnderlyingValue: (C) -> R, toUnderlyingValue: (R) -> C): Column<R>","description":"org.ktorm.schema.BaseTable.transform","location":"ktorm-core/org.ktorm.schema/-base-table/transform.html","searchKeys":["transform","fun <C : Any, R : Any> Column<C>.transform(fromUnderlyingValue: (C) -> R, toUnderlyingValue: (R) -> C): Column<R>","org.ktorm.schema.BaseTable.transform"]},{"name":"fun <C : Any> Column<C>.primaryKey(): Column<C>","description":"org.ktorm.schema.BaseTable.primaryKey","location":"ktorm-core/org.ktorm.schema/-base-table/primary-key.html","searchKeys":["primaryKey","fun <C : Any> Column<C>.primaryKey(): Column<C>","org.ktorm.schema.BaseTable.primaryKey"]},{"name":"fun <C : Any> registerColumn(name: String, sqlType: SqlType<C>): Column<C>","description":"org.ktorm.schema.BaseTable.registerColumn","location":"ktorm-core/org.ktorm.schema/-base-table/register-column.html","searchKeys":["registerColumn","fun <C : Any> registerColumn(name: String, sqlType: SqlType<C>): Column<C>","org.ktorm.schema.BaseTable.registerColumn"]},{"name":"fun <C : Any> set(column: Column<C>, expr: ColumnDeclaring<C>)","description":"org.ktorm.dsl.AssignmentsBuilder.set","location":"ktorm-core/org.ktorm.dsl/-assignments-builder/set.html","searchKeys":["set","fun <C : Any> set(column: Column<C>, expr: ColumnDeclaring<C>)","org.ktorm.dsl.AssignmentsBuilder.set"]},{"name":"fun <C : Any> set(column: Column<C>, value: C?)","description":"org.ktorm.dsl.AssignmentsBuilder.set","location":"ktorm-core/org.ktorm.dsl/-assignments-builder/set.html","searchKeys":["set","fun <C : Any> set(column: Column<C>, value: C?)","org.ktorm.dsl.AssignmentsBuilder.set"]},{"name":"fun <C : Comparable<C>> max(column: ColumnDeclaring<C>): AggregateExpression<C>","description":"org.ktorm.dsl.max","location":"ktorm-core/org.ktorm.dsl/max.html","searchKeys":["max","fun <C : Comparable<C>> max(column: ColumnDeclaring<C>): AggregateExpression<C>","org.ktorm.dsl.max"]},{"name":"fun <C : Comparable<C>> maxDistinct(column: ColumnDeclaring<C>): AggregateExpression<C>","description":"org.ktorm.dsl.maxDistinct","location":"ktorm-core/org.ktorm.dsl/max-distinct.html","searchKeys":["maxDistinct","fun <C : Comparable<C>> maxDistinct(column: ColumnDeclaring<C>): AggregateExpression<C>","org.ktorm.dsl.maxDistinct"]},{"name":"fun <C : Comparable<C>> min(column: ColumnDeclaring<C>): AggregateExpression<C>","description":"org.ktorm.dsl.min","location":"ktorm-core/org.ktorm.dsl/min.html","searchKeys":["min","fun <C : Comparable<C>> min(column: ColumnDeclaring<C>): AggregateExpression<C>","org.ktorm.dsl.min"]},{"name":"fun <C : Comparable<C>> minDistinct(column: ColumnDeclaring<C>): AggregateExpression<C>","description":"org.ktorm.dsl.minDistinct","location":"ktorm-core/org.ktorm.dsl/min-distinct.html","searchKeys":["minDistinct","fun <C : Comparable<C>> minDistinct(column: ColumnDeclaring<C>): AggregateExpression<C>","org.ktorm.dsl.minDistinct"]},{"name":"fun <C : Number> avg(column: ColumnDeclaring<C>): AggregateExpression<Double>","description":"org.ktorm.dsl.avg","location":"ktorm-core/org.ktorm.dsl/avg.html","searchKeys":["avg","fun <C : Number> avg(column: ColumnDeclaring<C>): AggregateExpression<Double>","org.ktorm.dsl.avg"]},{"name":"fun <C : Number> avgDistinct(column: ColumnDeclaring<C>): AggregateExpression<Double>","description":"org.ktorm.dsl.avgDistinct","location":"ktorm-core/org.ktorm.dsl/avg-distinct.html","searchKeys":["avgDistinct","fun <C : Number> avgDistinct(column: ColumnDeclaring<C>): AggregateExpression<Double>","org.ktorm.dsl.avgDistinct"]},{"name":"fun <C : Number> sum(column: ColumnDeclaring<C>): AggregateExpression<C>","description":"org.ktorm.dsl.sum","location":"ktorm-core/org.ktorm.dsl/sum.html","searchKeys":["sum","fun <C : Number> sum(column: ColumnDeclaring<C>): AggregateExpression<C>","org.ktorm.dsl.sum"]},{"name":"fun <C : Number> sumDistinct(column: ColumnDeclaring<C>): AggregateExpression<C>","description":"org.ktorm.dsl.sumDistinct","location":"ktorm-core/org.ktorm.dsl/sum-distinct.html","searchKeys":["sumDistinct","fun <C : Number> sumDistinct(column: ColumnDeclaring<C>): AggregateExpression<C>","org.ktorm.dsl.sumDistinct"]},{"name":"fun <E : Any, A : Appendable> EntitySequence<E, *>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (E) -> CharSequence? = null): A","description":"org.ktorm.entity.joinTo","location":"ktorm-core/org.ktorm.entity/join-to.html","searchKeys":["joinTo","fun <E : Any, A : Appendable> EntitySequence<E, *>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (E) -> CharSequence? = null): A","org.ktorm.entity.joinTo"]},{"name":"fun <E : Any, C : MutableCollection<in E>> EntitySequence<E, *>.toCollection(destination: C): C","description":"org.ktorm.entity.toCollection","location":"ktorm-core/org.ktorm.entity/to-collection.html","searchKeys":["toCollection","fun <E : Any, C : MutableCollection<in E>> EntitySequence<E, *>.toCollection(destination: C): C","org.ktorm.entity.toCollection"]},{"name":"fun <E : Any, Comparable<E>> EntitySequence<E, *>.toSortedSet(): SortedSet<E>","description":"org.ktorm.entity.toSortedSet","location":"ktorm-core/org.ktorm.entity/to-sorted-set.html","searchKeys":["toSortedSet","fun <E : Any, Comparable<E>> EntitySequence<E, *>.toSortedSet(): SortedSet<E>","org.ktorm.entity.toSortedSet"]},{"name":"fun <E : Any, Comparable<E>> EntitySequence<E, *>.toSortedSet(comparator: Comparator<in E>): SortedSet<E>","description":"org.ktorm.entity.toSortedSet","location":"ktorm-core/org.ktorm.entity/to-sorted-set.html","searchKeys":["toSortedSet","fun <E : Any, Comparable<E>> EntitySequence<E, *>.toSortedSet(comparator: Comparator<in E>): SortedSet<E>","org.ktorm.entity.toSortedSet"]},{"name":"fun <E : Any, T : BaseTable<E>, K : Any, M : MutableMap<in K?, Int>> EntityGrouping<E, T, K>.eachCountTo(destination: M): M","description":"org.ktorm.entity.eachCountTo","location":"ktorm-core/org.ktorm.entity/each-count-to.html","searchKeys":["eachCountTo","fun <E : Any, T : BaseTable<E>, K : Any, M : MutableMap<in K?, Int>> EntityGrouping<E, T, K>.eachCountTo(destination: M): M","org.ktorm.entity.eachCountTo"]},{"name":"fun <E : Any, T : BaseTable<E>, K : Any> EntityGrouping<E, T, K>.eachCount(): Map<K?, Int>","description":"org.ktorm.entity.eachCount","location":"ktorm-core/org.ktorm.entity/each-count.html","searchKeys":["eachCount","fun <E : Any, T : BaseTable<E>, K : Any> EntityGrouping<E, T, K>.eachCount(): Map<K?, Int>","org.ktorm.entity.eachCount"]},{"name":"fun <E : Any, T : BaseTable<E>, K : Any> EntitySequence<E, T>.groupingBy(keySelector: (T) -> ColumnDeclaring<K>): EntityGrouping<E, T, K>","description":"org.ktorm.entity.groupingBy","location":"ktorm-core/org.ktorm.entity/grouping-by.html","searchKeys":["groupingBy","fun <E : Any, T : BaseTable<E>, K : Any> EntitySequence<E, T>.groupingBy(keySelector: (T) -> ColumnDeclaring<K>): EntityGrouping<E, T, K>","org.ktorm.entity.groupingBy"]},{"name":"fun <E : Any, T : BaseTable<E>> Database.sequenceOf(table: T, withReferences: Boolean = true): EntitySequence<E, T>","description":"org.ktorm.entity.sequenceOf","location":"ktorm-core/org.ktorm.entity/sequence-of.html","searchKeys":["sequenceOf","fun <E : Any, T : BaseTable<E>> Database.sequenceOf(table: T, withReferences: Boolean = true): EntitySequence<E, T>","org.ktorm.entity.sequenceOf"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.any(): Boolean","description":"org.ktorm.entity.any","location":"ktorm-core/org.ktorm.entity/any.html","searchKeys":["any","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.any(): Boolean","org.ktorm.entity.any"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.clear(): Int","description":"org.ktorm.entity.clear","location":"ktorm-core/org.ktorm.entity/clear.html","searchKeys":["clear","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.clear(): Int","org.ktorm.entity.clear"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.count(): Int","description":"org.ktorm.entity.count","location":"ktorm-core/org.ktorm.entity/count.html","searchKeys":["count","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.count(): Int","org.ktorm.entity.count"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.drop(n: Int): EntitySequence<E, T>","description":"org.ktorm.entity.drop","location":"ktorm-core/org.ktorm.entity/drop.html","searchKeys":["drop","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.drop(n: Int): EntitySequence<E, T>","org.ktorm.entity.drop"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.elementAt(index: Int): E","description":"org.ktorm.entity.elementAt","location":"ktorm-core/org.ktorm.entity/element-at.html","searchKeys":["elementAt","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.elementAt(index: Int): E","org.ktorm.entity.elementAt"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.elementAtOrNull(index: Int): E?","description":"org.ktorm.entity.elementAtOrNull","location":"ktorm-core/org.ktorm.entity/element-at-or-null.html","searchKeys":["elementAtOrNull","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.elementAtOrNull(index: Int): E?","org.ktorm.entity.elementAtOrNull"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.first(): E","description":"org.ktorm.entity.first","location":"ktorm-core/org.ktorm.entity/first.html","searchKeys":["first","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.first(): E","org.ktorm.entity.first"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.firstOrNull(): E?","description":"org.ktorm.entity.firstOrNull","location":"ktorm-core/org.ktorm.entity/first-or-null.html","searchKeys":["firstOrNull","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.firstOrNull(): E?","org.ktorm.entity.firstOrNull"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.isEmpty(): Boolean","description":"org.ktorm.entity.isEmpty","location":"ktorm-core/org.ktorm.entity/is-empty.html","searchKeys":["isEmpty","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.isEmpty(): Boolean","org.ktorm.entity.isEmpty"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.isNotEmpty(): Boolean","description":"org.ktorm.entity.isNotEmpty","location":"ktorm-core/org.ktorm.entity/is-not-empty.html","searchKeys":["isNotEmpty","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.isNotEmpty(): Boolean","org.ktorm.entity.isNotEmpty"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.none(): Boolean","description":"org.ktorm.entity.none","location":"ktorm-core/org.ktorm.entity/none.html","searchKeys":["none","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.none(): Boolean","org.ktorm.entity.none"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.removeIf(predicate: (T) -> ColumnDeclaring<Boolean>): Int","description":"org.ktorm.entity.removeIf","location":"ktorm-core/org.ktorm.entity/remove-if.html","searchKeys":["removeIf","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.removeIf(predicate: (T) -> ColumnDeclaring<Boolean>): Int","org.ktorm.entity.removeIf"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.single(): E","description":"org.ktorm.entity.single","location":"ktorm-core/org.ktorm.entity/single.html","searchKeys":["single","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.single(): E","org.ktorm.entity.single"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.singleOrNull(): E?","description":"org.ktorm.entity.singleOrNull","location":"ktorm-core/org.ktorm.entity/single-or-null.html","searchKeys":["singleOrNull","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.singleOrNull(): E?","org.ktorm.entity.singleOrNull"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedBy(vararg selectors: (T) -> OrderByExpression): EntitySequence<E, T>","description":"org.ktorm.entity.sortedBy","location":"ktorm-core/org.ktorm.entity/sorted-by.html","searchKeys":["sortedBy","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedBy(vararg selectors: (T) -> OrderByExpression): EntitySequence<E, T>","org.ktorm.entity.sortedBy"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.take(n: Int): EntitySequence<E, T>","description":"org.ktorm.entity.take","location":"ktorm-core/org.ktorm.entity/take.html","searchKeys":["take","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.take(n: Int): EntitySequence<E, T>","org.ktorm.entity.take"]},{"name":"fun <E : Any> EntitySequence<E, *>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (E) -> CharSequence? = null): String","description":"org.ktorm.entity.joinToString","location":"ktorm-core/org.ktorm.entity/join-to-string.html","searchKeys":["joinToString","fun <E : Any> EntitySequence<E, *>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (E) -> CharSequence? = null): String","org.ktorm.entity.joinToString"]},{"name":"fun <E : Any> EntitySequence<E, *>.last(): E","description":"org.ktorm.entity.last","location":"ktorm-core/org.ktorm.entity/last.html","searchKeys":["last","fun <E : Any> EntitySequence<E, *>.last(): E","org.ktorm.entity.last"]},{"name":"fun <E : Any> EntitySequence<E, *>.lastOrNull(): E?","description":"org.ktorm.entity.lastOrNull","location":"ktorm-core/org.ktorm.entity/last-or-null.html","searchKeys":["lastOrNull","fun <E : Any> EntitySequence<E, *>.lastOrNull(): E?","org.ktorm.entity.lastOrNull"]},{"name":"fun <E : Any> EntitySequence<E, *>.toHashSet(): HashSet<E>","description":"org.ktorm.entity.toHashSet","location":"ktorm-core/org.ktorm.entity/to-hash-set.html","searchKeys":["toHashSet","fun <E : Any> EntitySequence<E, *>.toHashSet(): HashSet<E>","org.ktorm.entity.toHashSet"]},{"name":"fun <E : Any> EntitySequence<E, *>.toList(): List<E>","description":"org.ktorm.entity.toList","location":"ktorm-core/org.ktorm.entity/to-list.html","searchKeys":["toList","fun <E : Any> EntitySequence<E, *>.toList(): List<E>","org.ktorm.entity.toList"]},{"name":"fun <E : Any> EntitySequence<E, *>.toMutableList(): MutableList<E>","description":"org.ktorm.entity.toMutableList","location":"ktorm-core/org.ktorm.entity/to-mutable-list.html","searchKeys":["toMutableList","fun <E : Any> EntitySequence<E, *>.toMutableList(): MutableList<E>","org.ktorm.entity.toMutableList"]},{"name":"fun <E : Any> EntitySequence<E, *>.toMutableSet(): MutableSet<E>","description":"org.ktorm.entity.toMutableSet","location":"ktorm-core/org.ktorm.entity/to-mutable-set.html","searchKeys":["toMutableSet","fun <E : Any> EntitySequence<E, *>.toMutableSet(): MutableSet<E>","org.ktorm.entity.toMutableSet"]},{"name":"fun <E : Any> EntitySequence<E, *>.toSet(): Set<E>","description":"org.ktorm.entity.toSet","location":"ktorm-core/org.ktorm.entity/to-set.html","searchKeys":["toSet","fun <E : Any> EntitySequence<E, *>.toSet(): Set<E>","org.ktorm.entity.toSet"]},{"name":"fun <E : Any> EntitySequence<E, *>.withIndex(): Sequence<IndexedValue<E>>","description":"org.ktorm.entity.withIndex","location":"ktorm-core/org.ktorm.entity/with-index.html","searchKeys":["withIndex","fun <E : Any> EntitySequence<E, *>.withIndex(): Sequence<IndexedValue<E>>","org.ktorm.entity.withIndex"]},{"name":"fun <E : Entity<E>, T : Table<E>> EntitySequence<E, T>.add(entity: E): Int","description":"org.ktorm.entity.add","location":"ktorm-core/org.ktorm.entity/add.html","searchKeys":["add","fun <E : Entity<E>, T : Table<E>> EntitySequence<E, T>.add(entity: E): Int","org.ktorm.entity.add"]},{"name":"fun <E : Entity<E>, T : Table<E>> EntitySequence<E, T>.update(entity: E): Int","description":"org.ktorm.entity.update","location":"ktorm-core/org.ktorm.entity/update.html","searchKeys":["update","fun <E : Entity<E>, T : Table<E>> EntitySequence<E, T>.update(entity: E): Int","org.ktorm.entity.update"]},{"name":"fun <E1, E2, E3, E4, E5, E6, E7, E8, E9> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8, element9: E9): Tuple9<E1, E2, E3, E4, E5, E6, E7, E8, E9>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2, E3, E4, E5, E6, E7, E8, E9> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8, element9: E9): Tuple9<E1, E2, E3, E4, E5, E6, E7, E8, E9>","org.ktorm.entity.tupleOf"]},{"name":"fun <E1, E2, E3, E4, E5, E6, E7, E8> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8): Tuple8<E1, E2, E3, E4, E5, E6, E7, E8>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2, E3, E4, E5, E6, E7, E8> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7, element8: E8): Tuple8<E1, E2, E3, E4, E5, E6, E7, E8>","org.ktorm.entity.tupleOf"]},{"name":"fun <E1, E2, E3, E4, E5, E6, E7> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7): Tuple7<E1, E2, E3, E4, E5, E6, E7>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2, E3, E4, E5, E6, E7> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6, element7: E7): Tuple7<E1, E2, E3, E4, E5, E6, E7>","org.ktorm.entity.tupleOf"]},{"name":"fun <E1, E2, E3, E4, E5, E6> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6): Tuple6<E1, E2, E3, E4, E5, E6>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2, E3, E4, E5, E6> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5, element6: E6): Tuple6<E1, E2, E3, E4, E5, E6>","org.ktorm.entity.tupleOf"]},{"name":"fun <E1, E2, E3, E4, E5> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5): Tuple5<E1, E2, E3, E4, E5>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2, E3, E4, E5> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4, element5: E5): Tuple5<E1, E2, E3, E4, E5>","org.ktorm.entity.tupleOf"]},{"name":"fun <E1, E2, E3, E4> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4): Tuple4<E1, E2, E3, E4>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2, E3, E4> tupleOf(element1: E1, element2: E2, element3: E3, element4: E4): Tuple4<E1, E2, E3, E4>","org.ktorm.entity.tupleOf"]},{"name":"fun <E1, E2, E3> tupleOf(element1: E1, element2: E2, element3: E3): Tuple3<E1, E2, E3>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2, E3> tupleOf(element1: E1, element2: E2, element3: E3): Tuple3<E1, E2, E3>","org.ktorm.entity.tupleOf"]},{"name":"fun <E1, E2> tupleOf(element1: E1, element2: E2): Tuple2<E1, E2>","description":"org.ktorm.entity.tupleOf","location":"ktorm-core/org.ktorm.entity/tuple-of.html","searchKeys":["tupleOf","fun <E1, E2> tupleOf(element1: E1, element2: E2): Tuple2<E1, E2>","org.ktorm.entity.tupleOf"]},{"name":"fun <E> Tuple4<E, E, E, E>.toList(): List<E>","description":"org.ktorm.entity.toList","location":"ktorm-core/org.ktorm.entity/to-list.html","searchKeys":["toList","fun <E> Tuple4<E, E, E, E>.toList(): List<E>","org.ktorm.entity.toList"]},{"name":"fun <E> Tuple5<E, E, E, E, E>.toList(): List<E>","description":"org.ktorm.entity.toList","location":"ktorm-core/org.ktorm.entity/to-list.html","searchKeys":["toList","fun <E> Tuple5<E, E, E, E, E>.toList(): List<E>","org.ktorm.entity.toList"]},{"name":"fun <E> Tuple6<E, E, E, E, E, E>.toList(): List<E>","description":"org.ktorm.entity.toList","location":"ktorm-core/org.ktorm.entity/to-list.html","searchKeys":["toList","fun <E> Tuple6<E, E, E, E, E, E>.toList(): List<E>","org.ktorm.entity.toList"]},{"name":"fun <E> Tuple7<E, E, E, E, E, E, E>.toList(): List<E>","description":"org.ktorm.entity.toList","location":"ktorm-core/org.ktorm.entity/to-list.html","searchKeys":["toList","fun <E> Tuple7<E, E, E, E, E, E, E>.toList(): List<E>","org.ktorm.entity.toList"]},{"name":"fun <E> Tuple8<E, E, E, E, E, E, E, E>.toList(): List<E>","description":"org.ktorm.entity.toList","location":"ktorm-core/org.ktorm.entity/to-list.html","searchKeys":["toList","fun <E> Tuple8<E, E, E, E, E, E, E, E>.toList(): List<E>","org.ktorm.entity.toList"]},{"name":"fun <E> Tuple9<E, E, E, E, E, E, E, E, E>.toList(): List<E>","description":"org.ktorm.entity.toList","location":"ktorm-core/org.ktorm.entity/to-list.html","searchKeys":["toList","fun <E> Tuple9<E, E, E, E, E, E, E, E, E>.toList(): List<E>","org.ktorm.entity.toList"]},{"name":"fun <R : Any> CaseWhen<*, R>.END(): CaseWhenExpression<R>","description":"org.ktorm.dsl.END","location":"ktorm-core/org.ktorm.dsl/-e-n-d.html","searchKeys":["END","fun <R : Any> CaseWhen<*, R>.END(): CaseWhenExpression<R>","org.ktorm.dsl.END"]},{"name":"fun <T : Any, R : Any> CaseWhen<T, R>.ELSE(result: ColumnDeclaring<R>): CaseWhen<T, R>","description":"org.ktorm.dsl.ELSE","location":"ktorm-core/org.ktorm.dsl/-e-l-s-e.html","searchKeys":["ELSE","fun <T : Any, R : Any> CaseWhen<T, R>.ELSE(result: ColumnDeclaring<R>): CaseWhen<T, R>","org.ktorm.dsl.ELSE"]},{"name":"fun <T : Any, R : Any> CaseWhen<T, R>.WHEN(condition: ColumnDeclaring<T>): WhenContinuation<T, R>","description":"org.ktorm.dsl.WHEN","location":"ktorm-core/org.ktorm.dsl/-w-h-e-n.html","searchKeys":["WHEN","fun <T : Any, R : Any> CaseWhen<T, R>.WHEN(condition: ColumnDeclaring<T>): WhenContinuation<T, R>","org.ktorm.dsl.WHEN"]},{"name":"fun <T : Any, R : Any> WhenContinuation<T, Nothing>.THEN(result: ColumnDeclaring<R>): CaseWhen<T, R>","description":"org.ktorm.dsl.THEN","location":"ktorm-core/org.ktorm.dsl/-t-h-e-n.html","searchKeys":["THEN","fun <T : Any, R : Any> WhenContinuation<T, Nothing>.THEN(result: ColumnDeclaring<R>): CaseWhen<T, R>","org.ktorm.dsl.THEN"]},{"name":"fun <T : Any, R : Any> WhenContinuation<T, R>.THEN(result: ColumnDeclaring<R>): CaseWhen<T, R>","description":"org.ktorm.dsl.THEN","location":"ktorm-core/org.ktorm.dsl/-t-h-e-n.html","searchKeys":["THEN","fun <T : Any, R : Any> WhenContinuation<T, R>.THEN(result: ColumnDeclaring<R>): CaseWhen<T, R>","org.ktorm.dsl.THEN"]},{"name":"fun <T : Any> AggregateExpression<T>.over(window: WindowSpecificationExpression = window()): WindowFunctionExpression<T>","description":"org.ktorm.dsl.over","location":"ktorm-core/org.ktorm.dsl/over.html","searchKeys":["over","fun <T : Any> AggregateExpression<T>.over(window: WindowSpecificationExpression = window()): WindowFunctionExpression<T>","org.ktorm.dsl.over"]},{"name":"fun <T : Any> CASE(operand: ColumnDeclaring<T>): CaseWhen<T, Nothing>","description":"org.ktorm.dsl.CASE","location":"ktorm-core/org.ktorm.dsl/-c-a-s-e.html","searchKeys":["CASE","fun <T : Any> CASE(operand: ColumnDeclaring<T>): CaseWhen<T, Nothing>","org.ktorm.dsl.CASE"]},{"name":"fun <T : Any> CachedRowSet.getGeneratedKey(primaryKey: Column<T>): T?","description":"org.ktorm.dsl.getGeneratedKey","location":"ktorm-core/org.ktorm.dsl/get-generated-key.html","searchKeys":["getGeneratedKey","fun <T : Any> CachedRowSet.getGeneratedKey(primaryKey: Column<T>): T?","org.ktorm.dsl.getGeneratedKey"]},{"name":"fun <T : Any> ColumnDeclaring<*>.cast(sqlType: SqlType<T>): CastingExpression<T>","description":"org.ktorm.dsl.cast","location":"ktorm-core/org.ktorm.dsl/cast.html","searchKeys":["cast","fun <T : Any> ColumnDeclaring<*>.cast(sqlType: SqlType<T>): CastingExpression<T>","org.ktorm.dsl.cast"]},{"name":"fun <T : Any> ColumnDeclaring<T>.inList(vararg list: T): InListExpression","description":"org.ktorm.dsl.inList","location":"ktorm-core/org.ktorm.dsl/in-list.html","searchKeys":["inList","fun <T : Any> ColumnDeclaring<T>.inList(vararg list: T): InListExpression","org.ktorm.dsl.inList"]},{"name":"fun <T : Any> ColumnDeclaring<T>.notInList(vararg list: T): InListExpression","description":"org.ktorm.dsl.notInList","location":"ktorm-core/org.ktorm.dsl/not-in-list.html","searchKeys":["notInList","fun <T : Any> ColumnDeclaring<T>.notInList(vararg list: T): InListExpression","org.ktorm.dsl.notInList"]},{"name":"fun <T : Any> WindowFunctionExpression<T>.over(window: WindowSpecificationExpression = window()): WindowFunctionExpression<T>","description":"org.ktorm.dsl.over","location":"ktorm-core/org.ktorm.dsl/over.html","searchKeys":["over","fun <T : Any> WindowFunctionExpression<T>.over(window: WindowSpecificationExpression = window()): WindowFunctionExpression<T>","org.ktorm.dsl.over"]},{"name":"fun <T : Any> firstValue(expr: ColumnDeclaring<T>): WindowFunctionExpression<T>","description":"org.ktorm.dsl.firstValue","location":"ktorm-core/org.ktorm.dsl/first-value.html","searchKeys":["firstValue","fun <T : Any> firstValue(expr: ColumnDeclaring<T>): WindowFunctionExpression<T>","org.ktorm.dsl.firstValue"]},{"name":"fun <T : Any> lag(expr: ColumnDeclaring<T>, offset: Int = 1, defVal: T? = null): WindowFunctionExpression<T>","description":"org.ktorm.dsl.lag","location":"ktorm-core/org.ktorm.dsl/lag.html","searchKeys":["lag","fun <T : Any> lag(expr: ColumnDeclaring<T>, offset: Int = 1, defVal: T? = null): WindowFunctionExpression<T>","org.ktorm.dsl.lag"]},{"name":"fun <T : Any> lag(expr: ColumnDeclaring<T>, offset: Int, defVal: ColumnDeclaring<T>): WindowFunctionExpression<T>","description":"org.ktorm.dsl.lag","location":"ktorm-core/org.ktorm.dsl/lag.html","searchKeys":["lag","fun <T : Any> lag(expr: ColumnDeclaring<T>, offset: Int, defVal: ColumnDeclaring<T>): WindowFunctionExpression<T>","org.ktorm.dsl.lag"]},{"name":"fun <T : Any> lastValue(expr: ColumnDeclaring<T>): WindowFunctionExpression<T>","description":"org.ktorm.dsl.lastValue","location":"ktorm-core/org.ktorm.dsl/last-value.html","searchKeys":["lastValue","fun <T : Any> lastValue(expr: ColumnDeclaring<T>): WindowFunctionExpression<T>","org.ktorm.dsl.lastValue"]},{"name":"fun <T : Any> lead(expr: ColumnDeclaring<T>, offset: Int = 1, defVal: T? = null): WindowFunctionExpression<T>","description":"org.ktorm.dsl.lead","location":"ktorm-core/org.ktorm.dsl/lead.html","searchKeys":["lead","fun <T : Any> lead(expr: ColumnDeclaring<T>, offset: Int = 1, defVal: T? = null): WindowFunctionExpression<T>","org.ktorm.dsl.lead"]},{"name":"fun <T : Any> lead(expr: ColumnDeclaring<T>, offset: Int, defVal: ColumnDeclaring<T>): WindowFunctionExpression<T>","description":"org.ktorm.dsl.lead","location":"ktorm-core/org.ktorm.dsl/lead.html","searchKeys":["lead","fun <T : Any> lead(expr: ColumnDeclaring<T>, offset: Int, defVal: ColumnDeclaring<T>): WindowFunctionExpression<T>","org.ktorm.dsl.lead"]},{"name":"fun <T : Any> nthValue(expr: ColumnDeclaring<T>, n: Int): WindowFunctionExpression<T>","description":"org.ktorm.dsl.nthValue","location":"ktorm-core/org.ktorm.dsl/nth-value.html","searchKeys":["nthValue","fun <T : Any> nthValue(expr: ColumnDeclaring<T>, n: Int): WindowFunctionExpression<T>","org.ktorm.dsl.nthValue"]},{"name":"fun <T : BaseTable<*>> Database.batchInsert(table: T, block: BatchInsertStatementBuilder<T>.() -> Unit): IntArray","description":"org.ktorm.dsl.batchInsert","location":"ktorm-core/org.ktorm.dsl/batch-insert.html","searchKeys":["batchInsert","fun <T : BaseTable<*>> Database.batchInsert(table: T, block: BatchInsertStatementBuilder<T>.() -> Unit): IntArray","org.ktorm.dsl.batchInsert"]},{"name":"fun <T : BaseTable<*>> Database.batchUpdate(table: T, block: BatchUpdateStatementBuilder<T>.() -> Unit): IntArray","description":"org.ktorm.dsl.batchUpdate","location":"ktorm-core/org.ktorm.dsl/batch-update.html","searchKeys":["batchUpdate","fun <T : BaseTable<*>> Database.batchUpdate(table: T, block: BatchUpdateStatementBuilder<T>.() -> Unit): IntArray","org.ktorm.dsl.batchUpdate"]},{"name":"fun <T : BaseTable<*>> Database.delete(table: T, predicate: (T) -> ColumnDeclaring<Boolean>): Int","description":"org.ktorm.dsl.delete","location":"ktorm-core/org.ktorm.dsl/delete.html","searchKeys":["delete","fun <T : BaseTable<*>> Database.delete(table: T, predicate: (T) -> ColumnDeclaring<Boolean>): Int","org.ktorm.dsl.delete"]},{"name":"fun <T : BaseTable<*>> Database.insert(table: T, block: AssignmentsBuilder.(T) -> Unit): Int","description":"org.ktorm.dsl.insert","location":"ktorm-core/org.ktorm.dsl/insert.html","searchKeys":["insert","fun <T : BaseTable<*>> Database.insert(table: T, block: AssignmentsBuilder.(T) -> Unit): Int","org.ktorm.dsl.insert"]},{"name":"fun <T : BaseTable<*>> Database.insertAndGenerateKey(table: T, block: AssignmentsBuilder.(T) -> Unit): Any","description":"org.ktorm.dsl.insertAndGenerateKey","location":"ktorm-core/org.ktorm.dsl/insert-and-generate-key.html","searchKeys":["insertAndGenerateKey","fun <T : BaseTable<*>> Database.insertAndGenerateKey(table: T, block: AssignmentsBuilder.(T) -> Unit): Any","org.ktorm.dsl.insertAndGenerateKey"]},{"name":"fun <T : BaseTable<*>> Database.update(table: T, block: UpdateStatementBuilder.(T) -> Unit): Int","description":"org.ktorm.dsl.update","location":"ktorm-core/org.ktorm.dsl/update.html","searchKeys":["update","fun <T : BaseTable<*>> Database.update(table: T, block: UpdateStatementBuilder.(T) -> Unit): Int","org.ktorm.dsl.update"]},{"name":"fun <T : BaseTable<Nothing>> Database.sequenceOf(table: T, withReferences: Boolean = true): EntitySequence<Nothing, T>","description":"org.ktorm.entity.sequenceOf","location":"ktorm-core/org.ktorm.entity/sequence-of.html","searchKeys":["sequenceOf","fun <T : BaseTable<Nothing>> Database.sequenceOf(table: T, withReferences: Boolean = true): EntitySequence<Nothing, T>","org.ktorm.entity.sequenceOf"]},{"name":"fun <T : ResultSet> T.asIterable(): Iterable<T>","description":"org.ktorm.database.asIterable","location":"ktorm-core/org.ktorm.database/as-iterable.html","searchKeys":["asIterable","fun <T : ResultSet> T.asIterable(): Iterable<T>","org.ktorm.database.asIterable"]},{"name":"fun <T : SqlExpressionVisitor> KClass<T>.newVisitorInstance(interceptor: SqlExpressionVisitorInterceptor): T","description":"org.ktorm.expression.newVisitorInstance","location":"ktorm-core/org.ktorm.expression/new-visitor-instance.html","searchKeys":["newVisitorInstance","fun <T : SqlExpressionVisitor> KClass<T>.newVisitorInstance(interceptor: SqlExpressionVisitorInterceptor): T","org.ktorm.expression.newVisitorInstance"]},{"name":"fun BaseTable<*>.blob(name: String): Column<ByteArray>","description":"org.ktorm.schema.blob","location":"ktorm-core/org.ktorm.schema/blob.html","searchKeys":["blob","fun BaseTable<*>.blob(name: String): Column<ByteArray>","org.ktorm.schema.blob"]},{"name":"fun BaseTable<*>.boolean(name: String): Column<Boolean>","description":"org.ktorm.schema.boolean","location":"ktorm-core/org.ktorm.schema/boolean.html","searchKeys":["boolean","fun BaseTable<*>.boolean(name: String): Column<Boolean>","org.ktorm.schema.boolean"]},{"name":"fun BaseTable<*>.bytes(name: String): Column<ByteArray>","description":"org.ktorm.schema.bytes","location":"ktorm-core/org.ktorm.schema/bytes.html","searchKeys":["bytes","fun BaseTable<*>.bytes(name: String): Column<ByteArray>","org.ktorm.schema.bytes"]},{"name":"fun BaseTable<*>.date(name: String): Column<LocalDate>","description":"org.ktorm.schema.date","location":"ktorm-core/org.ktorm.schema/date.html","searchKeys":["date","fun BaseTable<*>.date(name: String): Column<LocalDate>","org.ktorm.schema.date"]},{"name":"fun BaseTable<*>.datetime(name: String): Column<LocalDateTime>","description":"org.ktorm.schema.datetime","location":"ktorm-core/org.ktorm.schema/datetime.html","searchKeys":["datetime","fun BaseTable<*>.datetime(name: String): Column<LocalDateTime>","org.ktorm.schema.datetime"]},{"name":"fun BaseTable<*>.decimal(name: String): Column<BigDecimal>","description":"org.ktorm.schema.decimal","location":"ktorm-core/org.ktorm.schema/decimal.html","searchKeys":["decimal","fun BaseTable<*>.decimal(name: String): Column<BigDecimal>","org.ktorm.schema.decimal"]},{"name":"fun BaseTable<*>.double(name: String): Column<Double>","description":"org.ktorm.schema.double","location":"ktorm-core/org.ktorm.schema/double.html","searchKeys":["double","fun BaseTable<*>.double(name: String): Column<Double>","org.ktorm.schema.double"]},{"name":"fun BaseTable<*>.float(name: String): Column<Float>","description":"org.ktorm.schema.float","location":"ktorm-core/org.ktorm.schema/float.html","searchKeys":["float","fun BaseTable<*>.float(name: String): Column<Float>","org.ktorm.schema.float"]},{"name":"fun BaseTable<*>.int(name: String): Column<Int>","description":"org.ktorm.schema.int","location":"ktorm-core/org.ktorm.schema/int.html","searchKeys":["int","fun BaseTable<*>.int(name: String): Column<Int>","org.ktorm.schema.int"]},{"name":"fun BaseTable<*>.jdbcDate(name: String): Column<Date>","description":"org.ktorm.schema.jdbcDate","location":"ktorm-core/org.ktorm.schema/jdbc-date.html","searchKeys":["jdbcDate","fun BaseTable<*>.jdbcDate(name: String): Column<Date>","org.ktorm.schema.jdbcDate"]},{"name":"fun BaseTable<*>.jdbcTime(name: String): Column<Time>","description":"org.ktorm.schema.jdbcTime","location":"ktorm-core/org.ktorm.schema/jdbc-time.html","searchKeys":["jdbcTime","fun BaseTable<*>.jdbcTime(name: String): Column<Time>","org.ktorm.schema.jdbcTime"]},{"name":"fun BaseTable<*>.jdbcTimestamp(name: String): Column<Timestamp>","description":"org.ktorm.schema.jdbcTimestamp","location":"ktorm-core/org.ktorm.schema/jdbc-timestamp.html","searchKeys":["jdbcTimestamp","fun BaseTable<*>.jdbcTimestamp(name: String): Column<Timestamp>","org.ktorm.schema.jdbcTimestamp"]},{"name":"fun BaseTable<*>.long(name: String): Column<Long>","description":"org.ktorm.schema.long","location":"ktorm-core/org.ktorm.schema/long.html","searchKeys":["long","fun BaseTable<*>.long(name: String): Column<Long>","org.ktorm.schema.long"]},{"name":"fun BaseTable<*>.monthDay(name: String): Column<MonthDay>","description":"org.ktorm.schema.monthDay","location":"ktorm-core/org.ktorm.schema/month-day.html","searchKeys":["monthDay","fun BaseTable<*>.monthDay(name: String): Column<MonthDay>","org.ktorm.schema.monthDay"]},{"name":"fun BaseTable<*>.short(name: String): Column<Short>","description":"org.ktorm.schema.short","location":"ktorm-core/org.ktorm.schema/short.html","searchKeys":["short","fun BaseTable<*>.short(name: String): Column<Short>","org.ktorm.schema.short"]},{"name":"fun BaseTable<*>.text(name: String): Column<String>","description":"org.ktorm.schema.text","location":"ktorm-core/org.ktorm.schema/text.html","searchKeys":["text","fun BaseTable<*>.text(name: String): Column<String>","org.ktorm.schema.text"]},{"name":"fun BaseTable<*>.time(name: String): Column<LocalTime>","description":"org.ktorm.schema.time","location":"ktorm-core/org.ktorm.schema/time.html","searchKeys":["time","fun BaseTable<*>.time(name: String): Column<LocalTime>","org.ktorm.schema.time"]},{"name":"fun BaseTable<*>.timestamp(name: String): Column<Instant>","description":"org.ktorm.schema.timestamp","location":"ktorm-core/org.ktorm.schema/timestamp.html","searchKeys":["timestamp","fun BaseTable<*>.timestamp(name: String): Column<Instant>","org.ktorm.schema.timestamp"]},{"name":"fun BaseTable<*>.uuid(name: String): Column<UUID>","description":"org.ktorm.schema.uuid","location":"ktorm-core/org.ktorm.schema/uuid.html","searchKeys":["uuid","fun BaseTable<*>.uuid(name: String): Column<UUID>","org.ktorm.schema.uuid"]},{"name":"fun BaseTable<*>.varchar(name: String): Column<String>","description":"org.ktorm.schema.varchar","location":"ktorm-core/org.ktorm.schema/varchar.html","searchKeys":["varchar","fun BaseTable<*>.varchar(name: String): Column<String>","org.ktorm.schema.varchar"]},{"name":"fun BaseTable<*>.year(name: String): Column<Year>","description":"org.ktorm.schema.year","location":"ktorm-core/org.ktorm.schema/year.html","searchKeys":["year","fun BaseTable<*>.year(name: String): Column<Year>","org.ktorm.schema.year"]},{"name":"fun BaseTable<*>.yearMonth(name: String): Column<YearMonth>","description":"org.ktorm.schema.yearMonth","location":"ktorm-core/org.ktorm.schema/year-month.html","searchKeys":["yearMonth","fun BaseTable<*>.yearMonth(name: String): Column<YearMonth>","org.ktorm.schema.yearMonth"]},{"name":"fun CASE(): CaseWhen<Boolean, Nothing>","description":"org.ktorm.dsl.CASE","location":"ktorm-core/org.ktorm.dsl/-c-a-s-e.html","searchKeys":["CASE","fun CASE(): CaseWhen<Boolean, Nothing>","org.ktorm.dsl.CASE"]},{"name":"fun ColumnDeclaring<*>.asc(): OrderByExpression","description":"org.ktorm.dsl.asc","location":"ktorm-core/org.ktorm.dsl/asc.html","searchKeys":["asc","fun ColumnDeclaring<*>.asc(): OrderByExpression","org.ktorm.dsl.asc"]},{"name":"fun ColumnDeclaring<*>.desc(): OrderByExpression","description":"org.ktorm.dsl.desc","location":"ktorm-core/org.ktorm.dsl/desc.html","searchKeys":["desc","fun ColumnDeclaring<*>.desc(): OrderByExpression","org.ktorm.dsl.desc"]},{"name":"fun ColumnDeclaring<*>.isNotNull(): UnaryExpression<Boolean>","description":"org.ktorm.dsl.isNotNull","location":"ktorm-core/org.ktorm.dsl/is-not-null.html","searchKeys":["isNotNull","fun ColumnDeclaring<*>.isNotNull(): UnaryExpression<Boolean>","org.ktorm.dsl.isNotNull"]},{"name":"fun ColumnDeclaring<*>.isNull(): UnaryExpression<Boolean>","description":"org.ktorm.dsl.isNull","location":"ktorm-core/org.ktorm.dsl/is-null.html","searchKeys":["isNull","fun ColumnDeclaring<*>.isNull(): UnaryExpression<Boolean>","org.ktorm.dsl.isNull"]},{"name":"fun ColumnDeclaring<Boolean>.toInt(): CastingExpression<Int>","description":"org.ktorm.dsl.toInt","location":"ktorm-core/org.ktorm.dsl/to-int.html","searchKeys":["toInt","fun ColumnDeclaring<Boolean>.toInt(): CastingExpression<Int>","org.ktorm.dsl.toInt"]},{"name":"fun ColumnDeclaring<out Number>.toDouble(): CastingExpression<Double>","description":"org.ktorm.dsl.toDouble","location":"ktorm-core/org.ktorm.dsl/to-double.html","searchKeys":["toDouble","fun ColumnDeclaring<out Number>.toDouble(): CastingExpression<Double>","org.ktorm.dsl.toDouble"]},{"name":"fun ColumnDeclaring<out Number>.toFloat(): CastingExpression<Float>","description":"org.ktorm.dsl.toFloat","location":"ktorm-core/org.ktorm.dsl/to-float.html","searchKeys":["toFloat","fun ColumnDeclaring<out Number>.toFloat(): CastingExpression<Float>","org.ktorm.dsl.toFloat"]},{"name":"fun ColumnDeclaring<out Number>.toInt(): CastingExpression<Int>","description":"org.ktorm.dsl.toInt","location":"ktorm-core/org.ktorm.dsl/to-int.html","searchKeys":["toInt","fun ColumnDeclaring<out Number>.toInt(): CastingExpression<Int>","org.ktorm.dsl.toInt"]},{"name":"fun ColumnDeclaring<out Number>.toLong(): CastingExpression<Long>","description":"org.ktorm.dsl.toLong","location":"ktorm-core/org.ktorm.dsl/to-long.html","searchKeys":["toLong","fun ColumnDeclaring<out Number>.toLong(): CastingExpression<Long>","org.ktorm.dsl.toLong"]},{"name":"fun ColumnDeclaring<out Number>.toShort(): CastingExpression<Short>","description":"org.ktorm.dsl.toShort","location":"ktorm-core/org.ktorm.dsl/to-short.html","searchKeys":["toShort","fun ColumnDeclaring<out Number>.toShort(): CastingExpression<Short>","org.ktorm.dsl.toShort"]},{"name":"fun Database.deleteAll(table: BaseTable<*>): Int","description":"org.ktorm.dsl.deleteAll","location":"ktorm-core/org.ktorm.dsl/delete-all.html","searchKeys":["deleteAll","fun Database.deleteAll(table: BaseTable<*>): Int","org.ktorm.dsl.deleteAll"]},{"name":"fun Database.from(table: BaseTable<*>): QuerySource","description":"org.ktorm.dsl.from","location":"ktorm-core/org.ktorm.dsl/from.html","searchKeys":["from","fun Database.from(table: BaseTable<*>): QuerySource","org.ktorm.dsl.from"]},{"name":"fun Entity<*>.getColumnValue(binding: ColumnBinding): Any?","description":"org.ktorm.entity.EntityExtensionsApi.getColumnValue","location":"ktorm-core/org.ktorm.entity/-entity-extensions-api/get-column-value.html","searchKeys":["getColumnValue","fun Entity<*>.getColumnValue(binding: ColumnBinding): Any?","org.ktorm.entity.EntityExtensionsApi.getColumnValue"]},{"name":"fun Entity<*>.hasColumnValue(binding: ColumnBinding): Boolean","description":"org.ktorm.entity.EntityExtensionsApi.hasColumnValue","location":"ktorm-core/org.ktorm.entity/-entity-extensions-api/has-column-value.html","searchKeys":["hasColumnValue","fun Entity<*>.hasColumnValue(binding: ColumnBinding): Boolean","org.ktorm.entity.EntityExtensionsApi.hasColumnValue"]},{"name":"fun Entity<*>.isAttached(): Boolean","description":"org.ktorm.entity.EntityExtensionsApi.isAttached","location":"ktorm-core/org.ktorm.entity/-entity-extensions-api/is-attached.html","searchKeys":["isAttached","fun Entity<*>.isAttached(): Boolean","org.ktorm.entity.EntityExtensionsApi.isAttached"]},{"name":"fun Entity<*>.setColumnValue(binding: ColumnBinding, value: Any?)","description":"org.ktorm.entity.EntityExtensionsApi.setColumnValue","location":"ktorm-core/org.ktorm.entity/-entity-extensions-api/set-column-value.html","searchKeys":["setColumnValue","fun Entity<*>.setColumnValue(binding: ColumnBinding, value: Any?)","org.ktorm.entity.EntityExtensionsApi.setColumnValue"]},{"name":"fun Iterable<ColumnDeclaring<Boolean>>.combineConditions(ifEmpty: Boolean = true): ColumnDeclaring<Boolean>","description":"org.ktorm.dsl.combineConditions","location":"ktorm-core/org.ktorm.dsl/combine-conditions.html","searchKeys":["combineConditions","fun Iterable<ColumnDeclaring<Boolean>>.combineConditions(ifEmpty: Boolean = true): ColumnDeclaring<Boolean>","org.ktorm.dsl.combineConditions"]},{"name":"fun PreparedStatement.setArguments(args: List<ArgumentExpression<*>>)","description":"org.ktorm.database.setArguments","location":"ktorm-core/org.ktorm.database/set-arguments.html","searchKeys":["setArguments","fun PreparedStatement.setArguments(args: List<ArgumentExpression<*>>)","org.ktorm.database.setArguments"]},{"name":"fun Query.asIterable(): Iterable<QueryRowSet>","description":"org.ktorm.dsl.asIterable","location":"ktorm-core/org.ktorm.dsl/as-iterable.html","searchKeys":["asIterable","fun Query.asIterable(): Iterable<QueryRowSet>","org.ktorm.dsl.asIterable"]},{"name":"fun Query.groupBy(columns: Collection<ColumnDeclaring<*>>): Query","description":"org.ktorm.dsl.groupBy","location":"ktorm-core/org.ktorm.dsl/group-by.html","searchKeys":["groupBy","fun Query.groupBy(columns: Collection<ColumnDeclaring<*>>): Query","org.ktorm.dsl.groupBy"]},{"name":"fun Query.groupBy(vararg columns: ColumnDeclaring<*>): Query","description":"org.ktorm.dsl.groupBy","location":"ktorm-core/org.ktorm.dsl/group-by.html","searchKeys":["groupBy","fun Query.groupBy(vararg columns: ColumnDeclaring<*>): Query","org.ktorm.dsl.groupBy"]},{"name":"fun Query.having(condition: ColumnDeclaring<Boolean>): Query","description":"org.ktorm.dsl.having","location":"ktorm-core/org.ktorm.dsl/having.html","searchKeys":["having","fun Query.having(condition: ColumnDeclaring<Boolean>): Query","org.ktorm.dsl.having"]},{"name":"fun Query.insertTo(table: BaseTable<*>, vararg columns: Column<*>): Int","description":"org.ktorm.dsl.insertTo","location":"ktorm-core/org.ktorm.dsl/insert-to.html","searchKeys":["insertTo","fun Query.insertTo(table: BaseTable<*>, vararg columns: Column<*>): Int","org.ktorm.dsl.insertTo"]},{"name":"fun Query.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (row: QueryRowSet) -> CharSequence): String","description":"org.ktorm.dsl.joinToString","location":"ktorm-core/org.ktorm.dsl/join-to-string.html","searchKeys":["joinToString","fun Query.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: (row: QueryRowSet) -> CharSequence): String","org.ktorm.dsl.joinToString"]},{"name":"fun Query.limit(n: Int): Query","description":"org.ktorm.dsl.limit","location":"ktorm-core/org.ktorm.dsl/limit.html","searchKeys":["limit","fun Query.limit(n: Int): Query","org.ktorm.dsl.limit"]},{"name":"fun Query.limit(offset: Int?, limit: Int?): Query","description":"org.ktorm.dsl.limit","location":"ktorm-core/org.ktorm.dsl/limit.html","searchKeys":["limit","fun Query.limit(offset: Int?, limit: Int?): Query","org.ktorm.dsl.limit"]},{"name":"fun Query.offset(n: Int): Query","description":"org.ktorm.dsl.offset","location":"ktorm-core/org.ktorm.dsl/offset.html","searchKeys":["offset","fun Query.offset(n: Int): Query","org.ktorm.dsl.offset"]},{"name":"fun Query.orderBy(orders: Collection<OrderByExpression>): Query","description":"org.ktorm.dsl.orderBy","location":"ktorm-core/org.ktorm.dsl/order-by.html","searchKeys":["orderBy","fun Query.orderBy(orders: Collection<OrderByExpression>): Query","org.ktorm.dsl.orderBy"]},{"name":"fun Query.orderBy(vararg orders: OrderByExpression): Query","description":"org.ktorm.dsl.orderBy","location":"ktorm-core/org.ktorm.dsl/order-by.html","searchKeys":["orderBy","fun Query.orderBy(vararg orders: OrderByExpression): Query","org.ktorm.dsl.orderBy"]},{"name":"fun Query.union(right: Query): Query","description":"org.ktorm.dsl.union","location":"ktorm-core/org.ktorm.dsl/union.html","searchKeys":["union","fun Query.union(right: Query): Query","org.ktorm.dsl.union"]},{"name":"fun Query.unionAll(right: Query): Query","description":"org.ktorm.dsl.unionAll","location":"ktorm-core/org.ktorm.dsl/union-all.html","searchKeys":["unionAll","fun Query.unionAll(right: Query): Query","org.ktorm.dsl.unionAll"]},{"name":"fun Query.where(condition: ColumnDeclaring<Boolean>): Query","description":"org.ktorm.dsl.where","location":"ktorm-core/org.ktorm.dsl/where.html","searchKeys":["where","fun Query.where(condition: ColumnDeclaring<Boolean>): Query","org.ktorm.dsl.where"]},{"name":"fun Query.withIndex(): Iterable<IndexedValue<QueryRowSet>>","description":"org.ktorm.dsl.withIndex","location":"ktorm-core/org.ktorm.dsl/with-index.html","searchKeys":["withIndex","fun Query.withIndex(): Iterable<IndexedValue<QueryRowSet>>","org.ktorm.dsl.withIndex"]},{"name":"fun QuerySource.crossJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.dsl.crossJoin","location":"ktorm-core/org.ktorm.dsl/cross-join.html","searchKeys":["crossJoin","fun QuerySource.crossJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.dsl.crossJoin"]},{"name":"fun QuerySource.fullJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.dsl.fullJoin","location":"ktorm-core/org.ktorm.dsl/full-join.html","searchKeys":["fullJoin","fun QuerySource.fullJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.dsl.fullJoin"]},{"name":"fun QuerySource.innerJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.dsl.innerJoin","location":"ktorm-core/org.ktorm.dsl/inner-join.html","searchKeys":["innerJoin","fun QuerySource.innerJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.dsl.innerJoin"]},{"name":"fun QuerySource.joinReferencesAndSelect(): Query","description":"org.ktorm.dsl.joinReferencesAndSelect","location":"ktorm-core/org.ktorm.dsl/join-references-and-select.html","searchKeys":["joinReferencesAndSelect","fun QuerySource.joinReferencesAndSelect(): Query","org.ktorm.dsl.joinReferencesAndSelect"]},{"name":"fun QuerySource.leftJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.dsl.leftJoin","location":"ktorm-core/org.ktorm.dsl/left-join.html","searchKeys":["leftJoin","fun QuerySource.leftJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.dsl.leftJoin"]},{"name":"fun QuerySource.rightJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.dsl.rightJoin","location":"ktorm-core/org.ktorm.dsl/right-join.html","searchKeys":["rightJoin","fun QuerySource.rightJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.dsl.rightJoin"]},{"name":"fun QuerySource.select(columns: Collection<ColumnDeclaring<*>>): Query","description":"org.ktorm.dsl.select","location":"ktorm-core/org.ktorm.dsl/select.html","searchKeys":["select","fun QuerySource.select(columns: Collection<ColumnDeclaring<*>>): Query","org.ktorm.dsl.select"]},{"name":"fun QuerySource.select(vararg columns: ColumnDeclaring<*>): Query","description":"org.ktorm.dsl.select","location":"ktorm-core/org.ktorm.dsl/select.html","searchKeys":["select","fun QuerySource.select(vararg columns: ColumnDeclaring<*>): Query","org.ktorm.dsl.select"]},{"name":"fun QuerySource.selectDistinct(columns: Collection<ColumnDeclaring<*>>): Query","description":"org.ktorm.dsl.selectDistinct","location":"ktorm-core/org.ktorm.dsl/select-distinct.html","searchKeys":["selectDistinct","fun QuerySource.selectDistinct(columns: Collection<ColumnDeclaring<*>>): Query","org.ktorm.dsl.selectDistinct"]},{"name":"fun QuerySource.selectDistinct(vararg columns: ColumnDeclaring<*>): Query","description":"org.ktorm.dsl.selectDistinct","location":"ktorm-core/org.ktorm.dsl/select-distinct.html","searchKeys":["selectDistinct","fun QuerySource.selectDistinct(vararg columns: ColumnDeclaring<*>): Query","org.ktorm.dsl.selectDistinct"]},{"name":"fun WindowSpecificationExpression.orderBy(orders: Collection<OrderByExpression>): WindowSpecificationExpression","description":"org.ktorm.dsl.orderBy","location":"ktorm-core/org.ktorm.dsl/order-by.html","searchKeys":["orderBy","fun WindowSpecificationExpression.orderBy(orders: Collection<OrderByExpression>): WindowSpecificationExpression","org.ktorm.dsl.orderBy"]},{"name":"fun WindowSpecificationExpression.orderBy(vararg orders: OrderByExpression): WindowSpecificationExpression","description":"org.ktorm.dsl.orderBy","location":"ktorm-core/org.ktorm.dsl/order-by.html","searchKeys":["orderBy","fun WindowSpecificationExpression.orderBy(vararg orders: OrderByExpression): WindowSpecificationExpression","org.ktorm.dsl.orderBy"]},{"name":"fun WindowSpecificationExpression.partitionBy(columns: Collection<ColumnDeclaring<*>>): WindowSpecificationExpression","description":"org.ktorm.dsl.partitionBy","location":"ktorm-core/org.ktorm.dsl/partition-by.html","searchKeys":["partitionBy","fun WindowSpecificationExpression.partitionBy(columns: Collection<ColumnDeclaring<*>>): WindowSpecificationExpression","org.ktorm.dsl.partitionBy"]},{"name":"fun WindowSpecificationExpression.partitionBy(vararg columns: ColumnDeclaring<*>): WindowSpecificationExpression","description":"org.ktorm.dsl.partitionBy","location":"ktorm-core/org.ktorm.dsl/partition-by.html","searchKeys":["partitionBy","fun WindowSpecificationExpression.partitionBy(vararg columns: ColumnDeclaring<*>): WindowSpecificationExpression","org.ktorm.dsl.partitionBy"]},{"name":"fun WindowSpecificationExpression.range(bound: WindowFrameBoundExpression): WindowSpecificationExpression","description":"org.ktorm.dsl.range","location":"ktorm-core/org.ktorm.dsl/range.html","searchKeys":["range","fun WindowSpecificationExpression.range(bound: WindowFrameBoundExpression): WindowSpecificationExpression","org.ktorm.dsl.range"]},{"name":"fun WindowSpecificationExpression.rangeBetween(start: WindowFrameBoundExpression, end: WindowFrameBoundExpression): WindowSpecificationExpression","description":"org.ktorm.dsl.rangeBetween","location":"ktorm-core/org.ktorm.dsl/range-between.html","searchKeys":["rangeBetween","fun WindowSpecificationExpression.rangeBetween(start: WindowFrameBoundExpression, end: WindowFrameBoundExpression): WindowSpecificationExpression","org.ktorm.dsl.rangeBetween"]},{"name":"fun WindowSpecificationExpression.rows(bound: WindowFrameBoundExpression): WindowSpecificationExpression","description":"org.ktorm.dsl.rows","location":"ktorm-core/org.ktorm.dsl/rows.html","searchKeys":["rows","fun WindowSpecificationExpression.rows(bound: WindowFrameBoundExpression): WindowSpecificationExpression","org.ktorm.dsl.rows"]},{"name":"fun WindowSpecificationExpression.rowsBetween(start: WindowFrameBoundExpression, end: WindowFrameBoundExpression): WindowSpecificationExpression","description":"org.ktorm.dsl.rowsBetween","location":"ktorm-core/org.ktorm.dsl/rows-between.html","searchKeys":["rowsBetween","fun WindowSpecificationExpression.rowsBetween(start: WindowFrameBoundExpression, end: WindowFrameBoundExpression): WindowSpecificationExpression","org.ktorm.dsl.rowsBetween"]},{"name":"fun asKotlinGrouping(): Grouping<E, K?>","description":"org.ktorm.entity.EntityGrouping.asKotlinGrouping","location":"ktorm-core/org.ktorm.entity/-entity-grouping/as-kotlin-grouping.html","searchKeys":["asKotlinGrouping","fun asKotlinGrouping(): Grouping<E, K?>","org.ktorm.entity.EntityGrouping.asKotlinGrouping"]},{"name":"fun asKotlinSequence(): Sequence<E>","description":"org.ktorm.entity.EntitySequence.asKotlinSequence","location":"ktorm-core/org.ktorm.entity/-entity-sequence/as-kotlin-sequence.html","searchKeys":["asKotlinSequence","fun asKotlinSequence(): Sequence<E>","org.ktorm.entity.EntitySequence.asKotlinSequence"]},{"name":"fun connect(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","description":"org.ktorm.database.Database.Companion.connect","location":"ktorm-core/org.ktorm.database/-database/-companion/connect.html","searchKeys":["connect","fun connect(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","org.ktorm.database.Database.Companion.connect"]},{"name":"fun connect(dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null, connector: () -> Connection): Database","description":"org.ktorm.database.Database.Companion.connect","location":"ktorm-core/org.ktorm.database/-database/-companion/connect.html","searchKeys":["connect","fun connect(dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null, connector: () -> Connection): Database","org.ktorm.database.Database.Companion.connect"]},{"name":"fun connect(url: String, driver: String? = null, user: String? = null, password: String? = null, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","description":"org.ktorm.database.Database.Companion.connect","location":"ktorm-core/org.ktorm.database/-database/-companion/connect.html","searchKeys":["connect","fun connect(url: String, driver: String? = null, user: String? = null, password: String? = null, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","org.ktorm.database.Database.Companion.connect"]},{"name":"fun connectWithSpringSupport(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","description":"org.ktorm.database.Database.Companion.connectWithSpringSupport","location":"ktorm-core/org.ktorm.database/-database/-companion/connect-with-spring-support.html","searchKeys":["connectWithSpringSupport","fun connectWithSpringSupport(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","org.ktorm.database.Database.Companion.connectWithSpringSupport"]},{"name":"fun count(column: ColumnDeclaring<*>? = null): AggregateExpression<Int>","description":"org.ktorm.dsl.count","location":"ktorm-core/org.ktorm.dsl/count.html","searchKeys":["count","fun count(column: ColumnDeclaring<*>? = null): AggregateExpression<Int>","org.ktorm.dsl.count"]},{"name":"fun countDistinct(column: ColumnDeclaring<*>? = null): AggregateExpression<Int>","description":"org.ktorm.dsl.countDistinct","location":"ktorm-core/org.ktorm.dsl/count-distinct.html","searchKeys":["countDistinct","fun countDistinct(column: ColumnDeclaring<*>? = null): AggregateExpression<Int>","org.ktorm.dsl.countDistinct"]},{"name":"fun create(entityClass: KClass<*>): Entity<*>","description":"org.ktorm.entity.Entity.Companion.create","location":"ktorm-core/org.ktorm.entity/-entity/-companion/create.html","searchKeys":["create","fun create(entityClass: KClass<*>): Entity<*>","org.ktorm.entity.Entity.Companion.create"]},{"name":"fun createEntity(row: QueryRowSet, withReferences: Boolean = true): E","description":"org.ktorm.schema.BaseTable.createEntity","location":"ktorm-core/org.ktorm.schema/-base-table/create-entity.html","searchKeys":["createEntity","fun createEntity(row: QueryRowSet, withReferences: Boolean = true): E","org.ktorm.schema.BaseTable.createEntity"]},{"name":"fun cumeDist(): WindowFunctionExpression<Double>","description":"org.ktorm.dsl.cumeDist","location":"ktorm-core/org.ktorm.dsl/cume-dist.html","searchKeys":["cumeDist","fun cumeDist(): WindowFunctionExpression<Double>","org.ktorm.dsl.cumeDist"]},{"name":"fun currentRow(): WindowFrameBoundExpression","description":"org.ktorm.dsl.WindowFrames.currentRow","location":"ktorm-core/org.ktorm.dsl/-window-frames/current-row.html","searchKeys":["currentRow","fun currentRow(): WindowFrameBoundExpression","org.ktorm.dsl.WindowFrames.currentRow"]},{"name":"fun denseRank(): WindowFunctionExpression<Int>","description":"org.ktorm.dsl.denseRank","location":"ktorm-core/org.ktorm.dsl/dense-rank.html","searchKeys":["denseRank","fun denseRank(): WindowFunctionExpression<Int>","org.ktorm.dsl.denseRank"]},{"name":"fun detectDialectImplementation(): SqlDialect","description":"org.ktorm.database.detectDialectImplementation","location":"ktorm-core/org.ktorm.database/detect-dialect-implementation.html","searchKeys":["detectDialectImplementation","fun detectDialectImplementation(): SqlDialect","org.ktorm.database.detectDialectImplementation"]},{"name":"fun detectLoggerImplementation(): Logger","description":"org.ktorm.logging.detectLoggerImplementation","location":"ktorm-core/org.ktorm.logging/detect-logger-implementation.html","searchKeys":["detectLoggerImplementation","fun detectLoggerImplementation(): Logger","org.ktorm.logging.detectLoggerImplementation"]},{"name":"fun executeBatch(expressions: List<SqlExpression>): IntArray","description":"org.ktorm.database.Database.executeBatch","location":"ktorm-core/org.ktorm.database/-database/execute-batch.html","searchKeys":["executeBatch","fun executeBatch(expressions: List<SqlExpression>): IntArray","org.ktorm.database.Database.executeBatch"]},{"name":"fun executeQuery(expression: SqlExpression): CachedRowSet","description":"org.ktorm.database.Database.executeQuery","location":"ktorm-core/org.ktorm.database/-database/execute-query.html","searchKeys":["executeQuery","fun executeQuery(expression: SqlExpression): CachedRowSet","org.ktorm.database.Database.executeQuery"]},{"name":"fun executeUpdate(expression: SqlExpression): Int","description":"org.ktorm.database.Database.executeUpdate","location":"ktorm-core/org.ktorm.database/-database/execute-update.html","searchKeys":["executeUpdate","fun executeUpdate(expression: SqlExpression): Int","org.ktorm.database.Database.executeUpdate"]},{"name":"fun executeUpdateAndRetrieveKeys(expression: SqlExpression): Pair<Int, CachedRowSet>","description":"org.ktorm.database.Database.executeUpdateAndRetrieveKeys","location":"ktorm-core/org.ktorm.database/-database/execute-update-and-retrieve-keys.html","searchKeys":["executeUpdateAndRetrieveKeys","fun executeUpdateAndRetrieveKeys(expression: SqlExpression): Pair<Int, CachedRowSet>","org.ktorm.database.Database.executeUpdateAndRetrieveKeys"]},{"name":"fun exists(query: Query): ExistsExpression","description":"org.ktorm.dsl.exists","location":"ktorm-core/org.ktorm.dsl/exists.html","searchKeys":["exists","fun exists(query: Query): ExistsExpression","org.ktorm.dsl.exists"]},{"name":"fun formatExpression(expression: SqlExpression, beautifySql: Boolean = false, indentSize: Int = 2): Pair<String, List<ArgumentExpression<*>>>","description":"org.ktorm.database.Database.formatExpression","location":"ktorm-core/org.ktorm.database/-database/format-expression.html","searchKeys":["formatExpression","fun formatExpression(expression: SqlExpression, beautifySql: Boolean = false, indentSize: Int = 2): Pair<String, List<ArgumentExpression<*>>>","org.ktorm.database.Database.formatExpression"]},{"name":"fun getInstant(columnIndex: Int): Instant?","description":"org.ktorm.database.CachedRowSet.getInstant","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-instant.html","searchKeys":["getInstant","fun getInstant(columnIndex: Int): Instant?","org.ktorm.database.CachedRowSet.getInstant"]},{"name":"fun getInstant(columnLabel: String): Instant?","description":"org.ktorm.database.CachedRowSet.getInstant","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-instant.html","searchKeys":["getInstant","fun getInstant(columnLabel: String): Instant?","org.ktorm.database.CachedRowSet.getInstant"]},{"name":"fun getLocalDate(columnIndex: Int): LocalDate?","description":"org.ktorm.database.CachedRowSet.getLocalDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-local-date.html","searchKeys":["getLocalDate","fun getLocalDate(columnIndex: Int): LocalDate?","org.ktorm.database.CachedRowSet.getLocalDate"]},{"name":"fun getLocalDate(columnLabel: String): LocalDate?","description":"org.ktorm.database.CachedRowSet.getLocalDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-local-date.html","searchKeys":["getLocalDate","fun getLocalDate(columnLabel: String): LocalDate?","org.ktorm.database.CachedRowSet.getLocalDate"]},{"name":"fun getLocalDateTime(columnIndex: Int): LocalDateTime?","description":"org.ktorm.database.CachedRowSet.getLocalDateTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-local-date-time.html","searchKeys":["getLocalDateTime","fun getLocalDateTime(columnIndex: Int): LocalDateTime?","org.ktorm.database.CachedRowSet.getLocalDateTime"]},{"name":"fun getLocalDateTime(columnLabel: String): LocalDateTime?","description":"org.ktorm.database.CachedRowSet.getLocalDateTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-local-date-time.html","searchKeys":["getLocalDateTime","fun getLocalDateTime(columnLabel: String): LocalDateTime?","org.ktorm.database.CachedRowSet.getLocalDateTime"]},{"name":"fun getLocalTime(columnIndex: Int): LocalTime?","description":"org.ktorm.database.CachedRowSet.getLocalTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-local-time.html","searchKeys":["getLocalTime","fun getLocalTime(columnIndex: Int): LocalTime?","org.ktorm.database.CachedRowSet.getLocalTime"]},{"name":"fun getLocalTime(columnLabel: String): LocalTime?","description":"org.ktorm.database.CachedRowSet.getLocalTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-local-time.html","searchKeys":["getLocalTime","fun getLocalTime(columnLabel: String): LocalTime?","org.ktorm.database.CachedRowSet.getLocalTime"]},{"name":"fun hasColumn(column: Column<*>): Boolean","description":"org.ktorm.dsl.QueryRowSet.hasColumn","location":"ktorm-core/org.ktorm.dsl/-query-row-set/has-column.html","searchKeys":["hasColumn","fun hasColumn(column: Column<*>): Boolean","org.ktorm.dsl.QueryRowSet.hasColumn"]},{"name":"fun hasColumn(column: ColumnDeclaringExpression<*>): Boolean","description":"org.ktorm.dsl.QueryRowSet.hasColumn","location":"ktorm-core/org.ktorm.dsl/-query-row-set/has-column.html","searchKeys":["hasColumn","fun hasColumn(column: ColumnDeclaringExpression<*>): Boolean","org.ktorm.dsl.QueryRowSet.hasColumn"]},{"name":"fun item(block: AssignmentsBuilder.(T) -> Unit)","description":"org.ktorm.dsl.BatchInsertStatementBuilder.item","location":"ktorm-core/org.ktorm.dsl/-batch-insert-statement-builder/item.html","searchKeys":["item","fun item(block: AssignmentsBuilder.(T) -> Unit)","org.ktorm.dsl.BatchInsertStatementBuilder.item"]},{"name":"fun item(block: UpdateStatementBuilder.(T) -> Unit)","description":"org.ktorm.dsl.BatchUpdateStatementBuilder.item","location":"ktorm-core/org.ktorm.dsl/-batch-update-statement-builder/item.html","searchKeys":["item","fun item(block: UpdateStatementBuilder.(T) -> Unit)","org.ktorm.dsl.BatchUpdateStatementBuilder.item"]},{"name":"fun notExists(query: Query): ExistsExpression","description":"org.ktorm.dsl.notExists","location":"ktorm-core/org.ktorm.dsl/not-exists.html","searchKeys":["notExists","fun notExists(query: Query): ExistsExpression","org.ktorm.dsl.notExists"]},{"name":"fun ntile(n: Int): WindowFunctionExpression<Int>","description":"org.ktorm.dsl.ntile","location":"ktorm-core/org.ktorm.dsl/ntile.html","searchKeys":["ntile","fun ntile(n: Int): WindowFunctionExpression<Int>","org.ktorm.dsl.ntile"]},{"name":"fun percentRank(): WindowFunctionExpression<Double>","description":"org.ktorm.dsl.percentRank","location":"ktorm-core/org.ktorm.dsl/percent-rank.html","searchKeys":["percentRank","fun percentRank(): WindowFunctionExpression<Double>","org.ktorm.dsl.percentRank"]},{"name":"fun rank(): WindowFunctionExpression<Int>","description":"org.ktorm.dsl.rank","location":"ktorm-core/org.ktorm.dsl/rank.html","searchKeys":["rank","fun rank(): WindowFunctionExpression<Int>","org.ktorm.dsl.rank"]},{"name":"fun rowNumber(): WindowFunctionExpression<Int>","description":"org.ktorm.dsl.rowNumber","location":"ktorm-core/org.ktorm.dsl/row-number.html","searchKeys":["rowNumber","fun rowNumber(): WindowFunctionExpression<Int>","org.ktorm.dsl.rowNumber"]},{"name":"fun size(): Int","description":"org.ktorm.database.CachedRowSet.size","location":"ktorm-core/org.ktorm.database/-cached-row-set/size.html","searchKeys":["size","fun size(): Int","org.ktorm.database.CachedRowSet.size"]},{"name":"fun unboundedFollowing(): WindowFrameBoundExpression","description":"org.ktorm.dsl.WindowFrames.unboundedFollowing","location":"ktorm-core/org.ktorm.dsl/-window-frames/unbounded-following.html","searchKeys":["unboundedFollowing","fun unboundedFollowing(): WindowFrameBoundExpression","org.ktorm.dsl.WindowFrames.unboundedFollowing"]},{"name":"fun unboundedPreceding(): WindowFrameBoundExpression","description":"org.ktorm.dsl.WindowFrames.unboundedPreceding","location":"ktorm-core/org.ktorm.dsl/-window-frames/unbounded-preceding.html","searchKeys":["unboundedPreceding","fun unboundedPreceding(): WindowFrameBoundExpression","org.ktorm.dsl.WindowFrames.unboundedPreceding"]},{"name":"fun valueOf(level: Int): TransactionIsolation","description":"org.ktorm.database.TransactionIsolation.Companion.valueOf","location":"ktorm-core/org.ktorm.database/-transaction-isolation/-companion/value-of.html","searchKeys":["valueOf","fun valueOf(level: Int): TransactionIsolation","org.ktorm.database.TransactionIsolation.Companion.valueOf"]},{"name":"fun valueOf(value: String): AggregateType","description":"org.ktorm.expression.AggregateType.valueOf","location":"ktorm-core/org.ktorm.expression/-aggregate-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AggregateType","org.ktorm.expression.AggregateType.valueOf"]},{"name":"fun valueOf(value: String): BinaryExpressionType","description":"org.ktorm.expression.BinaryExpressionType.valueOf","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BinaryExpressionType","org.ktorm.expression.BinaryExpressionType.valueOf"]},{"name":"fun valueOf(value: String): JoinType","description":"org.ktorm.expression.JoinType.valueOf","location":"ktorm-core/org.ktorm.expression/-join-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): JoinType","org.ktorm.expression.JoinType.valueOf"]},{"name":"fun valueOf(value: String): LogLevel","description":"org.ktorm.logging.LogLevel.valueOf","location":"ktorm-core/org.ktorm.logging/-log-level/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LogLevel","org.ktorm.logging.LogLevel.valueOf"]},{"name":"fun valueOf(value: String): OrderType","description":"org.ktorm.expression.OrderType.valueOf","location":"ktorm-core/org.ktorm.expression/-order-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): OrderType","org.ktorm.expression.OrderType.valueOf"]},{"name":"fun valueOf(value: String): TransactionIsolation","description":"org.ktorm.database.TransactionIsolation.valueOf","location":"ktorm-core/org.ktorm.database/-transaction-isolation/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): TransactionIsolation","org.ktorm.database.TransactionIsolation.valueOf"]},{"name":"fun valueOf(value: String): UnaryExpressionType","description":"org.ktorm.expression.UnaryExpressionType.valueOf","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): UnaryExpressionType","org.ktorm.expression.UnaryExpressionType.valueOf"]},{"name":"fun valueOf(value: String): WindowFrameBoundType","description":"org.ktorm.expression.WindowFrameBoundType.valueOf","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): WindowFrameBoundType","org.ktorm.expression.WindowFrameBoundType.valueOf"]},{"name":"fun valueOf(value: String): WindowFrameUnitType","description":"org.ktorm.expression.WindowFrameUnitType.valueOf","location":"ktorm-core/org.ktorm.expression/-window-frame-unit-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): WindowFrameUnitType","org.ktorm.expression.WindowFrameUnitType.valueOf"]},{"name":"fun valueOf(value: String): WindowFunctionType","description":"org.ktorm.expression.WindowFunctionType.valueOf","location":"ktorm-core/org.ktorm.expression/-window-function-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): WindowFunctionType","org.ktorm.expression.WindowFunctionType.valueOf"]},{"name":"fun values(): Array<AggregateType>","description":"org.ktorm.expression.AggregateType.values","location":"ktorm-core/org.ktorm.expression/-aggregate-type/values.html","searchKeys":["values","fun values(): Array<AggregateType>","org.ktorm.expression.AggregateType.values"]},{"name":"fun values(): Array<BinaryExpressionType>","description":"org.ktorm.expression.BinaryExpressionType.values","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/values.html","searchKeys":["values","fun values(): Array<BinaryExpressionType>","org.ktorm.expression.BinaryExpressionType.values"]},{"name":"fun values(): Array<JoinType>","description":"org.ktorm.expression.JoinType.values","location":"ktorm-core/org.ktorm.expression/-join-type/values.html","searchKeys":["values","fun values(): Array<JoinType>","org.ktorm.expression.JoinType.values"]},{"name":"fun values(): Array<LogLevel>","description":"org.ktorm.logging.LogLevel.values","location":"ktorm-core/org.ktorm.logging/-log-level/values.html","searchKeys":["values","fun values(): Array<LogLevel>","org.ktorm.logging.LogLevel.values"]},{"name":"fun values(): Array<OrderType>","description":"org.ktorm.expression.OrderType.values","location":"ktorm-core/org.ktorm.expression/-order-type/values.html","searchKeys":["values","fun values(): Array<OrderType>","org.ktorm.expression.OrderType.values"]},{"name":"fun values(): Array<TransactionIsolation>","description":"org.ktorm.database.TransactionIsolation.values","location":"ktorm-core/org.ktorm.database/-transaction-isolation/values.html","searchKeys":["values","fun values(): Array<TransactionIsolation>","org.ktorm.database.TransactionIsolation.values"]},{"name":"fun values(): Array<UnaryExpressionType>","description":"org.ktorm.expression.UnaryExpressionType.values","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/values.html","searchKeys":["values","fun values(): Array<UnaryExpressionType>","org.ktorm.expression.UnaryExpressionType.values"]},{"name":"fun values(): Array<WindowFrameBoundType>","description":"org.ktorm.expression.WindowFrameBoundType.values","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/values.html","searchKeys":["values","fun values(): Array<WindowFrameBoundType>","org.ktorm.expression.WindowFrameBoundType.values"]},{"name":"fun values(): Array<WindowFrameUnitType>","description":"org.ktorm.expression.WindowFrameUnitType.values","location":"ktorm-core/org.ktorm.expression/-window-frame-unit-type/values.html","searchKeys":["values","fun values(): Array<WindowFrameUnitType>","org.ktorm.expression.WindowFrameUnitType.values"]},{"name":"fun values(): Array<WindowFunctionType>","description":"org.ktorm.expression.WindowFunctionType.values","location":"ktorm-core/org.ktorm.expression/-window-function-type/values.html","searchKeys":["values","fun values(): Array<WindowFunctionType>","org.ktorm.expression.WindowFunctionType.values"]},{"name":"fun where(block: () -> ColumnDeclaring<Boolean>)","description":"org.ktorm.dsl.UpdateStatementBuilder.where","location":"ktorm-core/org.ktorm.dsl/-update-statement-builder/where.html","searchKeys":["where","fun where(block: () -> ColumnDeclaring<Boolean>)","org.ktorm.dsl.UpdateStatementBuilder.where"]},{"name":"fun window(): WindowSpecificationExpression","description":"org.ktorm.dsl.window","location":"ktorm-core/org.ktorm.dsl/window.html","searchKeys":["window","fun window(): WindowSpecificationExpression","org.ktorm.dsl.window"]},{"name":"fun withExpression(expression: QueryExpression): Query","description":"org.ktorm.dsl.Query.withExpression","location":"ktorm-core/org.ktorm.dsl/-query/with-expression.html","searchKeys":["withExpression","fun withExpression(expression: QueryExpression): Query","org.ktorm.dsl.Query.withExpression"]},{"name":"fun withExpression(expression: SelectExpression): EntitySequence<E, T>","description":"org.ktorm.entity.EntitySequence.withExpression","location":"ktorm-core/org.ktorm.entity/-entity-sequence/with-expression.html","searchKeys":["withExpression","fun withExpression(expression: SelectExpression): EntitySequence<E, T>","org.ktorm.entity.EntitySequence.withExpression"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.eq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.eq","location":"ktorm-core/org.ktorm.dsl/eq.html","searchKeys":["eq","infix fun <T : Any> ColumnDeclaring<T>.eq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.eq"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.eq(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.eq","location":"ktorm-core/org.ktorm.dsl/eq.html","searchKeys":["eq","infix fun <T : Any> ColumnDeclaring<T>.eq(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.eq"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.inList(list: Collection<T>): InListExpression","description":"org.ktorm.dsl.inList","location":"ktorm-core/org.ktorm.dsl/in-list.html","searchKeys":["inList","infix fun <T : Any> ColumnDeclaring<T>.inList(list: Collection<T>): InListExpression","org.ktorm.dsl.inList"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.neq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.neq","location":"ktorm-core/org.ktorm.dsl/neq.html","searchKeys":["neq","infix fun <T : Any> ColumnDeclaring<T>.neq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.neq"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.neq(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.neq","location":"ktorm-core/org.ktorm.dsl/neq.html","searchKeys":["neq","infix fun <T : Any> ColumnDeclaring<T>.neq(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.neq"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.notEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.notEq","location":"ktorm-core/org.ktorm.dsl/not-eq.html","searchKeys":["notEq","infix fun <T : Any> ColumnDeclaring<T>.notEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.notEq"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.notEq(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.notEq","location":"ktorm-core/org.ktorm.dsl/not-eq.html","searchKeys":["notEq","infix fun <T : Any> ColumnDeclaring<T>.notEq(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.notEq"]},{"name":"infix fun <T : Any> ColumnDeclaring<T>.notInList(list: Collection<T>): InListExpression","description":"org.ktorm.dsl.notInList","location":"ktorm-core/org.ktorm.dsl/not-in-list.html","searchKeys":["notInList","infix fun <T : Any> ColumnDeclaring<T>.notInList(list: Collection<T>): InListExpression","org.ktorm.dsl.notInList"]},{"name":"infix fun <T : Any> T.eq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.eq","location":"ktorm-core/org.ktorm.dsl/eq.html","searchKeys":["eq","infix fun <T : Any> T.eq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.eq"]},{"name":"infix fun <T : Any> T.neq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.neq","location":"ktorm-core/org.ktorm.dsl/neq.html","searchKeys":["neq","infix fun <T : Any> T.neq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.neq"]},{"name":"infix fun <T : Any> T.notEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.notEq","location":"ktorm-core/org.ktorm.dsl/not-eq.html","searchKeys":["notEq","infix fun <T : Any> T.notEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.notEq"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.between(range: ClosedRange<T>): BetweenExpression","description":"org.ktorm.dsl.between","location":"ktorm-core/org.ktorm.dsl/between.html","searchKeys":["between","infix fun <T : Comparable<T>> ColumnDeclaring<T>.between(range: ClosedRange<T>): BetweenExpression","org.ktorm.dsl.between"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.greater(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.greater","location":"ktorm-core/org.ktorm.dsl/greater.html","searchKeys":["greater","infix fun <T : Comparable<T>> ColumnDeclaring<T>.greater(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.greater"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.greater(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.greater","location":"ktorm-core/org.ktorm.dsl/greater.html","searchKeys":["greater","infix fun <T : Comparable<T>> ColumnDeclaring<T>.greater(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.greater"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.greaterEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.greaterEq","location":"ktorm-core/org.ktorm.dsl/greater-eq.html","searchKeys":["greaterEq","infix fun <T : Comparable<T>> ColumnDeclaring<T>.greaterEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.greaterEq"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.greaterEq(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.greaterEq","location":"ktorm-core/org.ktorm.dsl/greater-eq.html","searchKeys":["greaterEq","infix fun <T : Comparable<T>> ColumnDeclaring<T>.greaterEq(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.greaterEq"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.gt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.gt","location":"ktorm-core/org.ktorm.dsl/gt.html","searchKeys":["gt","infix fun <T : Comparable<T>> ColumnDeclaring<T>.gt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.gt"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.gt(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.gt","location":"ktorm-core/org.ktorm.dsl/gt.html","searchKeys":["gt","infix fun <T : Comparable<T>> ColumnDeclaring<T>.gt(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.gt"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.gte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.gte","location":"ktorm-core/org.ktorm.dsl/gte.html","searchKeys":["gte","infix fun <T : Comparable<T>> ColumnDeclaring<T>.gte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.gte"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.gte(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.gte","location":"ktorm-core/org.ktorm.dsl/gte.html","searchKeys":["gte","infix fun <T : Comparable<T>> ColumnDeclaring<T>.gte(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.gte"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.less(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.less","location":"ktorm-core/org.ktorm.dsl/less.html","searchKeys":["less","infix fun <T : Comparable<T>> ColumnDeclaring<T>.less(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.less"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.less(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.less","location":"ktorm-core/org.ktorm.dsl/less.html","searchKeys":["less","infix fun <T : Comparable<T>> ColumnDeclaring<T>.less(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.less"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.lessEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lessEq","location":"ktorm-core/org.ktorm.dsl/less-eq.html","searchKeys":["lessEq","infix fun <T : Comparable<T>> ColumnDeclaring<T>.lessEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.lessEq"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.lessEq(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lessEq","location":"ktorm-core/org.ktorm.dsl/less-eq.html","searchKeys":["lessEq","infix fun <T : Comparable<T>> ColumnDeclaring<T>.lessEq(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.lessEq"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.lt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lt","location":"ktorm-core/org.ktorm.dsl/lt.html","searchKeys":["lt","infix fun <T : Comparable<T>> ColumnDeclaring<T>.lt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.lt"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.lt(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lt","location":"ktorm-core/org.ktorm.dsl/lt.html","searchKeys":["lt","infix fun <T : Comparable<T>> ColumnDeclaring<T>.lt(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.lt"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.lte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lte","location":"ktorm-core/org.ktorm.dsl/lte.html","searchKeys":["lte","infix fun <T : Comparable<T>> ColumnDeclaring<T>.lte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.lte"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.lte(value: T): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lte","location":"ktorm-core/org.ktorm.dsl/lte.html","searchKeys":["lte","infix fun <T : Comparable<T>> ColumnDeclaring<T>.lte(value: T): BinaryExpression<Boolean>","org.ktorm.dsl.lte"]},{"name":"infix fun <T : Comparable<T>> ColumnDeclaring<T>.notBetween(range: ClosedRange<T>): BetweenExpression","description":"org.ktorm.dsl.notBetween","location":"ktorm-core/org.ktorm.dsl/not-between.html","searchKeys":["notBetween","infix fun <T : Comparable<T>> ColumnDeclaring<T>.notBetween(range: ClosedRange<T>): BetweenExpression","org.ktorm.dsl.notBetween"]},{"name":"infix fun <T : Comparable<T>> T.greater(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.greater","location":"ktorm-core/org.ktorm.dsl/greater.html","searchKeys":["greater","infix fun <T : Comparable<T>> T.greater(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.greater"]},{"name":"infix fun <T : Comparable<T>> T.greaterEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.greaterEq","location":"ktorm-core/org.ktorm.dsl/greater-eq.html","searchKeys":["greaterEq","infix fun <T : Comparable<T>> T.greaterEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.greaterEq"]},{"name":"infix fun <T : Comparable<T>> T.gt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.gt","location":"ktorm-core/org.ktorm.dsl/gt.html","searchKeys":["gt","infix fun <T : Comparable<T>> T.gt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.gt"]},{"name":"infix fun <T : Comparable<T>> T.gte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.gte","location":"ktorm-core/org.ktorm.dsl/gte.html","searchKeys":["gte","infix fun <T : Comparable<T>> T.gte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.gte"]},{"name":"infix fun <T : Comparable<T>> T.less(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.less","location":"ktorm-core/org.ktorm.dsl/less.html","searchKeys":["less","infix fun <T : Comparable<T>> T.less(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.less"]},{"name":"infix fun <T : Comparable<T>> T.lessEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lessEq","location":"ktorm-core/org.ktorm.dsl/less-eq.html","searchKeys":["lessEq","infix fun <T : Comparable<T>> T.lessEq(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.lessEq"]},{"name":"infix fun <T : Comparable<T>> T.lt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lt","location":"ktorm-core/org.ktorm.dsl/lt.html","searchKeys":["lt","infix fun <T : Comparable<T>> T.lt(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.lt"]},{"name":"infix fun <T : Comparable<T>> T.lte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.lte","location":"ktorm-core/org.ktorm.dsl/lte.html","searchKeys":["lte","infix fun <T : Comparable<T>> T.lte(expr: ColumnDeclaring<T>): BinaryExpression<Boolean>","org.ktorm.dsl.lte"]},{"name":"infix fun Boolean.and(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.and","location":"ktorm-core/org.ktorm.dsl/and.html","searchKeys":["and","infix fun Boolean.and(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","org.ktorm.dsl.and"]},{"name":"infix fun Boolean.or(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.or","location":"ktorm-core/org.ktorm.dsl/or.html","searchKeys":["or","infix fun Boolean.or(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","org.ktorm.dsl.or"]},{"name":"infix fun Boolean.xor(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.xor","location":"ktorm-core/org.ktorm.dsl/xor.html","searchKeys":["xor","infix fun Boolean.xor(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","org.ktorm.dsl.xor"]},{"name":"infix fun ColumnDeclaring<*>.inList(query: Query): InListExpression","description":"org.ktorm.dsl.inList","location":"ktorm-core/org.ktorm.dsl/in-list.html","searchKeys":["inList","infix fun ColumnDeclaring<*>.inList(query: Query): InListExpression","org.ktorm.dsl.inList"]},{"name":"infix fun ColumnDeclaring<*>.like(expr: ColumnDeclaring<String>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.like","location":"ktorm-core/org.ktorm.dsl/like.html","searchKeys":["like","infix fun ColumnDeclaring<*>.like(expr: ColumnDeclaring<String>): BinaryExpression<Boolean>","org.ktorm.dsl.like"]},{"name":"infix fun ColumnDeclaring<*>.like(value: String): BinaryExpression<Boolean>","description":"org.ktorm.dsl.like","location":"ktorm-core/org.ktorm.dsl/like.html","searchKeys":["like","infix fun ColumnDeclaring<*>.like(value: String): BinaryExpression<Boolean>","org.ktorm.dsl.like"]},{"name":"infix fun ColumnDeclaring<*>.notInList(query: Query): InListExpression","description":"org.ktorm.dsl.notInList","location":"ktorm-core/org.ktorm.dsl/not-in-list.html","searchKeys":["notInList","infix fun ColumnDeclaring<*>.notInList(query: Query): InListExpression","org.ktorm.dsl.notInList"]},{"name":"infix fun ColumnDeclaring<*>.notLike(expr: ColumnDeclaring<String>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.notLike","location":"ktorm-core/org.ktorm.dsl/not-like.html","searchKeys":["notLike","infix fun ColumnDeclaring<*>.notLike(expr: ColumnDeclaring<String>): BinaryExpression<Boolean>","org.ktorm.dsl.notLike"]},{"name":"infix fun ColumnDeclaring<*>.notLike(value: String): BinaryExpression<Boolean>","description":"org.ktorm.dsl.notLike","location":"ktorm-core/org.ktorm.dsl/not-like.html","searchKeys":["notLike","infix fun ColumnDeclaring<*>.notLike(value: String): BinaryExpression<Boolean>","org.ktorm.dsl.notLike"]},{"name":"infix fun ColumnDeclaring<Boolean>.and(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.and","location":"ktorm-core/org.ktorm.dsl/and.html","searchKeys":["and","infix fun ColumnDeclaring<Boolean>.and(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","org.ktorm.dsl.and"]},{"name":"infix fun ColumnDeclaring<Boolean>.and(value: Boolean): BinaryExpression<Boolean>","description":"org.ktorm.dsl.and","location":"ktorm-core/org.ktorm.dsl/and.html","searchKeys":["and","infix fun ColumnDeclaring<Boolean>.and(value: Boolean): BinaryExpression<Boolean>","org.ktorm.dsl.and"]},{"name":"infix fun ColumnDeclaring<Boolean>.or(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.or","location":"ktorm-core/org.ktorm.dsl/or.html","searchKeys":["or","infix fun ColumnDeclaring<Boolean>.or(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","org.ktorm.dsl.or"]},{"name":"infix fun ColumnDeclaring<Boolean>.or(value: Boolean): BinaryExpression<Boolean>","description":"org.ktorm.dsl.or","location":"ktorm-core/org.ktorm.dsl/or.html","searchKeys":["or","infix fun ColumnDeclaring<Boolean>.or(value: Boolean): BinaryExpression<Boolean>","org.ktorm.dsl.or"]},{"name":"infix fun ColumnDeclaring<Boolean>.xor(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","description":"org.ktorm.dsl.xor","location":"ktorm-core/org.ktorm.dsl/xor.html","searchKeys":["xor","infix fun ColumnDeclaring<Boolean>.xor(expr: ColumnDeclaring<Boolean>): BinaryExpression<Boolean>","org.ktorm.dsl.xor"]},{"name":"infix fun ColumnDeclaring<Boolean>.xor(value: Boolean): BinaryExpression<Boolean>","description":"org.ktorm.dsl.xor","location":"ktorm-core/org.ktorm.dsl/xor.html","searchKeys":["xor","infix fun ColumnDeclaring<Boolean>.xor(value: Boolean): BinaryExpression<Boolean>","org.ktorm.dsl.xor"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.div(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.div","location":"ktorm-core/org.ktorm.dsl/div.html","searchKeys":["div","infix operator fun <T : Number> ColumnDeclaring<T>.div(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.div"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.div(value: T): BinaryExpression<T>","description":"org.ktorm.dsl.div","location":"ktorm-core/org.ktorm.dsl/div.html","searchKeys":["div","infix operator fun <T : Number> ColumnDeclaring<T>.div(value: T): BinaryExpression<T>","org.ktorm.dsl.div"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.minus(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.minus","location":"ktorm-core/org.ktorm.dsl/minus.html","searchKeys":["minus","infix operator fun <T : Number> ColumnDeclaring<T>.minus(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.minus"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.minus(value: T): BinaryExpression<T>","description":"org.ktorm.dsl.minus","location":"ktorm-core/org.ktorm.dsl/minus.html","searchKeys":["minus","infix operator fun <T : Number> ColumnDeclaring<T>.minus(value: T): BinaryExpression<T>","org.ktorm.dsl.minus"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.plus(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.plus","location":"ktorm-core/org.ktorm.dsl/plus.html","searchKeys":["plus","infix operator fun <T : Number> ColumnDeclaring<T>.plus(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.plus"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.plus(value: T): BinaryExpression<T>","description":"org.ktorm.dsl.plus","location":"ktorm-core/org.ktorm.dsl/plus.html","searchKeys":["plus","infix operator fun <T : Number> ColumnDeclaring<T>.plus(value: T): BinaryExpression<T>","org.ktorm.dsl.plus"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.rem(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.rem","location":"ktorm-core/org.ktorm.dsl/rem.html","searchKeys":["rem","infix operator fun <T : Number> ColumnDeclaring<T>.rem(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.rem"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.rem(value: T): BinaryExpression<T>","description":"org.ktorm.dsl.rem","location":"ktorm-core/org.ktorm.dsl/rem.html","searchKeys":["rem","infix operator fun <T : Number> ColumnDeclaring<T>.rem(value: T): BinaryExpression<T>","org.ktorm.dsl.rem"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.times(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.times","location":"ktorm-core/org.ktorm.dsl/times.html","searchKeys":["times","infix operator fun <T : Number> ColumnDeclaring<T>.times(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.times"]},{"name":"infix operator fun <T : Number> ColumnDeclaring<T>.times(value: T): BinaryExpression<T>","description":"org.ktorm.dsl.times","location":"ktorm-core/org.ktorm.dsl/times.html","searchKeys":["times","infix operator fun <T : Number> ColumnDeclaring<T>.times(value: T): BinaryExpression<T>","org.ktorm.dsl.times"]},{"name":"infix operator fun <T : Number> T.div(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.div","location":"ktorm-core/org.ktorm.dsl/div.html","searchKeys":["div","infix operator fun <T : Number> T.div(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.div"]},{"name":"infix operator fun <T : Number> T.minus(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.minus","location":"ktorm-core/org.ktorm.dsl/minus.html","searchKeys":["minus","infix operator fun <T : Number> T.minus(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.minus"]},{"name":"infix operator fun <T : Number> T.plus(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.plus","location":"ktorm-core/org.ktorm.dsl/plus.html","searchKeys":["plus","infix operator fun <T : Number> T.plus(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.plus"]},{"name":"infix operator fun <T : Number> T.rem(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.rem","location":"ktorm-core/org.ktorm.dsl/rem.html","searchKeys":["rem","infix operator fun <T : Number> T.rem(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.rem"]},{"name":"infix operator fun <T : Number> T.times(expr: ColumnDeclaring<T>): BinaryExpression<T>","description":"org.ktorm.dsl.times","location":"ktorm-core/org.ktorm.dsl/times.html","searchKeys":["times","infix operator fun <T : Number> T.times(expr: ColumnDeclaring<T>): BinaryExpression<T>","org.ktorm.dsl.times"]},{"name":"inline fun <C : Any, R : Entity<R>> Column<C>.references(referenceTable: Table<R>, selector: (E) -> R?): Column<C>","description":"org.ktorm.schema.Table.references","location":"ktorm-core/org.ktorm.schema/-table/references.html","searchKeys":["references","inline fun <C : Any, R : Entity<R>> Column<C>.references(referenceTable: Table<R>, selector: (E) -> R?): Column<C>","org.ktorm.schema.Table.references"]},{"name":"inline fun <C : Any> Column<C>.bindTo(selector: (E) -> C?): Column<C>","description":"org.ktorm.schema.Table.bindTo","location":"ktorm-core/org.ktorm.schema/-table/bind-to.html","searchKeys":["bindTo","inline fun <C : Any> Column<C>.bindTo(selector: (E) -> C?): Column<C>","org.ktorm.schema.Table.bindTo"]},{"name":"inline fun <C : Enum<C>> BaseTable<*>.enum(name: String): Column<C>","description":"org.ktorm.schema.enum","location":"ktorm-core/org.ktorm.schema/enum.html","searchKeys":["enum","inline fun <C : Enum<C>> BaseTable<*>.enum(name: String): Column<C>","org.ktorm.schema.enum"]},{"name":"inline fun <E : Any, K : Any, M : MutableMap<in K?, E>> EntityGrouping<E, *, K>.reduceTo(destination: M, operation: (key: K?, accumulator: E, element: E) -> E): M","description":"org.ktorm.entity.reduceTo","location":"ktorm-core/org.ktorm.entity/reduce-to.html","searchKeys":["reduceTo","inline fun <E : Any, K : Any, M : MutableMap<in K?, E>> EntityGrouping<E, *, K>.reduceTo(destination: M, operation: (key: K?, accumulator: E, element: E) -> E): M","org.ktorm.entity.reduceTo"]},{"name":"inline fun <E : Any, K : Any, R, M : MutableMap<in K?, R>> EntityGrouping<E, *, K>.aggregateTo(destination: M, operation: (key: K?, accumulator: R?, element: E, first: Boolean) -> R): M","description":"org.ktorm.entity.aggregateTo","location":"ktorm-core/org.ktorm.entity/aggregate-to.html","searchKeys":["aggregateTo","inline fun <E : Any, K : Any, R, M : MutableMap<in K?, R>> EntityGrouping<E, *, K>.aggregateTo(destination: M, operation: (key: K?, accumulator: R?, element: E, first: Boolean) -> R): M","org.ktorm.entity.aggregateTo"]},{"name":"inline fun <E : Any, K : Any, R, M : MutableMap<in K?, R>> EntityGrouping<E, *, K>.foldTo(destination: M, initialValue: R, operation: (accumulator: R, element: E) -> R): M","description":"org.ktorm.entity.foldTo","location":"ktorm-core/org.ktorm.entity/fold-to.html","searchKeys":["foldTo","inline fun <E : Any, K : Any, R, M : MutableMap<in K?, R>> EntityGrouping<E, *, K>.foldTo(destination: M, initialValue: R, operation: (accumulator: R, element: E) -> R): M","org.ktorm.entity.foldTo"]},{"name":"inline fun <E : Any, K : Any, R, M : MutableMap<in K?, R>> EntityGrouping<E, *, K>.foldTo(destination: M, initialValueSelector: (key: K?, element: E) -> R, operation: (key: K?, accumulator: R, element: E) -> R): M","description":"org.ktorm.entity.foldTo","location":"ktorm-core/org.ktorm.entity/fold-to.html","searchKeys":["foldTo","inline fun <E : Any, K : Any, R, M : MutableMap<in K?, R>> EntityGrouping<E, *, K>.foldTo(destination: M, initialValueSelector: (key: K?, element: E) -> R, operation: (key: K?, accumulator: R, element: E) -> R): M","org.ktorm.entity.foldTo"]},{"name":"inline fun <E : Any, K : Any, R> EntityGrouping<E, *, K>.aggregate(operation: (key: K?, accumulator: R?, element: E, first: Boolean) -> R): Map<K?, R>","description":"org.ktorm.entity.aggregate","location":"ktorm-core/org.ktorm.entity/aggregate.html","searchKeys":["aggregate","inline fun <E : Any, K : Any, R> EntityGrouping<E, *, K>.aggregate(operation: (key: K?, accumulator: R?, element: E, first: Boolean) -> R): Map<K?, R>","org.ktorm.entity.aggregate"]},{"name":"inline fun <E : Any, K : Any, R> EntityGrouping<E, *, K>.fold(initialValue: R, operation: (accumulator: R, element: E) -> R): Map<K?, R>","description":"org.ktorm.entity.fold","location":"ktorm-core/org.ktorm.entity/fold.html","searchKeys":["fold","inline fun <E : Any, K : Any, R> EntityGrouping<E, *, K>.fold(initialValue: R, operation: (accumulator: R, element: E) -> R): Map<K?, R>","org.ktorm.entity.fold"]},{"name":"inline fun <E : Any, K : Any, R> EntityGrouping<E, *, K>.fold(initialValueSelector: (key: K?, element: E) -> R, operation: (key: K?, accumulator: R, element: E) -> R): Map<K?, R>","description":"org.ktorm.entity.fold","location":"ktorm-core/org.ktorm.entity/fold.html","searchKeys":["fold","inline fun <E : Any, K : Any, R> EntityGrouping<E, *, K>.fold(initialValueSelector: (key: K?, element: E) -> R, operation: (key: K?, accumulator: R, element: E) -> R): Map<K?, R>","org.ktorm.entity.fold"]},{"name":"inline fun <E : Any, K : Any> EntityGrouping<E, *, K>.reduce(operation: (key: K?, accumulator: E, element: E) -> E): Map<K?, E>","description":"org.ktorm.entity.reduce","location":"ktorm-core/org.ktorm.entity/reduce.html","searchKeys":["reduce","inline fun <E : Any, K : Any> EntityGrouping<E, *, K>.reduce(operation: (key: K?, accumulator: E, element: E) -> E): Map<K?, E>","org.ktorm.entity.reduce"]},{"name":"inline fun <E : Any, K, M : MutableMap<in K, MutableList<E>>> EntitySequence<E, *>.groupByTo(destination: M, keySelector: (E) -> K): M","description":"org.ktorm.entity.groupByTo","location":"ktorm-core/org.ktorm.entity/group-by-to.html","searchKeys":["groupByTo","inline fun <E : Any, K, M : MutableMap<in K, MutableList<E>>> EntitySequence<E, *>.groupByTo(destination: M, keySelector: (E) -> K): M","org.ktorm.entity.groupByTo"]},{"name":"inline fun <E : Any, K, M : MutableMap<in K, in E>> EntitySequence<E, *>.associateByTo(destination: M, keySelector: (E) -> K): M","description":"org.ktorm.entity.associateByTo","location":"ktorm-core/org.ktorm.entity/associate-by-to.html","searchKeys":["associateByTo","inline fun <E : Any, K, M : MutableMap<in K, in E>> EntitySequence<E, *>.associateByTo(destination: M, keySelector: (E) -> K): M","org.ktorm.entity.associateByTo"]},{"name":"inline fun <E : Any, K, V, M : MutableMap<in K, MutableList<V>>> EntitySequence<E, *>.groupByTo(destination: M, keySelector: (E) -> K, valueTransform: (E) -> V): M","description":"org.ktorm.entity.groupByTo","location":"ktorm-core/org.ktorm.entity/group-by-to.html","searchKeys":["groupByTo","inline fun <E : Any, K, V, M : MutableMap<in K, MutableList<V>>> EntitySequence<E, *>.groupByTo(destination: M, keySelector: (E) -> K, valueTransform: (E) -> V): M","org.ktorm.entity.groupByTo"]},{"name":"inline fun <E : Any, K, V, M : MutableMap<in K, in V>> EntitySequence<E, *>.associateByTo(destination: M, keySelector: (E) -> K, valueTransform: (E) -> V): M","description":"org.ktorm.entity.associateByTo","location":"ktorm-core/org.ktorm.entity/associate-by-to.html","searchKeys":["associateByTo","inline fun <E : Any, K, V, M : MutableMap<in K, in V>> EntitySequence<E, *>.associateByTo(destination: M, keySelector: (E) -> K, valueTransform: (E) -> V): M","org.ktorm.entity.associateByTo"]},{"name":"inline fun <E : Any, K, V, M : MutableMap<in K, in V>> EntitySequence<E, *>.associateTo(destination: M, transform: (E) -> Pair<K, V>): M","description":"org.ktorm.entity.associateTo","location":"ktorm-core/org.ktorm.entity/associate-to.html","searchKeys":["associateTo","inline fun <E : Any, K, V, M : MutableMap<in K, in V>> EntitySequence<E, *>.associateTo(destination: M, transform: (E) -> Pair<K, V>): M","org.ktorm.entity.associateTo"]},{"name":"inline fun <E : Any, K, V> EntitySequence<E, *>.associate(transform: (E) -> Pair<K, V>): Map<K, V>","description":"org.ktorm.entity.associate","location":"ktorm-core/org.ktorm.entity/associate.html","searchKeys":["associate","inline fun <E : Any, K, V> EntitySequence<E, *>.associate(transform: (E) -> Pair<K, V>): Map<K, V>","org.ktorm.entity.associate"]},{"name":"inline fun <E : Any, K, V> EntitySequence<E, *>.associateBy(keySelector: (E) -> K, valueTransform: (E) -> V): Map<K, V>","description":"org.ktorm.entity.associateBy","location":"ktorm-core/org.ktorm.entity/associate-by.html","searchKeys":["associateBy","inline fun <E : Any, K, V> EntitySequence<E, *>.associateBy(keySelector: (E) -> K, valueTransform: (E) -> V): Map<K, V>","org.ktorm.entity.associateBy"]},{"name":"inline fun <E : Any, K, V> EntitySequence<E, *>.groupBy(keySelector: (E) -> K, valueTransform: (E) -> V): Map<K, List<V>>","description":"org.ktorm.entity.groupBy","location":"ktorm-core/org.ktorm.entity/group-by.html","searchKeys":["groupBy","inline fun <E : Any, K, V> EntitySequence<E, *>.groupBy(keySelector: (E) -> K, valueTransform: (E) -> V): Map<K, List<V>>","org.ktorm.entity.groupBy"]},{"name":"inline fun <E : Any, K> EntitySequence<E, *>.associateBy(keySelector: (E) -> K): Map<K, E>","description":"org.ktorm.entity.associateBy","location":"ktorm-core/org.ktorm.entity/associate-by.html","searchKeys":["associateBy","inline fun <E : Any, K> EntitySequence<E, *>.associateBy(keySelector: (E) -> K): Map<K, E>","org.ktorm.entity.associateBy"]},{"name":"inline fun <E : Any, K> EntitySequence<E, *>.groupBy(keySelector: (E) -> K): Map<K, List<E>>","description":"org.ktorm.entity.groupBy","location":"ktorm-core/org.ktorm.entity/group-by.html","searchKeys":["groupBy","inline fun <E : Any, K> EntitySequence<E, *>.groupBy(keySelector: (E) -> K): Map<K, List<E>>","org.ktorm.entity.groupBy"]},{"name":"inline fun <E : Any, R : Any, C : MutableCollection<in R>> EntitySequence<E, *>.mapIndexedNotNullTo(destination: C, transform: (index: Int, E) -> R?): C","description":"org.ktorm.entity.mapIndexedNotNullTo","location":"ktorm-core/org.ktorm.entity/map-indexed-not-null-to.html","searchKeys":["mapIndexedNotNullTo","inline fun <E : Any, R : Any, C : MutableCollection<in R>> EntitySequence<E, *>.mapIndexedNotNullTo(destination: C, transform: (index: Int, E) -> R?): C","org.ktorm.entity.mapIndexedNotNullTo"]},{"name":"inline fun <E : Any, R : Any, C : MutableCollection<in R>> EntitySequence<E, *>.mapNotNullTo(destination: C, transform: (E) -> R?): C","description":"org.ktorm.entity.mapNotNullTo","location":"ktorm-core/org.ktorm.entity/map-not-null-to.html","searchKeys":["mapNotNullTo","inline fun <E : Any, R : Any, C : MutableCollection<in R>> EntitySequence<E, *>.mapNotNullTo(destination: C, transform: (E) -> R?): C","org.ktorm.entity.mapNotNullTo"]},{"name":"inline fun <E : Any, R : Any> EntitySequence<E, *>.mapIndexedNotNull(transform: (index: Int, E) -> R?): List<R>","description":"org.ktorm.entity.mapIndexedNotNull","location":"ktorm-core/org.ktorm.entity/map-indexed-not-null.html","searchKeys":["mapIndexedNotNull","inline fun <E : Any, R : Any> EntitySequence<E, *>.mapIndexedNotNull(transform: (index: Int, E) -> R?): List<R>","org.ktorm.entity.mapIndexedNotNull"]},{"name":"inline fun <E : Any, R : Any> EntitySequence<E, *>.mapNotNull(transform: (E) -> R?): List<R>","description":"org.ktorm.entity.mapNotNull","location":"ktorm-core/org.ktorm.entity/map-not-null.html","searchKeys":["mapNotNull","inline fun <E : Any, R : Any> EntitySequence<E, *>.mapNotNull(transform: (E) -> R?): List<R>","org.ktorm.entity.mapNotNull"]},{"name":"inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.flatMapIndexedTo(destination: C, transform: (index: Int, E) -> Iterable<R>): C","description":"org.ktorm.entity.flatMapIndexedTo","location":"ktorm-core/org.ktorm.entity/flat-map-indexed-to.html","searchKeys":["flatMapIndexedTo","inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.flatMapIndexedTo(destination: C, transform: (index: Int, E) -> Iterable<R>): C","org.ktorm.entity.flatMapIndexedTo"]},{"name":"inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.flatMapTo(destination: C, transform: (E) -> Iterable<R>): C","description":"org.ktorm.entity.flatMapTo","location":"ktorm-core/org.ktorm.entity/flat-map-to.html","searchKeys":["flatMapTo","inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.flatMapTo(destination: C, transform: (E) -> Iterable<R>): C","org.ktorm.entity.flatMapTo"]},{"name":"inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.mapIndexedTo(destination: C, transform: (index: Int, E) -> R): C","description":"org.ktorm.entity.mapIndexedTo","location":"ktorm-core/org.ktorm.entity/map-indexed-to.html","searchKeys":["mapIndexedTo","inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.mapIndexedTo(destination: C, transform: (index: Int, E) -> R): C","org.ktorm.entity.mapIndexedTo"]},{"name":"inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.mapTo(destination: C, transform: (E) -> R): C","description":"org.ktorm.entity.mapTo","location":"ktorm-core/org.ktorm.entity/map-to.html","searchKeys":["mapTo","inline fun <E : Any, R, C : MutableCollection<in R>> EntitySequence<E, *>.mapTo(destination: C, transform: (E) -> R): C","org.ktorm.entity.mapTo"]},{"name":"inline fun <E : Any, R> EntitySequence<E, *>.flatMap(transform: (E) -> Iterable<R>): List<R>","description":"org.ktorm.entity.flatMap","location":"ktorm-core/org.ktorm.entity/flat-map.html","searchKeys":["flatMap","inline fun <E : Any, R> EntitySequence<E, *>.flatMap(transform: (E) -> Iterable<R>): List<R>","org.ktorm.entity.flatMap"]},{"name":"inline fun <E : Any, R> EntitySequence<E, *>.flatMapIndexed(transform: (index: Int, E) -> Iterable<R>): List<R>","description":"org.ktorm.entity.flatMapIndexed","location":"ktorm-core/org.ktorm.entity/flat-map-indexed.html","searchKeys":["flatMapIndexed","inline fun <E : Any, R> EntitySequence<E, *>.flatMapIndexed(transform: (index: Int, E) -> Iterable<R>): List<R>","org.ktorm.entity.flatMapIndexed"]},{"name":"inline fun <E : Any, R> EntitySequence<E, *>.fold(initial: R, operation: (acc: R, E) -> R): R","description":"org.ktorm.entity.fold","location":"ktorm-core/org.ktorm.entity/fold.html","searchKeys":["fold","inline fun <E : Any, R> EntitySequence<E, *>.fold(initial: R, operation: (acc: R, E) -> R): R","org.ktorm.entity.fold"]},{"name":"inline fun <E : Any, R> EntitySequence<E, *>.foldIndexed(initial: R, operation: (index: Int, acc: R, E) -> R): R","description":"org.ktorm.entity.foldIndexed","location":"ktorm-core/org.ktorm.entity/fold-indexed.html","searchKeys":["foldIndexed","inline fun <E : Any, R> EntitySequence<E, *>.foldIndexed(initial: R, operation: (index: Int, acc: R, E) -> R): R","org.ktorm.entity.foldIndexed"]},{"name":"inline fun <E : Any, R> EntitySequence<E, *>.map(transform: (E) -> R): List<R>","description":"org.ktorm.entity.map","location":"ktorm-core/org.ktorm.entity/map.html","searchKeys":["map","inline fun <E : Any, R> EntitySequence<E, *>.map(transform: (E) -> R): List<R>","org.ktorm.entity.map"]},{"name":"inline fun <E : Any, R> EntitySequence<E, *>.mapIndexed(transform: (index: Int, E) -> R): List<R>","description":"org.ktorm.entity.mapIndexed","location":"ktorm-core/org.ktorm.entity/map-indexed.html","searchKeys":["mapIndexed","inline fun <E : Any, R> EntitySequence<E, *>.mapIndexed(transform: (index: Int, E) -> R): List<R>","org.ktorm.entity.mapIndexed"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Any, R : MutableCollection<in C>> EntitySequence<E, T>.mapColumnsNotNullTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): R","description":"org.ktorm.entity.mapColumnsNotNullTo","location":"ktorm-core/org.ktorm.entity/map-columns-not-null-to.html","searchKeys":["mapColumnsNotNullTo","inline fun <E : Any, T : BaseTable<E>, C : Any, R : MutableCollection<in C>> EntitySequence<E, T>.mapColumnsNotNullTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): R","org.ktorm.entity.mapColumnsNotNullTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Any, R : MutableCollection<in C?>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C : Any, R : MutableCollection<in C?>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> ColumnDeclaring<C>): C?","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> ColumnDeclaring<C>): C?","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): List<C?>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): List<C?>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Any> EntitySequence<E, T>.mapColumnsNotNull(isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): List<C>","description":"org.ktorm.entity.mapColumnsNotNull","location":"ktorm-core/org.ktorm.entity/map-columns-not-null.html","searchKeys":["mapColumnsNotNull","inline fun <E : Any, T : BaseTable<E>, C : Any> EntitySequence<E, T>.mapColumnsNotNull(isDistinct: Boolean = false, columnSelector: (T) -> ColumnDeclaring<C>): List<C>","org.ktorm.entity.mapColumnsNotNull"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> EntitySequence<E, T>.maxBy(selector: (T) -> ColumnDeclaring<C>): C?","description":"org.ktorm.entity.maxBy","location":"ktorm-core/org.ktorm.entity/max-by.html","searchKeys":["maxBy","inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> EntitySequence<E, T>.maxBy(selector: (T) -> ColumnDeclaring<C>): C?","org.ktorm.entity.maxBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> EntitySequence<E, T>.minBy(selector: (T) -> ColumnDeclaring<C>): C?","description":"org.ktorm.entity.minBy","location":"ktorm-core/org.ktorm.entity/min-by.html","searchKeys":["minBy","inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> EntitySequence<E, T>.minBy(selector: (T) -> ColumnDeclaring<C>): C?","org.ktorm.entity.minBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : MutableCollection<in E>> EntitySequence<E, T>.filterNotTo(destination: C, predicate: (T) -> ColumnDeclaring<Boolean>): C","description":"org.ktorm.entity.filterNotTo","location":"ktorm-core/org.ktorm.entity/filter-not-to.html","searchKeys":["filterNotTo","inline fun <E : Any, T : BaseTable<E>, C : MutableCollection<in E>> EntitySequence<E, T>.filterNotTo(destination: C, predicate: (T) -> ColumnDeclaring<Boolean>): C","org.ktorm.entity.filterNotTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : MutableCollection<in E>> EntitySequence<E, T>.filterTo(destination: C, predicate: (T) -> ColumnDeclaring<Boolean>): C","description":"org.ktorm.entity.filterTo","location":"ktorm-core/org.ktorm.entity/filter-to.html","searchKeys":["filterTo","inline fun <E : Any, T : BaseTable<E>, C : MutableCollection<in E>> EntitySequence<E, T>.filterTo(destination: C, predicate: (T) -> ColumnDeclaring<Boolean>): C","org.ktorm.entity.filterTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Number> EntitySequence<E, T>.sumBy(selector: (T) -> ColumnDeclaring<C>): C?","description":"org.ktorm.entity.sumBy","location":"ktorm-core/org.ktorm.entity/sum-by.html","searchKeys":["sumBy","inline fun <E : Any, T : BaseTable<E>, C : Number> EntitySequence<E, T>.sumBy(selector: (T) -> ColumnDeclaring<C>): C?","org.ktorm.entity.sumBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any, R : MutableCollection<in Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any, R : MutableCollection<in Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): List<Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): List<Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, R : MutableCollection<in Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, R : MutableCollection<in Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): List<Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): List<Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, R : MutableCollection<in Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, R : MutableCollection<in Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): List<Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): List<Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, R : MutableCollection<in Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, R : MutableCollection<in Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): List<Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): List<Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, R : MutableCollection<in Tuple5<C1?, C2?, C3?, C4?, C5?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, R : MutableCollection<in Tuple5<C1?, C2?, C3?, C4?, C5?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): Tuple5<C1?, C2?, C3?, C4?, C5?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): Tuple5<C1?, C2?, C3?, C4?, C5?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): List<Tuple5<C1?, C2?, C3?, C4?, C5?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): List<Tuple5<C1?, C2?, C3?, C4?, C5?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, R : MutableCollection<in Tuple4<C1?, C2?, C3?, C4?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any, R : MutableCollection<in Tuple4<C1?, C2?, C3?, C4?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): Tuple4<C1?, C2?, C3?, C4?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): Tuple4<C1?, C2?, C3?, C4?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): List<Tuple4<C1?, C2?, C3?, C4?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, C4 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): List<Tuple4<C1?, C2?, C3?, C4?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, R : MutableCollection<in Tuple3<C1?, C2?, C3?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any, R : MutableCollection<in Tuple3<C1?, C2?, C3?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): Tuple3<C1?, C2?, C3?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): Tuple3<C1?, C2?, C3?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): List<Tuple3<C1?, C2?, C3?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, C3 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): List<Tuple3<C1?, C2?, C3?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, R : MutableCollection<in Tuple2<C1?, C2?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): R","description":"org.ktorm.entity.mapColumnsTo","location":"ktorm-core/org.ktorm.entity/map-columns-to.html","searchKeys":["mapColumnsTo","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any, R : MutableCollection<in Tuple2<C1?, C2?>>> EntitySequence<E, T>.mapColumnsTo(destination: R, isDistinct: Boolean = false, columnSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): R","org.ktorm.entity.mapColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): Tuple2<C1?, C2?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any> EntitySequence<E, T>.aggregateColumns(aggregationSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): Tuple2<C1?, C2?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): List<Tuple2<C1?, C2?>>","description":"org.ktorm.entity.mapColumns","location":"ktorm-core/org.ktorm.entity/map-columns.html","searchKeys":["mapColumns","inline fun <E : Any, T : BaseTable<E>, C1 : Any, C2 : Any> EntitySequence<E, T>.mapColumns(isDistinct: Boolean = false, columnSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): List<Tuple2<C1?, C2?>>","org.ktorm.entity.mapColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Any, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> ColumnDeclaring<C>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Any, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> ColumnDeclaring<C>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.eachMaxByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<C>): M","description":"org.ktorm.entity.eachMaxByTo","location":"ktorm-core/org.ktorm.entity/each-max-by-to.html","searchKeys":["eachMaxByTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.eachMaxByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<C>): M","org.ktorm.entity.eachMaxByTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.eachMinByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<C>): M","description":"org.ktorm.entity.eachMinByTo","location":"ktorm-core/org.ktorm.entity/each-min-by-to.html","searchKeys":["eachMinByTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.eachMinByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<C>): M","org.ktorm.entity.eachMinByTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>> EntityGrouping<E, T, K>.eachMaxBy(columnSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","description":"org.ktorm.entity.eachMaxBy","location":"ktorm-core/org.ktorm.entity/each-max-by.html","searchKeys":["eachMaxBy","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>> EntityGrouping<E, T, K>.eachMaxBy(columnSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","org.ktorm.entity.eachMaxBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>> EntityGrouping<E, T, K>.eachMinBy(columnSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","description":"org.ktorm.entity.eachMinBy","location":"ktorm-core/org.ktorm.entity/each-min-by.html","searchKeys":["eachMinBy","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Comparable<C>> EntityGrouping<E, T, K>.eachMinBy(columnSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","org.ktorm.entity.eachMinBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Number, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.eachSumByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<C>): M","description":"org.ktorm.entity.eachSumByTo","location":"ktorm-core/org.ktorm.entity/each-sum-by-to.html","searchKeys":["eachSumByTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Number, M : MutableMap<in K?, in C?>> EntityGrouping<E, T, K>.eachSumByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<C>): M","org.ktorm.entity.eachSumByTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C : Number> EntityGrouping<E, T, K>.eachSumBy(columnSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","description":"org.ktorm.entity.eachSumBy","location":"ktorm-core/org.ktorm.entity/each-sum-by.html","searchKeys":["eachSumBy","inline fun <E : Any, T : BaseTable<E>, K : Any, C : Number> EntityGrouping<E, T, K>.eachSumBy(columnSelector: (T) -> ColumnDeclaring<C>): Map<K?, C?>","org.ktorm.entity.eachSumBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any, M : MutableMap<in K?, in Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any, M : MutableMap<in K?, in Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): Map<K?, Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, C9 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple9<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>, ColumnDeclaring<C9>>): Map<K?, Tuple9<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?, C9?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, M : MutableMap<in K?, in Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any, M : MutableMap<in K?, in Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): Map<K?, Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, C8 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple8<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>, ColumnDeclaring<C8>>): Map<K?, Tuple8<C1?, C2?, C3?, C4?, C5?, C6?, C7?, C8?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, M : MutableMap<in K?, in Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any, M : MutableMap<in K?, in Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): Map<K?, Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, C7 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple7<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>, ColumnDeclaring<C7>>): Map<K?, Tuple7<C1?, C2?, C3?, C4?, C5?, C6?, C7?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, M : MutableMap<in K?, in Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any, M : MutableMap<in K?, in Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): Map<K?, Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, C6 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple6<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>, ColumnDeclaring<C6>>): Map<K?, Tuple6<C1?, C2?, C3?, C4?, C5?, C6?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, M : MutableMap<in K?, in Tuple5<C1?, C2?, C3?, C4?, C5?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any, M : MutableMap<in K?, in Tuple5<C1?, C2?, C3?, C4?, C5?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): Map<K?, Tuple5<C1?, C2?, C3?, C4?, C5?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, C5 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple5<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>, ColumnDeclaring<C5>>): Map<K?, Tuple5<C1?, C2?, C3?, C4?, C5?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, M : MutableMap<in K?, in Tuple4<C1?, C2?, C3?, C4?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any, M : MutableMap<in K?, in Tuple4<C1?, C2?, C3?, C4?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): Map<K?, Tuple4<C1?, C2?, C3?, C4?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, C4 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple4<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>, ColumnDeclaring<C4>>): Map<K?, Tuple4<C1?, C2?, C3?, C4?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, M : MutableMap<in K?, in Tuple3<C1?, C2?, C3?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any, M : MutableMap<in K?, in Tuple3<C1?, C2?, C3?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): Map<K?, Tuple3<C1?, C2?, C3?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, C3 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple3<ColumnDeclaring<C1>, ColumnDeclaring<C2>, ColumnDeclaring<C3>>): Map<K?, Tuple3<C1?, C2?, C3?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, M : MutableMap<in K?, in Tuple2<C1?, C2?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): M","description":"org.ktorm.entity.aggregateColumnsTo","location":"ktorm-core/org.ktorm.entity/aggregate-columns-to.html","searchKeys":["aggregateColumnsTo","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any, M : MutableMap<in K?, in Tuple2<C1?, C2?>>> EntityGrouping<E, T, K>.aggregateColumnsTo(destination: M, aggregationSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): M","org.ktorm.entity.aggregateColumnsTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): Map<K?, Tuple2<C1?, C2?>>","description":"org.ktorm.entity.aggregateColumns","location":"ktorm-core/org.ktorm.entity/aggregate-columns.html","searchKeys":["aggregateColumns","inline fun <E : Any, T : BaseTable<E>, K : Any, C1 : Any, C2 : Any> EntityGrouping<E, T, K>.aggregateColumns(aggregationSelector: (T) -> Tuple2<ColumnDeclaring<C1>, ColumnDeclaring<C2>>): Map<K?, Tuple2<C1?, C2?>>","org.ktorm.entity.aggregateColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any, M : MutableMap<in K?, in Double?>> EntityGrouping<E, T, K>.eachAverageByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<out Number>): M","description":"org.ktorm.entity.eachAverageByTo","location":"ktorm-core/org.ktorm.entity/each-average-by-to.html","searchKeys":["eachAverageByTo","inline fun <E : Any, T : BaseTable<E>, K : Any, M : MutableMap<in K?, in Double?>> EntityGrouping<E, T, K>.eachAverageByTo(destination: M, columnSelector: (T) -> ColumnDeclaring<out Number>): M","org.ktorm.entity.eachAverageByTo"]},{"name":"inline fun <E : Any, T : BaseTable<E>, K : Any> EntityGrouping<E, T, K>.eachAverageBy(columnSelector: (T) -> ColumnDeclaring<out Number>): Map<K?, Double?>","description":"org.ktorm.entity.eachAverageBy","location":"ktorm-core/org.ktorm.entity/each-average-by.html","searchKeys":["eachAverageBy","inline fun <E : Any, T : BaseTable<E>, K : Any> EntityGrouping<E, T, K>.eachAverageBy(columnSelector: (T) -> ColumnDeclaring<out Number>): Map<K?, Double?>","org.ktorm.entity.eachAverageBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.all(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","description":"org.ktorm.entity.all","location":"ktorm-core/org.ktorm.entity/all.html","searchKeys":["all","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.all(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","org.ktorm.entity.all"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.any(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","description":"org.ktorm.entity.any","location":"ktorm-core/org.ktorm.entity/any.html","searchKeys":["any","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.any(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","org.ktorm.entity.any"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.averageBy(selector: (T) -> ColumnDeclaring<out Number>): Double?","description":"org.ktorm.entity.averageBy","location":"ktorm-core/org.ktorm.entity/average-by.html","searchKeys":["averageBy","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.averageBy(selector: (T) -> ColumnDeclaring<out Number>): Double?","org.ktorm.entity.averageBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.count(predicate: (T) -> ColumnDeclaring<Boolean>): Int","description":"org.ktorm.entity.count","location":"ktorm-core/org.ktorm.entity/count.html","searchKeys":["count","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.count(predicate: (T) -> ColumnDeclaring<Boolean>): Int","org.ktorm.entity.count"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.elementAtOrElse(index: Int, defaultValue: (Int) -> E): E","description":"org.ktorm.entity.elementAtOrElse","location":"ktorm-core/org.ktorm.entity/element-at-or-else.html","searchKeys":["elementAtOrElse","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.elementAtOrElse(index: Int, defaultValue: (Int) -> E): E","org.ktorm.entity.elementAtOrElse"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.filter(predicate: (T) -> ColumnDeclaring<Boolean>): EntitySequence<E, T>","description":"org.ktorm.entity.filter","location":"ktorm-core/org.ktorm.entity/filter.html","searchKeys":["filter","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.filter(predicate: (T) -> ColumnDeclaring<Boolean>): EntitySequence<E, T>","org.ktorm.entity.filter"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.filterColumns(selector: (T) -> List<Column<*>>): EntitySequence<E, T>","description":"org.ktorm.entity.filterColumns","location":"ktorm-core/org.ktorm.entity/filter-columns.html","searchKeys":["filterColumns","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.filterColumns(selector: (T) -> List<Column<*>>): EntitySequence<E, T>","org.ktorm.entity.filterColumns"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.filterNot(predicate: (T) -> ColumnDeclaring<Boolean>): EntitySequence<E, T>","description":"org.ktorm.entity.filterNot","location":"ktorm-core/org.ktorm.entity/filter-not.html","searchKeys":["filterNot","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.filterNot(predicate: (T) -> ColumnDeclaring<Boolean>): EntitySequence<E, T>","org.ktorm.entity.filterNot"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.find(predicate: (T) -> ColumnDeclaring<Boolean>): E?","description":"org.ktorm.entity.find","location":"ktorm-core/org.ktorm.entity/find.html","searchKeys":["find","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.find(predicate: (T) -> ColumnDeclaring<Boolean>): E?","org.ktorm.entity.find"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.findLast(predicate: (T) -> ColumnDeclaring<Boolean>): E?","description":"org.ktorm.entity.findLast","location":"ktorm-core/org.ktorm.entity/find-last.html","searchKeys":["findLast","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.findLast(predicate: (T) -> ColumnDeclaring<Boolean>): E?","org.ktorm.entity.findLast"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.first(predicate: (T) -> ColumnDeclaring<Boolean>): E","description":"org.ktorm.entity.first","location":"ktorm-core/org.ktorm.entity/first.html","searchKeys":["first","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.first(predicate: (T) -> ColumnDeclaring<Boolean>): E","org.ktorm.entity.first"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.firstOrNull(predicate: (T) -> ColumnDeclaring<Boolean>): E?","description":"org.ktorm.entity.firstOrNull","location":"ktorm-core/org.ktorm.entity/first-or-null.html","searchKeys":["firstOrNull","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.firstOrNull(predicate: (T) -> ColumnDeclaring<Boolean>): E?","org.ktorm.entity.firstOrNull"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.last(predicate: (T) -> ColumnDeclaring<Boolean>): E","description":"org.ktorm.entity.last","location":"ktorm-core/org.ktorm.entity/last.html","searchKeys":["last","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.last(predicate: (T) -> ColumnDeclaring<Boolean>): E","org.ktorm.entity.last"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.lastOrNull(predicate: (T) -> ColumnDeclaring<Boolean>): E?","description":"org.ktorm.entity.lastOrNull","location":"ktorm-core/org.ktorm.entity/last-or-null.html","searchKeys":["lastOrNull","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.lastOrNull(predicate: (T) -> ColumnDeclaring<Boolean>): E?","org.ktorm.entity.lastOrNull"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.none(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","description":"org.ktorm.entity.none","location":"ktorm-core/org.ktorm.entity/none.html","searchKeys":["none","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.none(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","org.ktorm.entity.none"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.single(predicate: (T) -> ColumnDeclaring<Boolean>): E","description":"org.ktorm.entity.single","location":"ktorm-core/org.ktorm.entity/single.html","searchKeys":["single","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.single(predicate: (T) -> ColumnDeclaring<Boolean>): E","org.ktorm.entity.single"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.singleOrNull(predicate: (T) -> ColumnDeclaring<Boolean>): E?","description":"org.ktorm.entity.singleOrNull","location":"ktorm-core/org.ktorm.entity/single-or-null.html","searchKeys":["singleOrNull","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.singleOrNull(predicate: (T) -> ColumnDeclaring<Boolean>): E?","org.ktorm.entity.singleOrNull"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedBy(selector: (T) -> ColumnDeclaring<*>): EntitySequence<E, T>","description":"org.ktorm.entity.sortedBy","location":"ktorm-core/org.ktorm.entity/sorted-by.html","searchKeys":["sortedBy","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedBy(selector: (T) -> ColumnDeclaring<*>): EntitySequence<E, T>","org.ktorm.entity.sortedBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedBy(selector: (T) -> OrderByExpression): EntitySequence<E, T>","description":"org.ktorm.entity.sortedBy","location":"ktorm-core/org.ktorm.entity/sorted-by.html","searchKeys":["sortedBy","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedBy(selector: (T) -> OrderByExpression): EntitySequence<E, T>","org.ktorm.entity.sortedBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedByDescending(selector: (T) -> ColumnDeclaring<*>): EntitySequence<E, T>","description":"org.ktorm.entity.sortedByDescending","location":"ktorm-core/org.ktorm.entity/sorted-by-descending.html","searchKeys":["sortedByDescending","inline fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.sortedByDescending(selector: (T) -> ColumnDeclaring<*>): EntitySequence<E, T>","org.ktorm.entity.sortedByDescending"]},{"name":"inline fun <E : Any> EntitySequence<E, *>.forEach(action: (E) -> Unit)","description":"org.ktorm.entity.forEach","location":"ktorm-core/org.ktorm.entity/for-each.html","searchKeys":["forEach","inline fun <E : Any> EntitySequence<E, *>.forEach(action: (E) -> Unit)","org.ktorm.entity.forEach"]},{"name":"inline fun <E : Any> EntitySequence<E, *>.forEachIndexed(action: (index: Int, E) -> Unit)","description":"org.ktorm.entity.forEachIndexed","location":"ktorm-core/org.ktorm.entity/for-each-indexed.html","searchKeys":["forEachIndexed","inline fun <E : Any> EntitySequence<E, *>.forEachIndexed(action: (index: Int, E) -> Unit)","org.ktorm.entity.forEachIndexed"]},{"name":"inline fun <E : Any> EntitySequence<E, *>.reduce(operation: (acc: E, E) -> E): E","description":"org.ktorm.entity.reduce","location":"ktorm-core/org.ktorm.entity/reduce.html","searchKeys":["reduce","inline fun <E : Any> EntitySequence<E, *>.reduce(operation: (acc: E, E) -> E): E","org.ktorm.entity.reduce"]},{"name":"inline fun <E : Any> EntitySequence<E, *>.reduceIndexed(operation: (index: Int, acc: E, E) -> E): E","description":"org.ktorm.entity.reduceIndexed","location":"ktorm-core/org.ktorm.entity/reduce-indexed.html","searchKeys":["reduceIndexed","inline fun <E : Any> EntitySequence<E, *>.reduceIndexed(operation: (index: Int, acc: E, E) -> E): E","org.ktorm.entity.reduceIndexed"]},{"name":"inline fun <E : Any> EntitySequence<E, *>.reduceIndexedOrNull(operation: (index: Int, acc: E, E) -> E): E?","description":"org.ktorm.entity.reduceIndexedOrNull","location":"ktorm-core/org.ktorm.entity/reduce-indexed-or-null.html","searchKeys":["reduceIndexedOrNull","inline fun <E : Any> EntitySequence<E, *>.reduceIndexedOrNull(operation: (index: Int, acc: E, E) -> E): E?","org.ktorm.entity.reduceIndexedOrNull"]},{"name":"inline fun <E : Any> EntitySequence<E, *>.reduceOrNull(operation: (acc: E, E) -> E): E?","description":"org.ktorm.entity.reduceOrNull","location":"ktorm-core/org.ktorm.entity/reduce-or-null.html","searchKeys":["reduceOrNull","inline fun <E : Any> EntitySequence<E, *>.reduceOrNull(operation: (acc: E, E) -> E): E?","org.ktorm.entity.reduceOrNull"]},{"name":"inline fun <E : Entity<E>> create(): E","description":"org.ktorm.entity.Entity.Companion.create","location":"ktorm-core/org.ktorm.entity/-entity/-companion/create.html","searchKeys":["create","inline fun <E : Entity<E>> create(): E","org.ktorm.entity.Entity.Companion.create"]},{"name":"inline fun <K : Entity<K>, V, M : MutableMap<in K, in V>> EntitySequence<K, *>.associateWithTo(destination: M, valueSelector: (K) -> V): M","description":"org.ktorm.entity.associateWithTo","location":"ktorm-core/org.ktorm.entity/associate-with-to.html","searchKeys":["associateWithTo","inline fun <K : Entity<K>, V, M : MutableMap<in K, in V>> EntitySequence<K, *>.associateWithTo(destination: M, valueSelector: (K) -> V): M","org.ktorm.entity.associateWithTo"]},{"name":"inline fun <K : Entity<K>, V> EntitySequence<K, *>.associateWith(valueSelector: (K) -> V): Map<K, V>","description":"org.ktorm.entity.associateWith","location":"ktorm-core/org.ktorm.entity/associate-with.html","searchKeys":["associateWith","inline fun <K : Entity<K>, V> EntitySequence<K, *>.associateWith(valueSelector: (K) -> V): Map<K, V>","org.ktorm.entity.associateWith"]},{"name":"inline fun <K, V, M : MutableMap<in K, in V>> Query.associateByTo(destination: M, keySelector: (row: QueryRowSet) -> K, valueTransform: (row: QueryRowSet) -> V): M","description":"org.ktorm.dsl.associateByTo","location":"ktorm-core/org.ktorm.dsl/associate-by-to.html","searchKeys":["associateByTo","inline fun <K, V, M : MutableMap<in K, in V>> Query.associateByTo(destination: M, keySelector: (row: QueryRowSet) -> K, valueTransform: (row: QueryRowSet) -> V): M","org.ktorm.dsl.associateByTo"]},{"name":"inline fun <K, V, M : MutableMap<in K, in V>> Query.associateTo(destination: M, transform: (row: QueryRowSet) -> Pair<K, V>): M","description":"org.ktorm.dsl.associateTo","location":"ktorm-core/org.ktorm.dsl/associate-to.html","searchKeys":["associateTo","inline fun <K, V, M : MutableMap<in K, in V>> Query.associateTo(destination: M, transform: (row: QueryRowSet) -> Pair<K, V>): M","org.ktorm.dsl.associateTo"]},{"name":"inline fun <K, V> Query.associate(transform: (row: QueryRowSet) -> Pair<K, V>): Map<K, V>","description":"org.ktorm.dsl.associate","location":"ktorm-core/org.ktorm.dsl/associate.html","searchKeys":["associate","inline fun <K, V> Query.associate(transform: (row: QueryRowSet) -> Pair<K, V>): Map<K, V>","org.ktorm.dsl.associate"]},{"name":"inline fun <K, V> Query.associateBy(keySelector: (row: QueryRowSet) -> K, valueTransform: (row: QueryRowSet) -> V): Map<K, V>","description":"org.ktorm.dsl.associateBy","location":"ktorm-core/org.ktorm.dsl/associate-by.html","searchKeys":["associateBy","inline fun <K, V> Query.associateBy(keySelector: (row: QueryRowSet) -> K, valueTransform: (row: QueryRowSet) -> V): Map<K, V>","org.ktorm.dsl.associateBy"]},{"name":"inline fun <R : Any, C : MutableCollection<in R>> Query.mapIndexedNotNullTo(destination: C, transform: (index: Int, row: QueryRowSet) -> R?): C","description":"org.ktorm.dsl.mapIndexedNotNullTo","location":"ktorm-core/org.ktorm.dsl/map-indexed-not-null-to.html","searchKeys":["mapIndexedNotNullTo","inline fun <R : Any, C : MutableCollection<in R>> Query.mapIndexedNotNullTo(destination: C, transform: (index: Int, row: QueryRowSet) -> R?): C","org.ktorm.dsl.mapIndexedNotNullTo"]},{"name":"inline fun <R : Any, C : MutableCollection<in R>> Query.mapNotNullTo(destination: C, transform: (row: QueryRowSet) -> R?): C","description":"org.ktorm.dsl.mapNotNullTo","location":"ktorm-core/org.ktorm.dsl/map-not-null-to.html","searchKeys":["mapNotNullTo","inline fun <R : Any, C : MutableCollection<in R>> Query.mapNotNullTo(destination: C, transform: (row: QueryRowSet) -> R?): C","org.ktorm.dsl.mapNotNullTo"]},{"name":"inline fun <R : Any> Query.mapIndexedNotNull(transform: (index: Int, row: QueryRowSet) -> R?): List<R>","description":"org.ktorm.dsl.mapIndexedNotNull","location":"ktorm-core/org.ktorm.dsl/map-indexed-not-null.html","searchKeys":["mapIndexedNotNull","inline fun <R : Any> Query.mapIndexedNotNull(transform: (index: Int, row: QueryRowSet) -> R?): List<R>","org.ktorm.dsl.mapIndexedNotNull"]},{"name":"inline fun <R : Any> Query.mapNotNull(transform: (row: QueryRowSet) -> R?): List<R>","description":"org.ktorm.dsl.mapNotNull","location":"ktorm-core/org.ktorm.dsl/map-not-null.html","searchKeys":["mapNotNull","inline fun <R : Any> Query.mapNotNull(transform: (row: QueryRowSet) -> R?): List<R>","org.ktorm.dsl.mapNotNull"]},{"name":"inline fun <R, C : MutableCollection<in R>> Query.flatMapIndexedTo(destination: C, transform: (index: Int, row: QueryRowSet) -> Iterable<R>): C","description":"org.ktorm.dsl.flatMapIndexedTo","location":"ktorm-core/org.ktorm.dsl/flat-map-indexed-to.html","searchKeys":["flatMapIndexedTo","inline fun <R, C : MutableCollection<in R>> Query.flatMapIndexedTo(destination: C, transform: (index: Int, row: QueryRowSet) -> Iterable<R>): C","org.ktorm.dsl.flatMapIndexedTo"]},{"name":"inline fun <R, C : MutableCollection<in R>> Query.flatMapTo(destination: C, transform: (row: QueryRowSet) -> Iterable<R>): C","description":"org.ktorm.dsl.flatMapTo","location":"ktorm-core/org.ktorm.dsl/flat-map-to.html","searchKeys":["flatMapTo","inline fun <R, C : MutableCollection<in R>> Query.flatMapTo(destination: C, transform: (row: QueryRowSet) -> Iterable<R>): C","org.ktorm.dsl.flatMapTo"]},{"name":"inline fun <R, C : MutableCollection<in R>> Query.mapIndexedTo(destination: C, transform: (index: Int, row: QueryRowSet) -> R): C","description":"org.ktorm.dsl.mapIndexedTo","location":"ktorm-core/org.ktorm.dsl/map-indexed-to.html","searchKeys":["mapIndexedTo","inline fun <R, C : MutableCollection<in R>> Query.mapIndexedTo(destination: C, transform: (index: Int, row: QueryRowSet) -> R): C","org.ktorm.dsl.mapIndexedTo"]},{"name":"inline fun <R, C : MutableCollection<in R>> Query.mapTo(destination: C, transform: (row: QueryRowSet) -> R): C","description":"org.ktorm.dsl.mapTo","location":"ktorm-core/org.ktorm.dsl/map-to.html","searchKeys":["mapTo","inline fun <R, C : MutableCollection<in R>> Query.mapTo(destination: C, transform: (row: QueryRowSet) -> R): C","org.ktorm.dsl.mapTo"]},{"name":"inline fun <R> Query.flatMap(transform: (row: QueryRowSet) -> Iterable<R>): List<R>","description":"org.ktorm.dsl.flatMap","location":"ktorm-core/org.ktorm.dsl/flat-map.html","searchKeys":["flatMap","inline fun <R> Query.flatMap(transform: (row: QueryRowSet) -> Iterable<R>): List<R>","org.ktorm.dsl.flatMap"]},{"name":"inline fun <R> Query.flatMapIndexed(transform: (index: Int, row: QueryRowSet) -> Iterable<R>): List<R>","description":"org.ktorm.dsl.flatMapIndexed","location":"ktorm-core/org.ktorm.dsl/flat-map-indexed.html","searchKeys":["flatMapIndexed","inline fun <R> Query.flatMapIndexed(transform: (index: Int, row: QueryRowSet) -> Iterable<R>): List<R>","org.ktorm.dsl.flatMapIndexed"]},{"name":"inline fun <R> Query.fold(initial: R, operation: (acc: R, row: QueryRowSet) -> R): R","description":"org.ktorm.dsl.fold","location":"ktorm-core/org.ktorm.dsl/fold.html","searchKeys":["fold","inline fun <R> Query.fold(initial: R, operation: (acc: R, row: QueryRowSet) -> R): R","org.ktorm.dsl.fold"]},{"name":"inline fun <R> Query.foldIndexed(initial: R, operation: (index: Int, acc: R, row: QueryRowSet) -> R): R","description":"org.ktorm.dsl.foldIndexed","location":"ktorm-core/org.ktorm.dsl/fold-indexed.html","searchKeys":["foldIndexed","inline fun <R> Query.foldIndexed(initial: R, operation: (index: Int, acc: R, row: QueryRowSet) -> R): R","org.ktorm.dsl.foldIndexed"]},{"name":"inline fun <R> Query.map(transform: (row: QueryRowSet) -> R): List<R>","description":"org.ktorm.dsl.map","location":"ktorm-core/org.ktorm.dsl/map.html","searchKeys":["map","inline fun <R> Query.map(transform: (row: QueryRowSet) -> R): List<R>","org.ktorm.dsl.map"]},{"name":"inline fun <R> Query.mapIndexed(transform: (index: Int, row: QueryRowSet) -> R): List<R>","description":"org.ktorm.dsl.mapIndexed","location":"ktorm-core/org.ktorm.dsl/map-indexed.html","searchKeys":["mapIndexed","inline fun <R> Query.mapIndexed(transform: (index: Int, row: QueryRowSet) -> R): List<R>","org.ktorm.dsl.mapIndexed"]},{"name":"inline fun <T : Any, R : Any> CaseWhen<T, R>.ELSE(result: R, sqlType: SqlType<R> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): CaseWhen<T, R>","description":"org.ktorm.dsl.ELSE","location":"ktorm-core/org.ktorm.dsl/-e-l-s-e.html","searchKeys":["ELSE","inline fun <T : Any, R : Any> CaseWhen<T, R>.ELSE(result: R, sqlType: SqlType<R> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): CaseWhen<T, R>","org.ktorm.dsl.ELSE"]},{"name":"inline fun <T : Any, R : Any> CaseWhen<T, R>.WHEN(condition: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): WhenContinuation<T, R>","description":"org.ktorm.dsl.WHEN","location":"ktorm-core/org.ktorm.dsl/-w-h-e-n.html","searchKeys":["WHEN","inline fun <T : Any, R : Any> CaseWhen<T, R>.WHEN(condition: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): WhenContinuation<T, R>","org.ktorm.dsl.WHEN"]},{"name":"inline fun <T : Any, R : Any> WhenContinuation<T, Nothing>.THEN(result: R, sqlType: SqlType<R> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): CaseWhen<T, R>","description":"org.ktorm.dsl.THEN","location":"ktorm-core/org.ktorm.dsl/-t-h-e-n.html","searchKeys":["THEN","inline fun <T : Any, R : Any> WhenContinuation<T, Nothing>.THEN(result: R, sqlType: SqlType<R> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): CaseWhen<T, R>","org.ktorm.dsl.THEN"]},{"name":"inline fun <T : Any, R : Any> WhenContinuation<T, R>.THEN(result: R, sqlType: SqlType<R> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): CaseWhen<T, R>","description":"org.ktorm.dsl.THEN","location":"ktorm-core/org.ktorm.dsl/-t-h-e-n.html","searchKeys":["THEN","inline fun <T : Any, R : Any> WhenContinuation<T, R>.THEN(result: R, sqlType: SqlType<R> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): CaseWhen<T, R>","org.ktorm.dsl.THEN"]},{"name":"inline fun <T : Any> AggregateExpression<T>.over(configure: WindowSpecificationExpression.() -> WindowSpecificationExpression): WindowFunctionExpression<T>","description":"org.ktorm.dsl.over","location":"ktorm-core/org.ktorm.dsl/over.html","searchKeys":["over","inline fun <T : Any> AggregateExpression<T>.over(configure: WindowSpecificationExpression.() -> WindowSpecificationExpression): WindowFunctionExpression<T>","org.ktorm.dsl.over"]},{"name":"inline fun <T : Any> WindowFunctionExpression<T>.over(configure: WindowSpecificationExpression.() -> WindowSpecificationExpression): WindowFunctionExpression<T>","description":"org.ktorm.dsl.over","location":"ktorm-core/org.ktorm.dsl/over.html","searchKeys":["over","inline fun <T : Any> WindowFunctionExpression<T>.over(configure: WindowSpecificationExpression.() -> WindowSpecificationExpression): WindowFunctionExpression<T>","org.ktorm.dsl.over"]},{"name":"inline fun <T : Any> of(): SqlType<T>?","description":"org.ktorm.schema.SqlType.Companion.of","location":"ktorm-core/org.ktorm.schema/-sql-type/-companion/of.html","searchKeys":["of","inline fun <T : Any> of(): SqlType<T>?","org.ktorm.schema.SqlType.Companion.of"]},{"name":"inline fun <T : AutoCloseable?, R> T.use(block: (T) -> R): R","description":"org.ktorm.database.use","location":"ktorm-core/org.ktorm.database/use.html","searchKeys":["use","inline fun <T : AutoCloseable?, R> T.use(block: (T) -> R): R","org.ktorm.database.use"]},{"name":"inline fun <T : Number> following(n: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): WindowFrameBoundExpression","description":"org.ktorm.dsl.WindowFrames.following","location":"ktorm-core/org.ktorm.dsl/-window-frames/following.html","searchKeys":["following","inline fun <T : Number> following(n: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): WindowFrameBoundExpression","org.ktorm.dsl.WindowFrames.following"]},{"name":"inline fun <T : Number> preceding(n: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): WindowFrameBoundExpression","description":"org.ktorm.dsl.WindowFrames.preceding","location":"ktorm-core/org.ktorm.dsl/-window-frames/preceding.html","searchKeys":["preceding","inline fun <T : Number> preceding(n: T, sqlType: SqlType<T> = SqlType.of() ?: error(\"Cannot detect the argument's SqlType, please specify manually.\")): WindowFrameBoundExpression","org.ktorm.dsl.WindowFrames.preceding"]},{"name":"inline fun <T> executeExpression(expression: SqlExpression, func: (PreparedStatement) -> T): T","description":"org.ktorm.database.Database.executeExpression","location":"ktorm-core/org.ktorm.database/-database/execute-expression.html","searchKeys":["executeExpression","inline fun <T> executeExpression(expression: SqlExpression, func: (PreparedStatement) -> T): T","org.ktorm.database.Database.executeExpression"]},{"name":"inline fun <T> kotlinTypeOf(): KType","description":"org.ktorm.schema.kotlinTypeOf","location":"ktorm-core/org.ktorm.schema/kotlin-type-of.html","searchKeys":["kotlinTypeOf","inline fun <T> kotlinTypeOf(): KType","org.ktorm.schema.kotlinTypeOf"]},{"name":"inline fun <T> typeOf(): Type","description":"org.ktorm.schema.typeOf","location":"ktorm-core/org.ktorm.schema/type-of.html","searchKeys":["typeOf","inline fun <T> typeOf(): Type","org.ktorm.schema.typeOf"]},{"name":"inline fun <T> typeRef(): TypeReference<T>","description":"org.ktorm.schema.typeRef","location":"ktorm-core/org.ktorm.schema/type-ref.html","searchKeys":["typeRef","inline fun <T> typeRef(): TypeReference<T>","org.ktorm.schema.typeRef"]},{"name":"inline fun <T> useConnection(func: (Connection) -> T): T","description":"org.ktorm.database.Database.useConnection","location":"ktorm-core/org.ktorm.database/-database/use-connection.html","searchKeys":["useConnection","inline fun <T> useConnection(func: (Connection) -> T): T","org.ktorm.database.Database.useConnection"]},{"name":"inline fun <T> useTransaction(isolation: TransactionIsolation? = null, func: (Transaction) -> T): T","description":"org.ktorm.database.Database.useTransaction","location":"ktorm-core/org.ktorm.database/-database/use-transaction.html","searchKeys":["useTransaction","inline fun <T> useTransaction(isolation: TransactionIsolation? = null, func: (Transaction) -> T): T","org.ktorm.database.Database.useTransaction"]},{"name":"inline fun Query.forEach(action: (row: QueryRowSet) -> Unit)","description":"org.ktorm.dsl.forEach","location":"ktorm-core/org.ktorm.dsl/for-each.html","searchKeys":["forEach","inline fun Query.forEach(action: (row: QueryRowSet) -> Unit)","org.ktorm.dsl.forEach"]},{"name":"inline fun Query.forEachIndexed(action: (index: Int, row: QueryRowSet) -> Unit)","description":"org.ktorm.dsl.forEachIndexed","location":"ktorm-core/org.ktorm.dsl/for-each-indexed.html","searchKeys":["forEachIndexed","inline fun Query.forEachIndexed(action: (index: Int, row: QueryRowSet) -> Unit)","org.ktorm.dsl.forEachIndexed"]},{"name":"inline fun Query.having(condition: () -> ColumnDeclaring<Boolean>): Query","description":"org.ktorm.dsl.having","location":"ktorm-core/org.ktorm.dsl/having.html","searchKeys":["having","inline fun Query.having(condition: () -> ColumnDeclaring<Boolean>): Query","org.ktorm.dsl.having"]},{"name":"inline fun Query.where(condition: () -> ColumnDeclaring<Boolean>): Query","description":"org.ktorm.dsl.where","location":"ktorm-core/org.ktorm.dsl/where.html","searchKeys":["where","inline fun Query.where(condition: () -> ColumnDeclaring<Boolean>): Query","org.ktorm.dsl.where"]},{"name":"inline fun Query.whereWithConditions(block: (MutableList<ColumnDeclaring<Boolean>>) -> Unit): Query","description":"org.ktorm.dsl.whereWithConditions","location":"ktorm-core/org.ktorm.dsl/where-with-conditions.html","searchKeys":["whereWithConditions","inline fun Query.whereWithConditions(block: (MutableList<ColumnDeclaring<Boolean>>) -> Unit): Query","org.ktorm.dsl.whereWithConditions"]},{"name":"inline fun Query.whereWithOrConditions(block: (MutableList<ColumnDeclaring<Boolean>>) -> Unit): Query","description":"org.ktorm.dsl.whereWithOrConditions","location":"ktorm-core/org.ktorm.dsl/where-with-or-conditions.html","searchKeys":["whereWithOrConditions","inline fun Query.whereWithOrConditions(block: (MutableList<ColumnDeclaring<Boolean>>) -> Unit): Query","org.ktorm.dsl.whereWithOrConditions"]},{"name":"inline operator fun invoke(init: E.() -> Unit): E","description":"org.ktorm.entity.Entity.Factory.invoke","location":"ktorm-core/org.ktorm.entity/-entity/-factory/invoke.html","searchKeys":["invoke","inline operator fun invoke(init: E.() -> Unit): E","org.ktorm.entity.Entity.Factory.invoke"]},{"name":"interface ColumnDeclaring<T : Any>","description":"org.ktorm.schema.ColumnDeclaring","location":"ktorm-core/org.ktorm.schema/-column-declaring/index.html","searchKeys":["ColumnDeclaring","interface ColumnDeclaring<T : Any>","org.ktorm.schema.ColumnDeclaring"]},{"name":"interface Entity<E : Entity<E>> : Serializable","description":"org.ktorm.entity.Entity","location":"ktorm-core/org.ktorm.entity/-entity/index.html","searchKeys":["Entity","interface Entity<E : Entity<E>> : Serializable","org.ktorm.entity.Entity"]},{"name":"interface Logger","description":"org.ktorm.logging.Logger","location":"ktorm-core/org.ktorm.logging/-logger/index.html","searchKeys":["Logger","interface Logger","org.ktorm.logging.Logger"]},{"name":"interface SqlDialect","description":"org.ktorm.database.SqlDialect","location":"ktorm-core/org.ktorm.database/-sql-dialect/index.html","searchKeys":["SqlDialect","interface SqlDialect","org.ktorm.database.SqlDialect"]},{"name":"interface SqlExpressionVisitor","description":"org.ktorm.expression.SqlExpressionVisitor","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/index.html","searchKeys":["SqlExpressionVisitor","interface SqlExpressionVisitor","org.ktorm.expression.SqlExpressionVisitor"]},{"name":"interface SqlExpressionVisitorInterceptor","description":"org.ktorm.expression.SqlExpressionVisitorInterceptor","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor-interceptor/index.html","searchKeys":["SqlExpressionVisitorInterceptor","interface SqlExpressionVisitorInterceptor","org.ktorm.expression.SqlExpressionVisitorInterceptor"]},{"name":"interface Transaction : Closeable","description":"org.ktorm.database.Transaction","location":"ktorm-core/org.ktorm.database/-transaction/index.html","searchKeys":["Transaction","interface Transaction : Closeable","org.ktorm.database.Transaction"]},{"name":"interface TransactionManager","description":"org.ktorm.database.TransactionManager","location":"ktorm-core/org.ktorm.database/-transaction-manager/index.html","searchKeys":["TransactionManager","interface TransactionManager","org.ktorm.database.TransactionManager"]},{"name":"object AliasRemover : SqlExpressionVisitorInterceptor","description":"org.ktorm.dsl.AliasRemover","location":"ktorm-core/org.ktorm.dsl/-alias-remover/index.html","searchKeys":["AliasRemover","object AliasRemover : SqlExpressionVisitorInterceptor","org.ktorm.dsl.AliasRemover"]},{"name":"object BlobSqlType : SqlType<ByteArray> ","description":"org.ktorm.schema.BlobSqlType","location":"ktorm-core/org.ktorm.schema/-blob-sql-type/index.html","searchKeys":["BlobSqlType","object BlobSqlType : SqlType<ByteArray> ","org.ktorm.schema.BlobSqlType"]},{"name":"object BooleanSqlType : SqlType<Boolean> ","description":"org.ktorm.schema.BooleanSqlType","location":"ktorm-core/org.ktorm.schema/-boolean-sql-type/index.html","searchKeys":["BooleanSqlType","object BooleanSqlType : SqlType<Boolean> ","org.ktorm.schema.BooleanSqlType"]},{"name":"object BytesSqlType : SqlType<ByteArray> ","description":"org.ktorm.schema.BytesSqlType","location":"ktorm-core/org.ktorm.schema/-bytes-sql-type/index.html","searchKeys":["BytesSqlType","object BytesSqlType : SqlType<ByteArray> ","org.ktorm.schema.BytesSqlType"]},{"name":"object Companion","description":"org.ktorm.database.Database.Companion","location":"ktorm-core/org.ktorm.database/-database/-companion/index.html","searchKeys":["Companion","object Companion","org.ktorm.database.Database.Companion"]},{"name":"object Companion","description":"org.ktorm.database.TransactionIsolation.Companion","location":"ktorm-core/org.ktorm.database/-transaction-isolation/-companion/index.html","searchKeys":["Companion","object Companion","org.ktorm.database.TransactionIsolation.Companion"]},{"name":"object Companion","description":"org.ktorm.entity.Entity.Companion","location":"ktorm-core/org.ktorm.entity/-entity/-companion/index.html","searchKeys":["Companion","object Companion","org.ktorm.entity.Entity.Companion"]},{"name":"object Companion","description":"org.ktorm.schema.SqlType.Companion","location":"ktorm-core/org.ktorm.schema/-sql-type/-companion/index.html","searchKeys":["Companion","object Companion","org.ktorm.schema.SqlType.Companion"]},{"name":"object DateSqlType : SqlType<Date> ","description":"org.ktorm.schema.DateSqlType","location":"ktorm-core/org.ktorm.schema/-date-sql-type/index.html","searchKeys":["DateSqlType","object DateSqlType : SqlType<Date> ","org.ktorm.schema.DateSqlType"]},{"name":"object DecimalSqlType : SqlType<BigDecimal> ","description":"org.ktorm.schema.DecimalSqlType","location":"ktorm-core/org.ktorm.schema/-decimal-sql-type/index.html","searchKeys":["DecimalSqlType","object DecimalSqlType : SqlType<BigDecimal> ","org.ktorm.schema.DecimalSqlType"]},{"name":"object DoubleSqlType : SqlType<Double> ","description":"org.ktorm.schema.DoubleSqlType","location":"ktorm-core/org.ktorm.schema/-double-sql-type/index.html","searchKeys":["DoubleSqlType","object DoubleSqlType : SqlType<Double> ","org.ktorm.schema.DoubleSqlType"]},{"name":"object FloatSqlType : SqlType<Float> ","description":"org.ktorm.schema.FloatSqlType","location":"ktorm-core/org.ktorm.schema/-float-sql-type/index.html","searchKeys":["FloatSqlType","object FloatSqlType : SqlType<Float> ","org.ktorm.schema.FloatSqlType"]},{"name":"object InstantSqlType : SqlType<Instant> ","description":"org.ktorm.schema.InstantSqlType","location":"ktorm-core/org.ktorm.schema/-instant-sql-type/index.html","searchKeys":["InstantSqlType","object InstantSqlType : SqlType<Instant> ","org.ktorm.schema.InstantSqlType"]},{"name":"object IntSqlType : SqlType<Int> ","description":"org.ktorm.schema.IntSqlType","location":"ktorm-core/org.ktorm.schema/-int-sql-type/index.html","searchKeys":["IntSqlType","object IntSqlType : SqlType<Int> ","org.ktorm.schema.IntSqlType"]},{"name":"object LocalDateSqlType : SqlType<LocalDate> ","description":"org.ktorm.schema.LocalDateSqlType","location":"ktorm-core/org.ktorm.schema/-local-date-sql-type/index.html","searchKeys":["LocalDateSqlType","object LocalDateSqlType : SqlType<LocalDate> ","org.ktorm.schema.LocalDateSqlType"]},{"name":"object LocalDateTimeSqlType : SqlType<LocalDateTime> ","description":"org.ktorm.schema.LocalDateTimeSqlType","location":"ktorm-core/org.ktorm.schema/-local-date-time-sql-type/index.html","searchKeys":["LocalDateTimeSqlType","object LocalDateTimeSqlType : SqlType<LocalDateTime> ","org.ktorm.schema.LocalDateTimeSqlType"]},{"name":"object LocalTimeSqlType : SqlType<LocalTime> ","description":"org.ktorm.schema.LocalTimeSqlType","location":"ktorm-core/org.ktorm.schema/-local-time-sql-type/index.html","searchKeys":["LocalTimeSqlType","object LocalTimeSqlType : SqlType<LocalTime> ","org.ktorm.schema.LocalTimeSqlType"]},{"name":"object LongSqlType : SqlType<Long> ","description":"org.ktorm.schema.LongSqlType","location":"ktorm-core/org.ktorm.schema/-long-sql-type/index.html","searchKeys":["LongSqlType","object LongSqlType : SqlType<Long> ","org.ktorm.schema.LongSqlType"]},{"name":"object MonthDaySqlType : SqlType<MonthDay> ","description":"org.ktorm.schema.MonthDaySqlType","location":"ktorm-core/org.ktorm.schema/-month-day-sql-type/index.html","searchKeys":["MonthDaySqlType","object MonthDaySqlType : SqlType<MonthDay> ","org.ktorm.schema.MonthDaySqlType"]},{"name":"object NoOpLogger : Logger","description":"org.ktorm.logging.NoOpLogger","location":"ktorm-core/org.ktorm.logging/-no-op-logger/index.html","searchKeys":["NoOpLogger","object NoOpLogger : Logger","org.ktorm.logging.NoOpLogger"]},{"name":"object ShortSqlType : SqlType<Short> ","description":"org.ktorm.schema.ShortSqlType","location":"ktorm-core/org.ktorm.schema/-short-sql-type/index.html","searchKeys":["ShortSqlType","object ShortSqlType : SqlType<Short> ","org.ktorm.schema.ShortSqlType"]},{"name":"object TextSqlType : SqlType<String> ","description":"org.ktorm.schema.TextSqlType","location":"ktorm-core/org.ktorm.schema/-text-sql-type/index.html","searchKeys":["TextSqlType","object TextSqlType : SqlType<String> ","org.ktorm.schema.TextSqlType"]},{"name":"object TimeSqlType : SqlType<Time> ","description":"org.ktorm.schema.TimeSqlType","location":"ktorm-core/org.ktorm.schema/-time-sql-type/index.html","searchKeys":["TimeSqlType","object TimeSqlType : SqlType<Time> ","org.ktorm.schema.TimeSqlType"]},{"name":"object TimestampSqlType : SqlType<Timestamp> ","description":"org.ktorm.schema.TimestampSqlType","location":"ktorm-core/org.ktorm.schema/-timestamp-sql-type/index.html","searchKeys":["TimestampSqlType","object TimestampSqlType : SqlType<Timestamp> ","org.ktorm.schema.TimestampSqlType"]},{"name":"object UuidSqlType : SqlType<UUID> ","description":"org.ktorm.schema.UuidSqlType","location":"ktorm-core/org.ktorm.schema/-uuid-sql-type/index.html","searchKeys":["UuidSqlType","object UuidSqlType : SqlType<UUID> ","org.ktorm.schema.UuidSqlType"]},{"name":"object VarcharSqlType : SqlType<String> ","description":"org.ktorm.schema.VarcharSqlType","location":"ktorm-core/org.ktorm.schema/-varchar-sql-type/index.html","searchKeys":["VarcharSqlType","object VarcharSqlType : SqlType<String> ","org.ktorm.schema.VarcharSqlType"]},{"name":"object WindowFrames","description":"org.ktorm.dsl.WindowFrames","location":"ktorm-core/org.ktorm.dsl/-window-frames/index.html","searchKeys":["WindowFrames","object WindowFrames","org.ktorm.dsl.WindowFrames"]},{"name":"object YearMonthSqlType : SqlType<YearMonth> ","description":"org.ktorm.schema.YearMonthSqlType","location":"ktorm-core/org.ktorm.schema/-year-month-sql-type/index.html","searchKeys":["YearMonthSqlType","object YearMonthSqlType : SqlType<YearMonth> ","org.ktorm.schema.YearMonthSqlType"]},{"name":"object YearSqlType : SqlType<Year> ","description":"org.ktorm.schema.YearSqlType","location":"ktorm-core/org.ktorm.schema/-year-sql-type/index.html","searchKeys":["YearSqlType","object YearSqlType : SqlType<Year> ","org.ktorm.schema.YearSqlType"]},{"name":"open class AssignmentsBuilder","description":"org.ktorm.dsl.AssignmentsBuilder","location":"ktorm-core/org.ktorm.dsl/-assignments-builder/index.html","searchKeys":["AssignmentsBuilder","open class AssignmentsBuilder","org.ktorm.dsl.AssignmentsBuilder"]},{"name":"open class CachedRowSet(rs: ResultSet) : ResultSet","description":"org.ktorm.database.CachedRowSet","location":"ktorm-core/org.ktorm.database/-cached-row-set/index.html","searchKeys":["CachedRowSet","open class CachedRowSet(rs: ResultSet) : ResultSet","org.ktorm.database.CachedRowSet"]},{"name":"open class Table<E : Entity<E>>(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null) : BaseTable<E> ","description":"org.ktorm.schema.Table","location":"ktorm-core/org.ktorm.schema/-table/index.html","searchKeys":["Table","open class Table<E : Entity<E>>(tableName: String, alias: String? = null, catalog: String? = null, schema: String? = null, entityClass: KClass<E>? = null) : BaseTable<E> ","org.ktorm.schema.Table"]},{"name":"open fun <R : Any> transform(fromUnderlyingValue: (T) -> R, toUnderlyingValue: (R) -> T): SqlType<R>","description":"org.ktorm.schema.SqlType.transform","location":"ktorm-core/org.ktorm.schema/-sql-type/transform.html","searchKeys":["transform","open fun <R : Any> transform(fromUnderlyingValue: (T) -> R, toUnderlyingValue: (R) -> T): SqlType<R>","org.ktorm.schema.SqlType.transform"]},{"name":"open fun <T : Any> visitAggregate(expr: AggregateExpression<T>): AggregateExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitAggregate","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-aggregate.html","searchKeys":["visitAggregate","open fun <T : Any> visitAggregate(expr: AggregateExpression<T>): AggregateExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitAggregate"]},{"name":"open fun <T : Any> visitArgument(expr: ArgumentExpression<T>): ArgumentExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitArgument","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-argument.html","searchKeys":["visitArgument","open fun <T : Any> visitArgument(expr: ArgumentExpression<T>): ArgumentExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitArgument"]},{"name":"open fun <T : Any> visitBinary(expr: BinaryExpression<T>): BinaryExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitBinary","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-binary.html","searchKeys":["visitBinary","open fun <T : Any> visitBinary(expr: BinaryExpression<T>): BinaryExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitBinary"]},{"name":"open fun <T : Any> visitCaseWhen(expr: CaseWhenExpression<T>): CaseWhenExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitCaseWhen","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-case-when.html","searchKeys":["visitCaseWhen","open fun <T : Any> visitCaseWhen(expr: CaseWhenExpression<T>): CaseWhenExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitCaseWhen"]},{"name":"open fun <T : Any> visitCasting(expr: CastingExpression<T>): CastingExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitCasting","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-casting.html","searchKeys":["visitCasting","open fun <T : Any> visitCasting(expr: CastingExpression<T>): CastingExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitCasting"]},{"name":"open fun <T : Any> visitColumn(expr: ColumnExpression<T>): ColumnExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitColumn","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-column.html","searchKeys":["visitColumn","open fun <T : Any> visitColumn(expr: ColumnExpression<T>): ColumnExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitColumn"]},{"name":"open fun <T : Any> visitColumnAssignment(expr: ColumnAssignmentExpression<T>): ColumnAssignmentExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitColumnAssignment","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-column-assignment.html","searchKeys":["visitColumnAssignment","open fun <T : Any> visitColumnAssignment(expr: ColumnAssignmentExpression<T>): ColumnAssignmentExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitColumnAssignment"]},{"name":"open fun <T : Any> visitColumnDeclaring(expr: ColumnDeclaringExpression<T>): ColumnDeclaringExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitColumnDeclaring","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-column-declaring.html","searchKeys":["visitColumnDeclaring","open fun <T : Any> visitColumnDeclaring(expr: ColumnDeclaringExpression<T>): ColumnDeclaringExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitColumnDeclaring"]},{"name":"open fun <T : Any> visitFunction(expr: FunctionExpression<T>): FunctionExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitFunction","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-function.html","searchKeys":["visitFunction","open fun <T : Any> visitFunction(expr: FunctionExpression<T>): FunctionExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitFunction"]},{"name":"open fun <T : Any> visitScalar(expr: ScalarExpression<T>): ScalarExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitScalar","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-scalar.html","searchKeys":["visitScalar","open fun <T : Any> visitScalar(expr: ScalarExpression<T>): ScalarExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitScalar"]},{"name":"open fun <T : Any> visitUnary(expr: UnaryExpression<T>): UnaryExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitUnary","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-unary.html","searchKeys":["visitUnary","open fun <T : Any> visitUnary(expr: UnaryExpression<T>): UnaryExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitUnary"]},{"name":"open fun <T : Any> visitWhenClauses(originalClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>): List<Pair<ScalarExpression<*>, ScalarExpression<T>>>","description":"org.ktorm.expression.SqlExpressionVisitor.visitWhenClauses","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-when-clauses.html","searchKeys":["visitWhenClauses","open fun <T : Any> visitWhenClauses(originalClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>): List<Pair<ScalarExpression<*>, ScalarExpression<T>>>","org.ktorm.expression.SqlExpressionVisitor.visitWhenClauses"]},{"name":"open fun <T : Any> visitWindowFunction(expr: WindowFunctionExpression<T>): WindowFunctionExpression<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitWindowFunction","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-window-function.html","searchKeys":["visitWindowFunction","open fun <T : Any> visitWindowFunction(expr: WindowFunctionExpression<T>): WindowFunctionExpression<T>","org.ktorm.expression.SqlExpressionVisitor.visitWindowFunction"]},{"name":"open fun <T : SqlExpression> visitExpressionList(original: List<T>, subVisitor: (T) -> T = { visit(it) as T }): List<T>","description":"org.ktorm.expression.SqlExpressionVisitor.visitExpressionList","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-expression-list.html","searchKeys":["visitExpressionList","open fun <T : SqlExpression> visitExpressionList(original: List<T>, subVisitor: (T) -> T = { visit(it) as T }): List<T>","org.ktorm.expression.SqlExpressionVisitor.visitExpressionList"]},{"name":"open fun aliased(alias: String): BaseTable<E>","description":"org.ktorm.schema.BaseTable.aliased","location":"ktorm-core/org.ktorm.schema/-base-table/aliased.html","searchKeys":["aliased","open fun aliased(alias: String): BaseTable<E>","org.ktorm.schema.BaseTable.aliased"]},{"name":"open fun asExpression(): TableExpression","description":"org.ktorm.schema.BaseTable.asExpression","location":"ktorm-core/org.ktorm.schema/-base-table/as-expression.html","searchKeys":["asExpression","open fun asExpression(): TableExpression","org.ktorm.schema.BaseTable.asExpression"]},{"name":"open fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","description":"org.ktorm.database.SqlDialect.createExpressionVisitor","location":"ktorm-core/org.ktorm.database/-sql-dialect/create-expression-visitor.html","searchKeys":["createExpressionVisitor","open fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","org.ktorm.database.SqlDialect.createExpressionVisitor"]},{"name":"open fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","description":"org.ktorm.database.SqlDialect.createSqlFormatter","location":"ktorm-core/org.ktorm.database/-sql-dialect/create-sql-formatter.html","searchKeys":["createSqlFormatter","open fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","org.ktorm.database.SqlDialect.createSqlFormatter"]},{"name":"open fun executeUpdateAndRetrieveKeys(database: Database, sql: String, args: List<ArgumentExpression<*>>): Pair<Int, CachedRowSet>","description":"org.ktorm.database.SqlDialect.executeUpdateAndRetrieveKeys","location":"ktorm-core/org.ktorm.database/-sql-dialect/execute-update-and-retrieve-keys.html","searchKeys":["executeUpdateAndRetrieveKeys","open fun executeUpdateAndRetrieveKeys(database: Database, sql: String, args: List<ArgumentExpression<*>>): Pair<Int, CachedRowSet>","org.ktorm.database.SqlDialect.executeUpdateAndRetrieveKeys"]},{"name":"open fun getResult(rs: ResultSet, columnLabel: String): T?","description":"org.ktorm.schema.SqlType.getResult","location":"ktorm-core/org.ktorm.schema/-sql-type/get-result.html","searchKeys":["getResult","open fun getResult(rs: ResultSet, columnLabel: String): T?","org.ktorm.schema.SqlType.getResult"]},{"name":"open fun getResult(rs: ResultSet, index: Int): T?","description":"org.ktorm.schema.SqlType.getResult","location":"ktorm-core/org.ktorm.schema/-sql-type/get-result.html","searchKeys":["getResult","open fun getResult(rs: ResultSet, index: Int): T?","org.ktorm.schema.SqlType.getResult"]},{"name":"open fun setParameter(ps: PreparedStatement, index: Int, parameter: T?)","description":"org.ktorm.schema.SqlType.setParameter","location":"ktorm-core/org.ktorm.schema/-sql-type/set-parameter.html","searchKeys":["setParameter","open fun setParameter(ps: PreparedStatement, index: Int, parameter: T?)","org.ktorm.schema.SqlType.setParameter"]},{"name":"open fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visit","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit.html","searchKeys":["visit","open fun visit(expr: SqlExpression): SqlExpression","org.ktorm.expression.SqlExpressionVisitor.visit"]},{"name":"open fun visitBetween(expr: BetweenExpression): BetweenExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitBetween","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-between.html","searchKeys":["visitBetween","open fun visitBetween(expr: BetweenExpression): BetweenExpression","org.ktorm.expression.SqlExpressionVisitor.visitBetween"]},{"name":"open fun visitDelete(expr: DeleteExpression): DeleteExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitDelete","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-delete.html","searchKeys":["visitDelete","open fun visitDelete(expr: DeleteExpression): DeleteExpression","org.ktorm.expression.SqlExpressionVisitor.visitDelete"]},{"name":"open fun visitExists(expr: ExistsExpression): ExistsExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitExists","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-exists.html","searchKeys":["visitExists","open fun visitExists(expr: ExistsExpression): ExistsExpression","org.ktorm.expression.SqlExpressionVisitor.visitExists"]},{"name":"open fun visitInList(expr: InListExpression): InListExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitInList","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-in-list.html","searchKeys":["visitInList","open fun visitInList(expr: InListExpression): InListExpression","org.ktorm.expression.SqlExpressionVisitor.visitInList"]},{"name":"open fun visitInsert(expr: InsertExpression): InsertExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitInsert","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-insert.html","searchKeys":["visitInsert","open fun visitInsert(expr: InsertExpression): InsertExpression","org.ktorm.expression.SqlExpressionVisitor.visitInsert"]},{"name":"open fun visitInsertFromQuery(expr: InsertFromQueryExpression): InsertFromQueryExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitInsertFromQuery","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-insert-from-query.html","searchKeys":["visitInsertFromQuery","open fun visitInsertFromQuery(expr: InsertFromQueryExpression): InsertFromQueryExpression","org.ktorm.expression.SqlExpressionVisitor.visitInsertFromQuery"]},{"name":"open fun visitJoin(expr: JoinExpression): JoinExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitJoin","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-join.html","searchKeys":["visitJoin","open fun visitJoin(expr: JoinExpression): JoinExpression","org.ktorm.expression.SqlExpressionVisitor.visitJoin"]},{"name":"open fun visitOrderBy(expr: OrderByExpression): OrderByExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitOrderBy","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-order-by.html","searchKeys":["visitOrderBy","open fun visitOrderBy(expr: OrderByExpression): OrderByExpression","org.ktorm.expression.SqlExpressionVisitor.visitOrderBy"]},{"name":"open fun visitQuery(expr: QueryExpression): QueryExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitQuery","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-query.html","searchKeys":["visitQuery","open fun visitQuery(expr: QueryExpression): QueryExpression","org.ktorm.expression.SqlExpressionVisitor.visitQuery"]},{"name":"open fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitQuerySource","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-query-source.html","searchKeys":["visitQuerySource","open fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","org.ktorm.expression.SqlExpressionVisitor.visitQuerySource"]},{"name":"open fun visitSelect(expr: SelectExpression): SelectExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitSelect","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-select.html","searchKeys":["visitSelect","open fun visitSelect(expr: SelectExpression): SelectExpression","org.ktorm.expression.SqlExpressionVisitor.visitSelect"]},{"name":"open fun visitTable(expr: TableExpression): TableExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitTable","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-table.html","searchKeys":["visitTable","open fun visitTable(expr: TableExpression): TableExpression","org.ktorm.expression.SqlExpressionVisitor.visitTable"]},{"name":"open fun visitUnion(expr: UnionExpression): UnionExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitUnion","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-union.html","searchKeys":["visitUnion","open fun visitUnion(expr: UnionExpression): UnionExpression","org.ktorm.expression.SqlExpressionVisitor.visitUnion"]},{"name":"open fun visitUnknown(expr: SqlExpression): SqlExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitUnknown","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-unknown.html","searchKeys":["visitUnknown","open fun visitUnknown(expr: SqlExpression): SqlExpression","org.ktorm.expression.SqlExpressionVisitor.visitUnknown"]},{"name":"open fun visitUpdate(expr: UpdateExpression): UpdateExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitUpdate","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-update.html","searchKeys":["visitUpdate","open fun visitUpdate(expr: UpdateExpression): UpdateExpression","org.ktorm.expression.SqlExpressionVisitor.visitUpdate"]},{"name":"open fun visitWindowFrameBound(expr: WindowFrameBoundExpression): WindowFrameBoundExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitWindowFrameBound","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-window-frame-bound.html","searchKeys":["visitWindowFrameBound","open fun visitWindowFrameBound(expr: WindowFrameBoundExpression): WindowFrameBoundExpression","org.ktorm.expression.SqlExpressionVisitor.visitWindowFrameBound"]},{"name":"open fun visitWindowSpecification(expr: WindowSpecificationExpression): WindowSpecificationExpression","description":"org.ktorm.expression.SqlExpressionVisitor.visitWindowSpecification","location":"ktorm-core/org.ktorm.expression/-sql-expression-visitor/visit-window-specification.html","searchKeys":["visitWindowSpecification","open fun visitWindowSpecification(expr: WindowSpecificationExpression): WindowSpecificationExpression","org.ktorm.expression.SqlExpressionVisitor.visitWindowSpecification"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.ktorm.schema.Column.equals","location":"ktorm-core/org.ktorm.schema/-column/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.ktorm.schema.Column.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.ktorm.schema.SqlType.equals","location":"ktorm-core/org.ktorm.schema/-sql-type/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.ktorm.schema.SqlType.equals"]},{"name":"open operator override fun next(): Boolean","description":"org.ktorm.database.CachedRowSet.next","location":"ktorm-core/org.ktorm.database/-cached-row-set/next.html","searchKeys":["next","open operator override fun next(): Boolean","org.ktorm.database.CachedRowSet.next"]},{"name":"open override fun <T : Any> getObject(columnIndex: Int, type: Class<T>): T?","description":"org.ktorm.database.CachedRowSet.getObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-object.html","searchKeys":["getObject","open override fun <T : Any> getObject(columnIndex: Int, type: Class<T>): T?","org.ktorm.database.CachedRowSet.getObject"]},{"name":"open override fun <T : Any> getObject(columnLabel: String, type: Class<T>): T?","description":"org.ktorm.database.CachedRowSet.getObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-object.html","searchKeys":["getObject","open override fun <T : Any> getObject(columnLabel: String, type: Class<T>): T?","org.ktorm.database.CachedRowSet.getObject"]},{"name":"open override fun <T : Any> unwrap(iface: Class<T>): T","description":"org.ktorm.database.CachedRowSet.unwrap","location":"ktorm-core/org.ktorm.database/-cached-row-set/unwrap.html","searchKeys":["unwrap","open override fun <T : Any> unwrap(iface: Class<T>): T","org.ktorm.database.CachedRowSet.unwrap"]},{"name":"open override fun <T : Any> visitAggregate(expr: AggregateExpression<T>): AggregateExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitAggregate","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-aggregate.html","searchKeys":["visitAggregate","open override fun <T : Any> visitAggregate(expr: AggregateExpression<T>): AggregateExpression<T>","org.ktorm.expression.SqlFormatter.visitAggregate"]},{"name":"open override fun <T : Any> visitArgument(expr: ArgumentExpression<T>): ArgumentExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitArgument","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-argument.html","searchKeys":["visitArgument","open override fun <T : Any> visitArgument(expr: ArgumentExpression<T>): ArgumentExpression<T>","org.ktorm.expression.SqlFormatter.visitArgument"]},{"name":"open override fun <T : Any> visitBinary(expr: BinaryExpression<T>): BinaryExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitBinary","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-binary.html","searchKeys":["visitBinary","open override fun <T : Any> visitBinary(expr: BinaryExpression<T>): BinaryExpression<T>","org.ktorm.expression.SqlFormatter.visitBinary"]},{"name":"open override fun <T : Any> visitCaseWhen(expr: CaseWhenExpression<T>): CaseWhenExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitCaseWhen","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-case-when.html","searchKeys":["visitCaseWhen","open override fun <T : Any> visitCaseWhen(expr: CaseWhenExpression<T>): CaseWhenExpression<T>","org.ktorm.expression.SqlFormatter.visitCaseWhen"]},{"name":"open override fun <T : Any> visitCasting(expr: CastingExpression<T>): CastingExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitCasting","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-casting.html","searchKeys":["visitCasting","open override fun <T : Any> visitCasting(expr: CastingExpression<T>): CastingExpression<T>","org.ktorm.expression.SqlFormatter.visitCasting"]},{"name":"open override fun <T : Any> visitColumn(expr: ColumnExpression<T>): ColumnExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitColumn","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-column.html","searchKeys":["visitColumn","open override fun <T : Any> visitColumn(expr: ColumnExpression<T>): ColumnExpression<T>","org.ktorm.expression.SqlFormatter.visitColumn"]},{"name":"open override fun <T : Any> visitColumnDeclaring(expr: ColumnDeclaringExpression<T>): ColumnDeclaringExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitColumnDeclaring","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-column-declaring.html","searchKeys":["visitColumnDeclaring","open override fun <T : Any> visitColumnDeclaring(expr: ColumnDeclaringExpression<T>): ColumnDeclaringExpression<T>","org.ktorm.expression.SqlFormatter.visitColumnDeclaring"]},{"name":"open override fun <T : Any> visitFunction(expr: FunctionExpression<T>): FunctionExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitFunction","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-function.html","searchKeys":["visitFunction","open override fun <T : Any> visitFunction(expr: FunctionExpression<T>): FunctionExpression<T>","org.ktorm.expression.SqlFormatter.visitFunction"]},{"name":"open override fun <T : Any> visitUnary(expr: UnaryExpression<T>): UnaryExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitUnary","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-unary.html","searchKeys":["visitUnary","open override fun <T : Any> visitUnary(expr: UnaryExpression<T>): UnaryExpression<T>","org.ktorm.expression.SqlFormatter.visitUnary"]},{"name":"open override fun <T : Any> visitWindowFunction(expr: WindowFunctionExpression<T>): WindowFunctionExpression<T>","description":"org.ktorm.expression.SqlFormatter.visitWindowFunction","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-window-function.html","searchKeys":["visitWindowFunction","open override fun <T : Any> visitWindowFunction(expr: WindowFunctionExpression<T>): WindowFunctionExpression<T>","org.ktorm.expression.SqlFormatter.visitWindowFunction"]},{"name":"open override fun <T : SqlExpression> visitExpressionList(original: List<T>, subVisitor: (T) -> T): List<T>","description":"org.ktorm.expression.SqlFormatter.visitExpressionList","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-expression-list.html","searchKeys":["visitExpressionList","open override fun <T : SqlExpression> visitExpressionList(original: List<T>, subVisitor: (T) -> T): List<T>","org.ktorm.expression.SqlFormatter.visitExpressionList"]},{"name":"open override fun absolute(row: Int): Boolean","description":"org.ktorm.database.CachedRowSet.absolute","location":"ktorm-core/org.ktorm.database/-cached-row-set/absolute.html","searchKeys":["absolute","open override fun absolute(row: Int): Boolean","org.ktorm.database.CachedRowSet.absolute"]},{"name":"open override fun afterLast()","description":"org.ktorm.database.CachedRowSet.afterLast","location":"ktorm-core/org.ktorm.database/-cached-row-set/after-last.html","searchKeys":["afterLast","open override fun afterLast()","org.ktorm.database.CachedRowSet.afterLast"]},{"name":"open override fun aliased(alias: String): Table<E>","description":"org.ktorm.schema.Table.aliased","location":"ktorm-core/org.ktorm.schema/-table/aliased.html","searchKeys":["aliased","open override fun aliased(alias: String): Table<E>","org.ktorm.schema.Table.aliased"]},{"name":"open override fun aliased(label: String?): ColumnDeclaringExpression<T>","description":"org.ktorm.expression.ColumnDeclaringExpression.aliased","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/aliased.html","searchKeys":["aliased","open override fun aliased(label: String?): ColumnDeclaringExpression<T>","org.ktorm.expression.ColumnDeclaringExpression.aliased"]},{"name":"open override fun aliased(label: String?): ColumnDeclaringExpression<T>","description":"org.ktorm.expression.ScalarExpression.aliased","location":"ktorm-core/org.ktorm.expression/-scalar-expression/aliased.html","searchKeys":["aliased","open override fun aliased(label: String?): ColumnDeclaringExpression<T>","org.ktorm.expression.ScalarExpression.aliased"]},{"name":"open override fun aliased(label: String?): ColumnDeclaringExpression<T>","description":"org.ktorm.schema.Column.aliased","location":"ktorm-core/org.ktorm.schema/-column/aliased.html","searchKeys":["aliased","open override fun aliased(label: String?): ColumnDeclaringExpression<T>","org.ktorm.schema.Column.aliased"]},{"name":"open override fun asExpression(): ColumnExpression<T>","description":"org.ktorm.schema.Column.asExpression","location":"ktorm-core/org.ktorm.schema/-column/as-expression.html","searchKeys":["asExpression","open override fun asExpression(): ColumnExpression<T>","org.ktorm.schema.Column.asExpression"]},{"name":"open override fun asExpression(): ScalarExpression<T>","description":"org.ktorm.expression.ScalarExpression.asExpression","location":"ktorm-core/org.ktorm.expression/-scalar-expression/as-expression.html","searchKeys":["asExpression","open override fun asExpression(): ScalarExpression<T>","org.ktorm.expression.ScalarExpression.asExpression"]},{"name":"open override fun beforeFirst()","description":"org.ktorm.database.CachedRowSet.beforeFirst","location":"ktorm-core/org.ktorm.database/-cached-row-set/before-first.html","searchKeys":["beforeFirst","open override fun beforeFirst()","org.ktorm.database.CachedRowSet.beforeFirst"]},{"name":"open override fun cancelRowUpdates(): Nothing","description":"org.ktorm.database.CachedRowSet.cancelRowUpdates","location":"ktorm-core/org.ktorm.database/-cached-row-set/cancel-row-updates.html","searchKeys":["cancelRowUpdates","open override fun cancelRowUpdates(): Nothing","org.ktorm.database.CachedRowSet.cancelRowUpdates"]},{"name":"open override fun clearWarnings()","description":"org.ktorm.database.CachedRowSet.clearWarnings","location":"ktorm-core/org.ktorm.database/-cached-row-set/clear-warnings.html","searchKeys":["clearWarnings","open override fun clearWarnings()","org.ktorm.database.CachedRowSet.clearWarnings"]},{"name":"open override fun close()","description":"org.ktorm.database.CachedRowSet.close","location":"ktorm-core/org.ktorm.database/-cached-row-set/close.html","searchKeys":["close","open override fun close()","org.ktorm.database.CachedRowSet.close"]},{"name":"open override fun debug(msg: String, e: Throwable?)","description":"org.ktorm.logging.AndroidLoggerAdapter.debug","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/debug.html","searchKeys":["debug","open override fun debug(msg: String, e: Throwable?)","org.ktorm.logging.AndroidLoggerAdapter.debug"]},{"name":"open override fun debug(msg: String, e: Throwable?)","description":"org.ktorm.logging.CommonsLoggerAdapter.debug","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/debug.html","searchKeys":["debug","open override fun debug(msg: String, e: Throwable?)","org.ktorm.logging.CommonsLoggerAdapter.debug"]},{"name":"open override fun debug(msg: String, e: Throwable?)","description":"org.ktorm.logging.ConsoleLogger.debug","location":"ktorm-core/org.ktorm.logging/-console-logger/debug.html","searchKeys":["debug","open override fun debug(msg: String, e: Throwable?)","org.ktorm.logging.ConsoleLogger.debug"]},{"name":"open override fun debug(msg: String, e: Throwable?)","description":"org.ktorm.logging.JdkLoggerAdapter.debug","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/debug.html","searchKeys":["debug","open override fun debug(msg: String, e: Throwable?)","org.ktorm.logging.JdkLoggerAdapter.debug"]},{"name":"open override fun debug(msg: String, e: Throwable?)","description":"org.ktorm.logging.NoOpLogger.debug","location":"ktorm-core/org.ktorm.logging/-no-op-logger/debug.html","searchKeys":["debug","open override fun debug(msg: String, e: Throwable?)","org.ktorm.logging.NoOpLogger.debug"]},{"name":"open override fun debug(msg: String, e: Throwable?)","description":"org.ktorm.logging.Slf4jLoggerAdapter.debug","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/debug.html","searchKeys":["debug","open override fun debug(msg: String, e: Throwable?)","org.ktorm.logging.Slf4jLoggerAdapter.debug"]},{"name":"open override fun deleteRow(): Nothing","description":"org.ktorm.database.CachedRowSet.deleteRow","location":"ktorm-core/org.ktorm.database/-cached-row-set/delete-row.html","searchKeys":["deleteRow","open override fun deleteRow(): Nothing","org.ktorm.database.CachedRowSet.deleteRow"]},{"name":"open override fun error(msg: String, e: Throwable?)","description":"org.ktorm.logging.AndroidLoggerAdapter.error","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/error.html","searchKeys":["error","open override fun error(msg: String, e: Throwable?)","org.ktorm.logging.AndroidLoggerAdapter.error"]},{"name":"open override fun error(msg: String, e: Throwable?)","description":"org.ktorm.logging.CommonsLoggerAdapter.error","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/error.html","searchKeys":["error","open override fun error(msg: String, e: Throwable?)","org.ktorm.logging.CommonsLoggerAdapter.error"]},{"name":"open override fun error(msg: String, e: Throwable?)","description":"org.ktorm.logging.ConsoleLogger.error","location":"ktorm-core/org.ktorm.logging/-console-logger/error.html","searchKeys":["error","open override fun error(msg: String, e: Throwable?)","org.ktorm.logging.ConsoleLogger.error"]},{"name":"open override fun error(msg: String, e: Throwable?)","description":"org.ktorm.logging.JdkLoggerAdapter.error","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/error.html","searchKeys":["error","open override fun error(msg: String, e: Throwable?)","org.ktorm.logging.JdkLoggerAdapter.error"]},{"name":"open override fun error(msg: String, e: Throwable?)","description":"org.ktorm.logging.NoOpLogger.error","location":"ktorm-core/org.ktorm.logging/-no-op-logger/error.html","searchKeys":["error","open override fun error(msg: String, e: Throwable?)","org.ktorm.logging.NoOpLogger.error"]},{"name":"open override fun error(msg: String, e: Throwable?)","description":"org.ktorm.logging.Slf4jLoggerAdapter.error","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/error.html","searchKeys":["error","open override fun error(msg: String, e: Throwable?)","org.ktorm.logging.Slf4jLoggerAdapter.error"]},{"name":"open override fun findColumn(columnLabel: String): Int","description":"org.ktorm.database.CachedRowSet.findColumn","location":"ktorm-core/org.ktorm.database/-cached-row-set/find-column.html","searchKeys":["findColumn","open override fun findColumn(columnLabel: String): Int","org.ktorm.database.CachedRowSet.findColumn"]},{"name":"open override fun first(): Boolean","description":"org.ktorm.database.CachedRowSet.first","location":"ktorm-core/org.ktorm.database/-cached-row-set/first.html","searchKeys":["first","open override fun first(): Boolean","org.ktorm.database.CachedRowSet.first"]},{"name":"open override fun getArray(columnIndex: Int): Array?","description":"org.ktorm.database.CachedRowSet.getArray","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-array.html","searchKeys":["getArray","open override fun getArray(columnIndex: Int): Array?","org.ktorm.database.CachedRowSet.getArray"]},{"name":"open override fun getArray(columnLabel: String): Array?","description":"org.ktorm.database.CachedRowSet.getArray","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-array.html","searchKeys":["getArray","open override fun getArray(columnLabel: String): Array?","org.ktorm.database.CachedRowSet.getArray"]},{"name":"open override fun getAsciiStream(columnIndex: Int): InputStream?","description":"org.ktorm.database.CachedRowSet.getAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-ascii-stream.html","searchKeys":["getAsciiStream","open override fun getAsciiStream(columnIndex: Int): InputStream?","org.ktorm.database.CachedRowSet.getAsciiStream"]},{"name":"open override fun getAsciiStream(columnLabel: String): InputStream?","description":"org.ktorm.database.CachedRowSet.getAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-ascii-stream.html","searchKeys":["getAsciiStream","open override fun getAsciiStream(columnLabel: String): InputStream?","org.ktorm.database.CachedRowSet.getAsciiStream"]},{"name":"open override fun getBigDecimal(columnIndex: Int): BigDecimal?","description":"org.ktorm.database.CachedRowSet.getBigDecimal","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-big-decimal.html","searchKeys":["getBigDecimal","open override fun getBigDecimal(columnIndex: Int): BigDecimal?","org.ktorm.database.CachedRowSet.getBigDecimal"]},{"name":"open override fun getBigDecimal(columnIndex: Int, scale: Int): BigDecimal?","description":"org.ktorm.database.CachedRowSet.getBigDecimal","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-big-decimal.html","searchKeys":["getBigDecimal","open override fun getBigDecimal(columnIndex: Int, scale: Int): BigDecimal?","org.ktorm.database.CachedRowSet.getBigDecimal"]},{"name":"open override fun getBigDecimal(columnLabel: String): BigDecimal?","description":"org.ktorm.database.CachedRowSet.getBigDecimal","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-big-decimal.html","searchKeys":["getBigDecimal","open override fun getBigDecimal(columnLabel: String): BigDecimal?","org.ktorm.database.CachedRowSet.getBigDecimal"]},{"name":"open override fun getBigDecimal(columnLabel: String, scale: Int): BigDecimal?","description":"org.ktorm.database.CachedRowSet.getBigDecimal","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-big-decimal.html","searchKeys":["getBigDecimal","open override fun getBigDecimal(columnLabel: String, scale: Int): BigDecimal?","org.ktorm.database.CachedRowSet.getBigDecimal"]},{"name":"open override fun getBinaryStream(columnIndex: Int): InputStream?","description":"org.ktorm.database.CachedRowSet.getBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-binary-stream.html","searchKeys":["getBinaryStream","open override fun getBinaryStream(columnIndex: Int): InputStream?","org.ktorm.database.CachedRowSet.getBinaryStream"]},{"name":"open override fun getBinaryStream(columnLabel: String): InputStream?","description":"org.ktorm.database.CachedRowSet.getBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-binary-stream.html","searchKeys":["getBinaryStream","open override fun getBinaryStream(columnLabel: String): InputStream?","org.ktorm.database.CachedRowSet.getBinaryStream"]},{"name":"open override fun getBlob(columnIndex: Int): Blob?","description":"org.ktorm.database.CachedRowSet.getBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-blob.html","searchKeys":["getBlob","open override fun getBlob(columnIndex: Int): Blob?","org.ktorm.database.CachedRowSet.getBlob"]},{"name":"open override fun getBlob(columnLabel: String): Blob?","description":"org.ktorm.database.CachedRowSet.getBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-blob.html","searchKeys":["getBlob","open override fun getBlob(columnLabel: String): Blob?","org.ktorm.database.CachedRowSet.getBlob"]},{"name":"open override fun getBoolean(columnIndex: Int): Boolean","description":"org.ktorm.database.CachedRowSet.getBoolean","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-boolean.html","searchKeys":["getBoolean","open override fun getBoolean(columnIndex: Int): Boolean","org.ktorm.database.CachedRowSet.getBoolean"]},{"name":"open override fun getBoolean(columnLabel: String): Boolean","description":"org.ktorm.database.CachedRowSet.getBoolean","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-boolean.html","searchKeys":["getBoolean","open override fun getBoolean(columnLabel: String): Boolean","org.ktorm.database.CachedRowSet.getBoolean"]},{"name":"open override fun getByte(columnIndex: Int): Byte","description":"org.ktorm.database.CachedRowSet.getByte","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-byte.html","searchKeys":["getByte","open override fun getByte(columnIndex: Int): Byte","org.ktorm.database.CachedRowSet.getByte"]},{"name":"open override fun getByte(columnLabel: String): Byte","description":"org.ktorm.database.CachedRowSet.getByte","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-byte.html","searchKeys":["getByte","open override fun getByte(columnLabel: String): Byte","org.ktorm.database.CachedRowSet.getByte"]},{"name":"open override fun getBytes(columnIndex: Int): ByteArray?","description":"org.ktorm.database.CachedRowSet.getBytes","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-bytes.html","searchKeys":["getBytes","open override fun getBytes(columnIndex: Int): ByteArray?","org.ktorm.database.CachedRowSet.getBytes"]},{"name":"open override fun getBytes(columnLabel: String): ByteArray?","description":"org.ktorm.database.CachedRowSet.getBytes","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-bytes.html","searchKeys":["getBytes","open override fun getBytes(columnLabel: String): ByteArray?","org.ktorm.database.CachedRowSet.getBytes"]},{"name":"open override fun getCharacterStream(columnIndex: Int): Reader?","description":"org.ktorm.database.CachedRowSet.getCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-character-stream.html","searchKeys":["getCharacterStream","open override fun getCharacterStream(columnIndex: Int): Reader?","org.ktorm.database.CachedRowSet.getCharacterStream"]},{"name":"open override fun getCharacterStream(columnLabel: String): Reader?","description":"org.ktorm.database.CachedRowSet.getCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-character-stream.html","searchKeys":["getCharacterStream","open override fun getCharacterStream(columnLabel: String): Reader?","org.ktorm.database.CachedRowSet.getCharacterStream"]},{"name":"open override fun getClob(columnIndex: Int): Clob?","description":"org.ktorm.database.CachedRowSet.getClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-clob.html","searchKeys":["getClob","open override fun getClob(columnIndex: Int): Clob?","org.ktorm.database.CachedRowSet.getClob"]},{"name":"open override fun getClob(columnLabel: String): Clob?","description":"org.ktorm.database.CachedRowSet.getClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-clob.html","searchKeys":["getClob","open override fun getClob(columnLabel: String): Clob?","org.ktorm.database.CachedRowSet.getClob"]},{"name":"open override fun getConcurrency(): Int","description":"org.ktorm.database.CachedRowSet.getConcurrency","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-concurrency.html","searchKeys":["getConcurrency","open override fun getConcurrency(): Int","org.ktorm.database.CachedRowSet.getConcurrency"]},{"name":"open override fun getCursorName(): Nothing","description":"org.ktorm.database.CachedRowSet.getCursorName","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-cursor-name.html","searchKeys":["getCursorName","open override fun getCursorName(): Nothing","org.ktorm.database.CachedRowSet.getCursorName"]},{"name":"open override fun getDate(columnIndex: Int): Date?","description":"org.ktorm.database.CachedRowSet.getDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-date.html","searchKeys":["getDate","open override fun getDate(columnIndex: Int): Date?","org.ktorm.database.CachedRowSet.getDate"]},{"name":"open override fun getDate(columnIndex: Int, cal: Calendar): Date?","description":"org.ktorm.database.CachedRowSet.getDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-date.html","searchKeys":["getDate","open override fun getDate(columnIndex: Int, cal: Calendar): Date?","org.ktorm.database.CachedRowSet.getDate"]},{"name":"open override fun getDate(columnLabel: String): Date?","description":"org.ktorm.database.CachedRowSet.getDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-date.html","searchKeys":["getDate","open override fun getDate(columnLabel: String): Date?","org.ktorm.database.CachedRowSet.getDate"]},{"name":"open override fun getDate(columnLabel: String, cal: Calendar): Date?","description":"org.ktorm.database.CachedRowSet.getDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-date.html","searchKeys":["getDate","open override fun getDate(columnLabel: String, cal: Calendar): Date?","org.ktorm.database.CachedRowSet.getDate"]},{"name":"open override fun getDouble(columnIndex: Int): Double","description":"org.ktorm.database.CachedRowSet.getDouble","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-double.html","searchKeys":["getDouble","open override fun getDouble(columnIndex: Int): Double","org.ktorm.database.CachedRowSet.getDouble"]},{"name":"open override fun getDouble(columnLabel: String): Double","description":"org.ktorm.database.CachedRowSet.getDouble","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-double.html","searchKeys":["getDouble","open override fun getDouble(columnLabel: String): Double","org.ktorm.database.CachedRowSet.getDouble"]},{"name":"open override fun getFetchDirection(): Int","description":"org.ktorm.database.CachedRowSet.getFetchDirection","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-fetch-direction.html","searchKeys":["getFetchDirection","open override fun getFetchDirection(): Int","org.ktorm.database.CachedRowSet.getFetchDirection"]},{"name":"open override fun getFetchSize(): Int","description":"org.ktorm.database.CachedRowSet.getFetchSize","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-fetch-size.html","searchKeys":["getFetchSize","open override fun getFetchSize(): Int","org.ktorm.database.CachedRowSet.getFetchSize"]},{"name":"open override fun getFloat(columnIndex: Int): Float","description":"org.ktorm.database.CachedRowSet.getFloat","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-float.html","searchKeys":["getFloat","open override fun getFloat(columnIndex: Int): Float","org.ktorm.database.CachedRowSet.getFloat"]},{"name":"open override fun getFloat(columnLabel: String): Float","description":"org.ktorm.database.CachedRowSet.getFloat","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-float.html","searchKeys":["getFloat","open override fun getFloat(columnLabel: String): Float","org.ktorm.database.CachedRowSet.getFloat"]},{"name":"open override fun getHoldability(): Int","description":"org.ktorm.database.CachedRowSet.getHoldability","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-holdability.html","searchKeys":["getHoldability","open override fun getHoldability(): Int","org.ktorm.database.CachedRowSet.getHoldability"]},{"name":"open override fun getInt(columnIndex: Int): Int","description":"org.ktorm.database.CachedRowSet.getInt","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-int.html","searchKeys":["getInt","open override fun getInt(columnIndex: Int): Int","org.ktorm.database.CachedRowSet.getInt"]},{"name":"open override fun getInt(columnLabel: String): Int","description":"org.ktorm.database.CachedRowSet.getInt","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-int.html","searchKeys":["getInt","open override fun getInt(columnLabel: String): Int","org.ktorm.database.CachedRowSet.getInt"]},{"name":"open override fun getLong(columnIndex: Int): Long","description":"org.ktorm.database.CachedRowSet.getLong","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-long.html","searchKeys":["getLong","open override fun getLong(columnIndex: Int): Long","org.ktorm.database.CachedRowSet.getLong"]},{"name":"open override fun getLong(columnLabel: String): Long","description":"org.ktorm.database.CachedRowSet.getLong","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-long.html","searchKeys":["getLong","open override fun getLong(columnLabel: String): Long","org.ktorm.database.CachedRowSet.getLong"]},{"name":"open override fun getMetaData(): ResultSetMetaData","description":"org.ktorm.database.CachedRowSet.getMetaData","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-meta-data.html","searchKeys":["getMetaData","open override fun getMetaData(): ResultSetMetaData","org.ktorm.database.CachedRowSet.getMetaData"]},{"name":"open override fun getNCharacterStream(columnIndex: Int): Reader?","description":"org.ktorm.database.CachedRowSet.getNCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-n-character-stream.html","searchKeys":["getNCharacterStream","open override fun getNCharacterStream(columnIndex: Int): Reader?","org.ktorm.database.CachedRowSet.getNCharacterStream"]},{"name":"open override fun getNCharacterStream(columnLabel: String): Reader?","description":"org.ktorm.database.CachedRowSet.getNCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-n-character-stream.html","searchKeys":["getNCharacterStream","open override fun getNCharacterStream(columnLabel: String): Reader?","org.ktorm.database.CachedRowSet.getNCharacterStream"]},{"name":"open override fun getNClob(columnIndex: Int): Nothing","description":"org.ktorm.database.CachedRowSet.getNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-n-clob.html","searchKeys":["getNClob","open override fun getNClob(columnIndex: Int): Nothing","org.ktorm.database.CachedRowSet.getNClob"]},{"name":"open override fun getNClob(columnLabel: String?): Nothing","description":"org.ktorm.database.CachedRowSet.getNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-n-clob.html","searchKeys":["getNClob","open override fun getNClob(columnLabel: String?): Nothing","org.ktorm.database.CachedRowSet.getNClob"]},{"name":"open override fun getNString(columnIndex: Int): String?","description":"org.ktorm.database.CachedRowSet.getNString","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-n-string.html","searchKeys":["getNString","open override fun getNString(columnIndex: Int): String?","org.ktorm.database.CachedRowSet.getNString"]},{"name":"open override fun getNString(columnLabel: String): String?","description":"org.ktorm.database.CachedRowSet.getNString","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-n-string.html","searchKeys":["getNString","open override fun getNString(columnLabel: String): String?","org.ktorm.database.CachedRowSet.getNString"]},{"name":"open override fun getObject(columnIndex: Int): Any?","description":"org.ktorm.database.CachedRowSet.getObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-object.html","searchKeys":["getObject","open override fun getObject(columnIndex: Int): Any?","org.ktorm.database.CachedRowSet.getObject"]},{"name":"open override fun getObject(columnIndex: Int, map: Map<String, Class<*>>): Any?","description":"org.ktorm.database.CachedRowSet.getObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-object.html","searchKeys":["getObject","open override fun getObject(columnIndex: Int, map: Map<String, Class<*>>): Any?","org.ktorm.database.CachedRowSet.getObject"]},{"name":"open override fun getObject(columnLabel: String): Any?","description":"org.ktorm.database.CachedRowSet.getObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-object.html","searchKeys":["getObject","open override fun getObject(columnLabel: String): Any?","org.ktorm.database.CachedRowSet.getObject"]},{"name":"open override fun getObject(columnLabel: String, map: Map<String, Class<*>>): Any?","description":"org.ktorm.database.CachedRowSet.getObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-object.html","searchKeys":["getObject","open override fun getObject(columnLabel: String, map: Map<String, Class<*>>): Any?","org.ktorm.database.CachedRowSet.getObject"]},{"name":"open override fun getRef(columnIndex: Int): Ref?","description":"org.ktorm.database.CachedRowSet.getRef","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-ref.html","searchKeys":["getRef","open override fun getRef(columnIndex: Int): Ref?","org.ktorm.database.CachedRowSet.getRef"]},{"name":"open override fun getRef(columnLabel: String): Ref?","description":"org.ktorm.database.CachedRowSet.getRef","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-ref.html","searchKeys":["getRef","open override fun getRef(columnLabel: String): Ref?","org.ktorm.database.CachedRowSet.getRef"]},{"name":"open override fun getRow(): Int","description":"org.ktorm.database.CachedRowSet.getRow","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-row.html","searchKeys":["getRow","open override fun getRow(): Int","org.ktorm.database.CachedRowSet.getRow"]},{"name":"open override fun getRowId(columnIndex: Int): Nothing","description":"org.ktorm.database.CachedRowSet.getRowId","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-row-id.html","searchKeys":["getRowId","open override fun getRowId(columnIndex: Int): Nothing","org.ktorm.database.CachedRowSet.getRowId"]},{"name":"open override fun getRowId(columnLabel: String?): Nothing","description":"org.ktorm.database.CachedRowSet.getRowId","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-row-id.html","searchKeys":["getRowId","open override fun getRowId(columnLabel: String?): Nothing","org.ktorm.database.CachedRowSet.getRowId"]},{"name":"open override fun getSQLXML(columnIndex: Int): Nothing","description":"org.ktorm.database.CachedRowSet.getSQLXML","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-s-q-l-x-m-l.html","searchKeys":["getSQLXML","open override fun getSQLXML(columnIndex: Int): Nothing","org.ktorm.database.CachedRowSet.getSQLXML"]},{"name":"open override fun getSQLXML(columnLabel: String?): Nothing","description":"org.ktorm.database.CachedRowSet.getSQLXML","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-s-q-l-x-m-l.html","searchKeys":["getSQLXML","open override fun getSQLXML(columnLabel: String?): Nothing","org.ktorm.database.CachedRowSet.getSQLXML"]},{"name":"open override fun getShort(columnIndex: Int): Short","description":"org.ktorm.database.CachedRowSet.getShort","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-short.html","searchKeys":["getShort","open override fun getShort(columnIndex: Int): Short","org.ktorm.database.CachedRowSet.getShort"]},{"name":"open override fun getShort(columnLabel: String): Short","description":"org.ktorm.database.CachedRowSet.getShort","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-short.html","searchKeys":["getShort","open override fun getShort(columnLabel: String): Short","org.ktorm.database.CachedRowSet.getShort"]},{"name":"open override fun getStatement(): Statement?","description":"org.ktorm.database.CachedRowSet.getStatement","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-statement.html","searchKeys":["getStatement","open override fun getStatement(): Statement?","org.ktorm.database.CachedRowSet.getStatement"]},{"name":"open override fun getString(columnIndex: Int): String?","description":"org.ktorm.database.CachedRowSet.getString","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-string.html","searchKeys":["getString","open override fun getString(columnIndex: Int): String?","org.ktorm.database.CachedRowSet.getString"]},{"name":"open override fun getString(columnLabel: String): String?","description":"org.ktorm.database.CachedRowSet.getString","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-string.html","searchKeys":["getString","open override fun getString(columnLabel: String): String?","org.ktorm.database.CachedRowSet.getString"]},{"name":"open override fun getTime(columnIndex: Int): Time?","description":"org.ktorm.database.CachedRowSet.getTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-time.html","searchKeys":["getTime","open override fun getTime(columnIndex: Int): Time?","org.ktorm.database.CachedRowSet.getTime"]},{"name":"open override fun getTime(columnIndex: Int, cal: Calendar): Time?","description":"org.ktorm.database.CachedRowSet.getTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-time.html","searchKeys":["getTime","open override fun getTime(columnIndex: Int, cal: Calendar): Time?","org.ktorm.database.CachedRowSet.getTime"]},{"name":"open override fun getTime(columnLabel: String): Time?","description":"org.ktorm.database.CachedRowSet.getTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-time.html","searchKeys":["getTime","open override fun getTime(columnLabel: String): Time?","org.ktorm.database.CachedRowSet.getTime"]},{"name":"open override fun getTime(columnLabel: String, cal: Calendar): Time?","description":"org.ktorm.database.CachedRowSet.getTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-time.html","searchKeys":["getTime","open override fun getTime(columnLabel: String, cal: Calendar): Time?","org.ktorm.database.CachedRowSet.getTime"]},{"name":"open override fun getTimestamp(columnIndex: Int): Timestamp?","description":"org.ktorm.database.CachedRowSet.getTimestamp","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-timestamp.html","searchKeys":["getTimestamp","open override fun getTimestamp(columnIndex: Int): Timestamp?","org.ktorm.database.CachedRowSet.getTimestamp"]},{"name":"open override fun getTimestamp(columnIndex: Int, cal: Calendar): Timestamp?","description":"org.ktorm.database.CachedRowSet.getTimestamp","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-timestamp.html","searchKeys":["getTimestamp","open override fun getTimestamp(columnIndex: Int, cal: Calendar): Timestamp?","org.ktorm.database.CachedRowSet.getTimestamp"]},{"name":"open override fun getTimestamp(columnLabel: String): Timestamp?","description":"org.ktorm.database.CachedRowSet.getTimestamp","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-timestamp.html","searchKeys":["getTimestamp","open override fun getTimestamp(columnLabel: String): Timestamp?","org.ktorm.database.CachedRowSet.getTimestamp"]},{"name":"open override fun getTimestamp(columnLabel: String, cal: Calendar): Timestamp?","description":"org.ktorm.database.CachedRowSet.getTimestamp","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-timestamp.html","searchKeys":["getTimestamp","open override fun getTimestamp(columnLabel: String, cal: Calendar): Timestamp?","org.ktorm.database.CachedRowSet.getTimestamp"]},{"name":"open override fun getType(): Int","description":"org.ktorm.database.CachedRowSet.getType","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-type.html","searchKeys":["getType","open override fun getType(): Int","org.ktorm.database.CachedRowSet.getType"]},{"name":"open override fun getURL(columnIndex: Int): URL?","description":"org.ktorm.database.CachedRowSet.getURL","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-u-r-l.html","searchKeys":["getURL","open override fun getURL(columnIndex: Int): URL?","org.ktorm.database.CachedRowSet.getURL"]},{"name":"open override fun getURL(columnLabel: String): URL?","description":"org.ktorm.database.CachedRowSet.getURL","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-u-r-l.html","searchKeys":["getURL","open override fun getURL(columnLabel: String): URL?","org.ktorm.database.CachedRowSet.getURL"]},{"name":"open override fun getUnicodeStream(columnIndex: Int): InputStream?","description":"org.ktorm.database.CachedRowSet.getUnicodeStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-unicode-stream.html","searchKeys":["getUnicodeStream","open override fun getUnicodeStream(columnIndex: Int): InputStream?","org.ktorm.database.CachedRowSet.getUnicodeStream"]},{"name":"open override fun getUnicodeStream(columnLabel: String): InputStream?","description":"org.ktorm.database.CachedRowSet.getUnicodeStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-unicode-stream.html","searchKeys":["getUnicodeStream","open override fun getUnicodeStream(columnLabel: String): InputStream?","org.ktorm.database.CachedRowSet.getUnicodeStream"]},{"name":"open override fun getWarnings(): SQLWarning?","description":"org.ktorm.database.CachedRowSet.getWarnings","location":"ktorm-core/org.ktorm.database/-cached-row-set/get-warnings.html","searchKeys":["getWarnings","open override fun getWarnings(): SQLWarning?","org.ktorm.database.CachedRowSet.getWarnings"]},{"name":"open override fun hashCode(): Int","description":"org.ktorm.schema.Column.hashCode","location":"ktorm-core/org.ktorm.schema/-column/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.ktorm.schema.Column.hashCode"]},{"name":"open override fun hashCode(): Int","description":"org.ktorm.schema.SqlType.hashCode","location":"ktorm-core/org.ktorm.schema/-sql-type/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.ktorm.schema.SqlType.hashCode"]},{"name":"open override fun info(msg: String, e: Throwable?)","description":"org.ktorm.logging.AndroidLoggerAdapter.info","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/info.html","searchKeys":["info","open override fun info(msg: String, e: Throwable?)","org.ktorm.logging.AndroidLoggerAdapter.info"]},{"name":"open override fun info(msg: String, e: Throwable?)","description":"org.ktorm.logging.CommonsLoggerAdapter.info","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/info.html","searchKeys":["info","open override fun info(msg: String, e: Throwable?)","org.ktorm.logging.CommonsLoggerAdapter.info"]},{"name":"open override fun info(msg: String, e: Throwable?)","description":"org.ktorm.logging.ConsoleLogger.info","location":"ktorm-core/org.ktorm.logging/-console-logger/info.html","searchKeys":["info","open override fun info(msg: String, e: Throwable?)","org.ktorm.logging.ConsoleLogger.info"]},{"name":"open override fun info(msg: String, e: Throwable?)","description":"org.ktorm.logging.JdkLoggerAdapter.info","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/info.html","searchKeys":["info","open override fun info(msg: String, e: Throwable?)","org.ktorm.logging.JdkLoggerAdapter.info"]},{"name":"open override fun info(msg: String, e: Throwable?)","description":"org.ktorm.logging.NoOpLogger.info","location":"ktorm-core/org.ktorm.logging/-no-op-logger/info.html","searchKeys":["info","open override fun info(msg: String, e: Throwable?)","org.ktorm.logging.NoOpLogger.info"]},{"name":"open override fun info(msg: String, e: Throwable?)","description":"org.ktorm.logging.Slf4jLoggerAdapter.info","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/info.html","searchKeys":["info","open override fun info(msg: String, e: Throwable?)","org.ktorm.logging.Slf4jLoggerAdapter.info"]},{"name":"open override fun insertRow(): Nothing","description":"org.ktorm.database.CachedRowSet.insertRow","location":"ktorm-core/org.ktorm.database/-cached-row-set/insert-row.html","searchKeys":["insertRow","open override fun insertRow(): Nothing","org.ktorm.database.CachedRowSet.insertRow"]},{"name":"open override fun intercept(expr: SqlExpression, visitor: SqlExpressionVisitor): SqlExpression?","description":"org.ktorm.dsl.AliasRemover.intercept","location":"ktorm-core/org.ktorm.dsl/-alias-remover/intercept.html","searchKeys":["intercept","open override fun intercept(expr: SqlExpression, visitor: SqlExpressionVisitor): SqlExpression?","org.ktorm.dsl.AliasRemover.intercept"]},{"name":"open override fun isAfterLast(): Boolean","description":"org.ktorm.database.CachedRowSet.isAfterLast","location":"ktorm-core/org.ktorm.database/-cached-row-set/is-after-last.html","searchKeys":["isAfterLast","open override fun isAfterLast(): Boolean","org.ktorm.database.CachedRowSet.isAfterLast"]},{"name":"open override fun isBeforeFirst(): Boolean","description":"org.ktorm.database.CachedRowSet.isBeforeFirst","location":"ktorm-core/org.ktorm.database/-cached-row-set/is-before-first.html","searchKeys":["isBeforeFirst","open override fun isBeforeFirst(): Boolean","org.ktorm.database.CachedRowSet.isBeforeFirst"]},{"name":"open override fun isClosed(): Boolean","description":"org.ktorm.database.CachedRowSet.isClosed","location":"ktorm-core/org.ktorm.database/-cached-row-set/is-closed.html","searchKeys":["isClosed","open override fun isClosed(): Boolean","org.ktorm.database.CachedRowSet.isClosed"]},{"name":"open override fun isDebugEnabled(): Boolean","description":"org.ktorm.logging.AndroidLoggerAdapter.isDebugEnabled","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/is-debug-enabled.html","searchKeys":["isDebugEnabled","open override fun isDebugEnabled(): Boolean","org.ktorm.logging.AndroidLoggerAdapter.isDebugEnabled"]},{"name":"open override fun isDebugEnabled(): Boolean","description":"org.ktorm.logging.CommonsLoggerAdapter.isDebugEnabled","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/is-debug-enabled.html","searchKeys":["isDebugEnabled","open override fun isDebugEnabled(): Boolean","org.ktorm.logging.CommonsLoggerAdapter.isDebugEnabled"]},{"name":"open override fun isDebugEnabled(): Boolean","description":"org.ktorm.logging.ConsoleLogger.isDebugEnabled","location":"ktorm-core/org.ktorm.logging/-console-logger/is-debug-enabled.html","searchKeys":["isDebugEnabled","open override fun isDebugEnabled(): Boolean","org.ktorm.logging.ConsoleLogger.isDebugEnabled"]},{"name":"open override fun isDebugEnabled(): Boolean","description":"org.ktorm.logging.JdkLoggerAdapter.isDebugEnabled","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/is-debug-enabled.html","searchKeys":["isDebugEnabled","open override fun isDebugEnabled(): Boolean","org.ktorm.logging.JdkLoggerAdapter.isDebugEnabled"]},{"name":"open override fun isDebugEnabled(): Boolean","description":"org.ktorm.logging.NoOpLogger.isDebugEnabled","location":"ktorm-core/org.ktorm.logging/-no-op-logger/is-debug-enabled.html","searchKeys":["isDebugEnabled","open override fun isDebugEnabled(): Boolean","org.ktorm.logging.NoOpLogger.isDebugEnabled"]},{"name":"open override fun isDebugEnabled(): Boolean","description":"org.ktorm.logging.Slf4jLoggerAdapter.isDebugEnabled","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/is-debug-enabled.html","searchKeys":["isDebugEnabled","open override fun isDebugEnabled(): Boolean","org.ktorm.logging.Slf4jLoggerAdapter.isDebugEnabled"]},{"name":"open override fun isErrorEnabled(): Boolean","description":"org.ktorm.logging.AndroidLoggerAdapter.isErrorEnabled","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/is-error-enabled.html","searchKeys":["isErrorEnabled","open override fun isErrorEnabled(): Boolean","org.ktorm.logging.AndroidLoggerAdapter.isErrorEnabled"]},{"name":"open override fun isErrorEnabled(): Boolean","description":"org.ktorm.logging.CommonsLoggerAdapter.isErrorEnabled","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/is-error-enabled.html","searchKeys":["isErrorEnabled","open override fun isErrorEnabled(): Boolean","org.ktorm.logging.CommonsLoggerAdapter.isErrorEnabled"]},{"name":"open override fun isErrorEnabled(): Boolean","description":"org.ktorm.logging.ConsoleLogger.isErrorEnabled","location":"ktorm-core/org.ktorm.logging/-console-logger/is-error-enabled.html","searchKeys":["isErrorEnabled","open override fun isErrorEnabled(): Boolean","org.ktorm.logging.ConsoleLogger.isErrorEnabled"]},{"name":"open override fun isErrorEnabled(): Boolean","description":"org.ktorm.logging.JdkLoggerAdapter.isErrorEnabled","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/is-error-enabled.html","searchKeys":["isErrorEnabled","open override fun isErrorEnabled(): Boolean","org.ktorm.logging.JdkLoggerAdapter.isErrorEnabled"]},{"name":"open override fun isErrorEnabled(): Boolean","description":"org.ktorm.logging.NoOpLogger.isErrorEnabled","location":"ktorm-core/org.ktorm.logging/-no-op-logger/is-error-enabled.html","searchKeys":["isErrorEnabled","open override fun isErrorEnabled(): Boolean","org.ktorm.logging.NoOpLogger.isErrorEnabled"]},{"name":"open override fun isErrorEnabled(): Boolean","description":"org.ktorm.logging.Slf4jLoggerAdapter.isErrorEnabled","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/is-error-enabled.html","searchKeys":["isErrorEnabled","open override fun isErrorEnabled(): Boolean","org.ktorm.logging.Slf4jLoggerAdapter.isErrorEnabled"]},{"name":"open override fun isFirst(): Boolean","description":"org.ktorm.database.CachedRowSet.isFirst","location":"ktorm-core/org.ktorm.database/-cached-row-set/is-first.html","searchKeys":["isFirst","open override fun isFirst(): Boolean","org.ktorm.database.CachedRowSet.isFirst"]},{"name":"open override fun isInfoEnabled(): Boolean","description":"org.ktorm.logging.AndroidLoggerAdapter.isInfoEnabled","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/is-info-enabled.html","searchKeys":["isInfoEnabled","open override fun isInfoEnabled(): Boolean","org.ktorm.logging.AndroidLoggerAdapter.isInfoEnabled"]},{"name":"open override fun isInfoEnabled(): Boolean","description":"org.ktorm.logging.CommonsLoggerAdapter.isInfoEnabled","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/is-info-enabled.html","searchKeys":["isInfoEnabled","open override fun isInfoEnabled(): Boolean","org.ktorm.logging.CommonsLoggerAdapter.isInfoEnabled"]},{"name":"open override fun isInfoEnabled(): Boolean","description":"org.ktorm.logging.ConsoleLogger.isInfoEnabled","location":"ktorm-core/org.ktorm.logging/-console-logger/is-info-enabled.html","searchKeys":["isInfoEnabled","open override fun isInfoEnabled(): Boolean","org.ktorm.logging.ConsoleLogger.isInfoEnabled"]},{"name":"open override fun isInfoEnabled(): Boolean","description":"org.ktorm.logging.JdkLoggerAdapter.isInfoEnabled","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/is-info-enabled.html","searchKeys":["isInfoEnabled","open override fun isInfoEnabled(): Boolean","org.ktorm.logging.JdkLoggerAdapter.isInfoEnabled"]},{"name":"open override fun isInfoEnabled(): Boolean","description":"org.ktorm.logging.NoOpLogger.isInfoEnabled","location":"ktorm-core/org.ktorm.logging/-no-op-logger/is-info-enabled.html","searchKeys":["isInfoEnabled","open override fun isInfoEnabled(): Boolean","org.ktorm.logging.NoOpLogger.isInfoEnabled"]},{"name":"open override fun isInfoEnabled(): Boolean","description":"org.ktorm.logging.Slf4jLoggerAdapter.isInfoEnabled","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/is-info-enabled.html","searchKeys":["isInfoEnabled","open override fun isInfoEnabled(): Boolean","org.ktorm.logging.Slf4jLoggerAdapter.isInfoEnabled"]},{"name":"open override fun isLast(): Boolean","description":"org.ktorm.database.CachedRowSet.isLast","location":"ktorm-core/org.ktorm.database/-cached-row-set/is-last.html","searchKeys":["isLast","open override fun isLast(): Boolean","org.ktorm.database.CachedRowSet.isLast"]},{"name":"open override fun isTraceEnabled(): Boolean","description":"org.ktorm.logging.AndroidLoggerAdapter.isTraceEnabled","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/is-trace-enabled.html","searchKeys":["isTraceEnabled","open override fun isTraceEnabled(): Boolean","org.ktorm.logging.AndroidLoggerAdapter.isTraceEnabled"]},{"name":"open override fun isTraceEnabled(): Boolean","description":"org.ktorm.logging.CommonsLoggerAdapter.isTraceEnabled","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/is-trace-enabled.html","searchKeys":["isTraceEnabled","open override fun isTraceEnabled(): Boolean","org.ktorm.logging.CommonsLoggerAdapter.isTraceEnabled"]},{"name":"open override fun isTraceEnabled(): Boolean","description":"org.ktorm.logging.ConsoleLogger.isTraceEnabled","location":"ktorm-core/org.ktorm.logging/-console-logger/is-trace-enabled.html","searchKeys":["isTraceEnabled","open override fun isTraceEnabled(): Boolean","org.ktorm.logging.ConsoleLogger.isTraceEnabled"]},{"name":"open override fun isTraceEnabled(): Boolean","description":"org.ktorm.logging.JdkLoggerAdapter.isTraceEnabled","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/is-trace-enabled.html","searchKeys":["isTraceEnabled","open override fun isTraceEnabled(): Boolean","org.ktorm.logging.JdkLoggerAdapter.isTraceEnabled"]},{"name":"open override fun isTraceEnabled(): Boolean","description":"org.ktorm.logging.NoOpLogger.isTraceEnabled","location":"ktorm-core/org.ktorm.logging/-no-op-logger/is-trace-enabled.html","searchKeys":["isTraceEnabled","open override fun isTraceEnabled(): Boolean","org.ktorm.logging.NoOpLogger.isTraceEnabled"]},{"name":"open override fun isTraceEnabled(): Boolean","description":"org.ktorm.logging.Slf4jLoggerAdapter.isTraceEnabled","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/is-trace-enabled.html","searchKeys":["isTraceEnabled","open override fun isTraceEnabled(): Boolean","org.ktorm.logging.Slf4jLoggerAdapter.isTraceEnabled"]},{"name":"open override fun isWarnEnabled(): Boolean","description":"org.ktorm.logging.AndroidLoggerAdapter.isWarnEnabled","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/is-warn-enabled.html","searchKeys":["isWarnEnabled","open override fun isWarnEnabled(): Boolean","org.ktorm.logging.AndroidLoggerAdapter.isWarnEnabled"]},{"name":"open override fun isWarnEnabled(): Boolean","description":"org.ktorm.logging.CommonsLoggerAdapter.isWarnEnabled","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/is-warn-enabled.html","searchKeys":["isWarnEnabled","open override fun isWarnEnabled(): Boolean","org.ktorm.logging.CommonsLoggerAdapter.isWarnEnabled"]},{"name":"open override fun isWarnEnabled(): Boolean","description":"org.ktorm.logging.ConsoleLogger.isWarnEnabled","location":"ktorm-core/org.ktorm.logging/-console-logger/is-warn-enabled.html","searchKeys":["isWarnEnabled","open override fun isWarnEnabled(): Boolean","org.ktorm.logging.ConsoleLogger.isWarnEnabled"]},{"name":"open override fun isWarnEnabled(): Boolean","description":"org.ktorm.logging.JdkLoggerAdapter.isWarnEnabled","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/is-warn-enabled.html","searchKeys":["isWarnEnabled","open override fun isWarnEnabled(): Boolean","org.ktorm.logging.JdkLoggerAdapter.isWarnEnabled"]},{"name":"open override fun isWarnEnabled(): Boolean","description":"org.ktorm.logging.NoOpLogger.isWarnEnabled","location":"ktorm-core/org.ktorm.logging/-no-op-logger/is-warn-enabled.html","searchKeys":["isWarnEnabled","open override fun isWarnEnabled(): Boolean","org.ktorm.logging.NoOpLogger.isWarnEnabled"]},{"name":"open override fun isWarnEnabled(): Boolean","description":"org.ktorm.logging.Slf4jLoggerAdapter.isWarnEnabled","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/is-warn-enabled.html","searchKeys":["isWarnEnabled","open override fun isWarnEnabled(): Boolean","org.ktorm.logging.Slf4jLoggerAdapter.isWarnEnabled"]},{"name":"open override fun isWrapperFor(iface: Class<*>): Boolean","description":"org.ktorm.database.CachedRowSet.isWrapperFor","location":"ktorm-core/org.ktorm.database/-cached-row-set/is-wrapper-for.html","searchKeys":["isWrapperFor","open override fun isWrapperFor(iface: Class<*>): Boolean","org.ktorm.database.CachedRowSet.isWrapperFor"]},{"name":"open override fun last(): Boolean","description":"org.ktorm.database.CachedRowSet.last","location":"ktorm-core/org.ktorm.database/-cached-row-set/last.html","searchKeys":["last","open override fun last(): Boolean","org.ktorm.database.CachedRowSet.last"]},{"name":"open override fun moveToCurrentRow(): Nothing","description":"org.ktorm.database.CachedRowSet.moveToCurrentRow","location":"ktorm-core/org.ktorm.database/-cached-row-set/move-to-current-row.html","searchKeys":["moveToCurrentRow","open override fun moveToCurrentRow(): Nothing","org.ktorm.database.CachedRowSet.moveToCurrentRow"]},{"name":"open override fun moveToInsertRow(): Nothing","description":"org.ktorm.database.CachedRowSet.moveToInsertRow","location":"ktorm-core/org.ktorm.database/-cached-row-set/move-to-insert-row.html","searchKeys":["moveToInsertRow","open override fun moveToInsertRow(): Nothing","org.ktorm.database.CachedRowSet.moveToInsertRow"]},{"name":"open override fun newConnection(): Connection","description":"org.ktorm.database.JdbcTransactionManager.newConnection","location":"ktorm-core/org.ktorm.database/-jdbc-transaction-manager/new-connection.html","searchKeys":["newConnection","open override fun newConnection(): Connection","org.ktorm.database.JdbcTransactionManager.newConnection"]},{"name":"open override fun newConnection(): Connection","description":"org.ktorm.database.SpringManagedTransactionManager.newConnection","location":"ktorm-core/org.ktorm.database/-spring-managed-transaction-manager/new-connection.html","searchKeys":["newConnection","open override fun newConnection(): Connection","org.ktorm.database.SpringManagedTransactionManager.newConnection"]},{"name":"open override fun newTransaction(isolation: TransactionIsolation?): Nothing","description":"org.ktorm.database.SpringManagedTransactionManager.newTransaction","location":"ktorm-core/org.ktorm.database/-spring-managed-transaction-manager/new-transaction.html","searchKeys":["newTransaction","open override fun newTransaction(isolation: TransactionIsolation?): Nothing","org.ktorm.database.SpringManagedTransactionManager.newTransaction"]},{"name":"open override fun newTransaction(isolation: TransactionIsolation?): Transaction","description":"org.ktorm.database.JdbcTransactionManager.newTransaction","location":"ktorm-core/org.ktorm.database/-jdbc-transaction-manager/new-transaction.html","searchKeys":["newTransaction","open override fun newTransaction(isolation: TransactionIsolation?): Transaction","org.ktorm.database.JdbcTransactionManager.newTransaction"]},{"name":"open override fun previous(): Boolean","description":"org.ktorm.database.CachedRowSet.previous","location":"ktorm-core/org.ktorm.database/-cached-row-set/previous.html","searchKeys":["previous","open override fun previous(): Boolean","org.ktorm.database.CachedRowSet.previous"]},{"name":"open override fun refreshRow(): Nothing","description":"org.ktorm.database.CachedRowSet.refreshRow","location":"ktorm-core/org.ktorm.database/-cached-row-set/refresh-row.html","searchKeys":["refreshRow","open override fun refreshRow(): Nothing","org.ktorm.database.CachedRowSet.refreshRow"]},{"name":"open override fun relative(rows: Int): Boolean","description":"org.ktorm.database.CachedRowSet.relative","location":"ktorm-core/org.ktorm.database/-cached-row-set/relative.html","searchKeys":["relative","open override fun relative(rows: Int): Boolean","org.ktorm.database.CachedRowSet.relative"]},{"name":"open override fun rowDeleted(): Nothing","description":"org.ktorm.database.CachedRowSet.rowDeleted","location":"ktorm-core/org.ktorm.database/-cached-row-set/row-deleted.html","searchKeys":["rowDeleted","open override fun rowDeleted(): Nothing","org.ktorm.database.CachedRowSet.rowDeleted"]},{"name":"open override fun rowInserted(): Nothing","description":"org.ktorm.database.CachedRowSet.rowInserted","location":"ktorm-core/org.ktorm.database/-cached-row-set/row-inserted.html","searchKeys":["rowInserted","open override fun rowInserted(): Nothing","org.ktorm.database.CachedRowSet.rowInserted"]},{"name":"open override fun rowUpdated(): Nothing","description":"org.ktorm.database.CachedRowSet.rowUpdated","location":"ktorm-core/org.ktorm.database/-cached-row-set/row-updated.html","searchKeys":["rowUpdated","open override fun rowUpdated(): Nothing","org.ktorm.database.CachedRowSet.rowUpdated"]},{"name":"open override fun setFetchDirection(direction: Int)","description":"org.ktorm.database.CachedRowSet.setFetchDirection","location":"ktorm-core/org.ktorm.database/-cached-row-set/set-fetch-direction.html","searchKeys":["setFetchDirection","open override fun setFetchDirection(direction: Int)","org.ktorm.database.CachedRowSet.setFetchDirection"]},{"name":"open override fun setFetchSize(rows: Int)","description":"org.ktorm.database.CachedRowSet.setFetchSize","location":"ktorm-core/org.ktorm.database/-cached-row-set/set-fetch-size.html","searchKeys":["setFetchSize","open override fun setFetchSize(rows: Int)","org.ktorm.database.CachedRowSet.setFetchSize"]},{"name":"open override fun setParameter(ps: PreparedStatement, index: Int, parameter: C?)","description":"org.ktorm.schema.EnumSqlType.setParameter","location":"ktorm-core/org.ktorm.schema/-enum-sql-type/set-parameter.html","searchKeys":["setParameter","open override fun setParameter(ps: PreparedStatement, index: Int, parameter: C?)","org.ktorm.schema.EnumSqlType.setParameter"]},{"name":"open override fun toString(): String","description":"org.ktorm.entity.Tuple4.toString","location":"ktorm-core/org.ktorm.entity/-tuple4/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.entity.Tuple4.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.entity.Tuple5.toString","location":"ktorm-core/org.ktorm.entity/-tuple5/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.entity.Tuple5.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.entity.Tuple6.toString","location":"ktorm-core/org.ktorm.entity/-tuple6/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.entity.Tuple6.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.entity.Tuple7.toString","location":"ktorm-core/org.ktorm.entity/-tuple7/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.entity.Tuple7.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.entity.Tuple8.toString","location":"ktorm-core/org.ktorm.entity/-tuple8/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.entity.Tuple8.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.entity.Tuple9.toString","location":"ktorm-core/org.ktorm.entity/-tuple9/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.entity.Tuple9.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.AggregateType.toString","location":"ktorm-core/org.ktorm.expression/-aggregate-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.AggregateType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.BinaryExpressionType.toString","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.BinaryExpressionType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.JoinType.toString","location":"ktorm-core/org.ktorm.expression/-join-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.JoinType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.OrderType.toString","location":"ktorm-core/org.ktorm.expression/-order-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.OrderType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.UnaryExpressionType.toString","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.UnaryExpressionType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.WindowFrameBoundType.toString","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.WindowFrameBoundType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.WindowFrameUnitType.toString","location":"ktorm-core/org.ktorm.expression/-window-frame-unit-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.WindowFrameUnitType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.expression.WindowFunctionType.toString","location":"ktorm-core/org.ktorm.expression/-window-function-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.expression.WindowFunctionType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.schema.BaseTable.toString","location":"ktorm-core/org.ktorm.schema/-base-table/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.schema.BaseTable.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.schema.Column.toString","location":"ktorm-core/org.ktorm.schema/-column/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.schema.Column.toString"]},{"name":"open override fun trace(msg: String, e: Throwable?)","description":"org.ktorm.logging.AndroidLoggerAdapter.trace","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/trace.html","searchKeys":["trace","open override fun trace(msg: String, e: Throwable?)","org.ktorm.logging.AndroidLoggerAdapter.trace"]},{"name":"open override fun trace(msg: String, e: Throwable?)","description":"org.ktorm.logging.CommonsLoggerAdapter.trace","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/trace.html","searchKeys":["trace","open override fun trace(msg: String, e: Throwable?)","org.ktorm.logging.CommonsLoggerAdapter.trace"]},{"name":"open override fun trace(msg: String, e: Throwable?)","description":"org.ktorm.logging.ConsoleLogger.trace","location":"ktorm-core/org.ktorm.logging/-console-logger/trace.html","searchKeys":["trace","open override fun trace(msg: String, e: Throwable?)","org.ktorm.logging.ConsoleLogger.trace"]},{"name":"open override fun trace(msg: String, e: Throwable?)","description":"org.ktorm.logging.JdkLoggerAdapter.trace","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/trace.html","searchKeys":["trace","open override fun trace(msg: String, e: Throwable?)","org.ktorm.logging.JdkLoggerAdapter.trace"]},{"name":"open override fun trace(msg: String, e: Throwable?)","description":"org.ktorm.logging.NoOpLogger.trace","location":"ktorm-core/org.ktorm.logging/-no-op-logger/trace.html","searchKeys":["trace","open override fun trace(msg: String, e: Throwable?)","org.ktorm.logging.NoOpLogger.trace"]},{"name":"open override fun trace(msg: String, e: Throwable?)","description":"org.ktorm.logging.Slf4jLoggerAdapter.trace","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/trace.html","searchKeys":["trace","open override fun trace(msg: String, e: Throwable?)","org.ktorm.logging.Slf4jLoggerAdapter.trace"]},{"name":"open override fun updateArray(columnIndex: Int, x: Array?): Nothing","description":"org.ktorm.database.CachedRowSet.updateArray","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-array.html","searchKeys":["updateArray","open override fun updateArray(columnIndex: Int, x: Array?): Nothing","org.ktorm.database.CachedRowSet.updateArray"]},{"name":"open override fun updateArray(columnLabel: String?, x: Array?): Nothing","description":"org.ktorm.database.CachedRowSet.updateArray","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-array.html","searchKeys":["updateArray","open override fun updateArray(columnLabel: String?, x: Array?): Nothing","org.ktorm.database.CachedRowSet.updateArray"]},{"name":"open override fun updateAsciiStream(columnIndex: Int, x: InputStream?): Nothing","description":"org.ktorm.database.CachedRowSet.updateAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ascii-stream.html","searchKeys":["updateAsciiStream","open override fun updateAsciiStream(columnIndex: Int, x: InputStream?): Nothing","org.ktorm.database.CachedRowSet.updateAsciiStream"]},{"name":"open override fun updateAsciiStream(columnIndex: Int, x: InputStream?, length: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ascii-stream.html","searchKeys":["updateAsciiStream","open override fun updateAsciiStream(columnIndex: Int, x: InputStream?, length: Int): Nothing","org.ktorm.database.CachedRowSet.updateAsciiStream"]},{"name":"open override fun updateAsciiStream(columnIndex: Int, x: InputStream?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ascii-stream.html","searchKeys":["updateAsciiStream","open override fun updateAsciiStream(columnIndex: Int, x: InputStream?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateAsciiStream"]},{"name":"open override fun updateAsciiStream(columnLabel: String?, x: InputStream?): Nothing","description":"org.ktorm.database.CachedRowSet.updateAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ascii-stream.html","searchKeys":["updateAsciiStream","open override fun updateAsciiStream(columnLabel: String?, x: InputStream?): Nothing","org.ktorm.database.CachedRowSet.updateAsciiStream"]},{"name":"open override fun updateAsciiStream(columnLabel: String?, x: InputStream?, length: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ascii-stream.html","searchKeys":["updateAsciiStream","open override fun updateAsciiStream(columnLabel: String?, x: InputStream?, length: Int): Nothing","org.ktorm.database.CachedRowSet.updateAsciiStream"]},{"name":"open override fun updateAsciiStream(columnLabel: String?, x: InputStream?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateAsciiStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ascii-stream.html","searchKeys":["updateAsciiStream","open override fun updateAsciiStream(columnLabel: String?, x: InputStream?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateAsciiStream"]},{"name":"open override fun updateBigDecimal(columnIndex: Int, x: BigDecimal?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBigDecimal","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-big-decimal.html","searchKeys":["updateBigDecimal","open override fun updateBigDecimal(columnIndex: Int, x: BigDecimal?): Nothing","org.ktorm.database.CachedRowSet.updateBigDecimal"]},{"name":"open override fun updateBigDecimal(columnLabel: String?, x: BigDecimal?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBigDecimal","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-big-decimal.html","searchKeys":["updateBigDecimal","open override fun updateBigDecimal(columnLabel: String?, x: BigDecimal?): Nothing","org.ktorm.database.CachedRowSet.updateBigDecimal"]},{"name":"open override fun updateBinaryStream(columnIndex: Int, x: InputStream?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-binary-stream.html","searchKeys":["updateBinaryStream","open override fun updateBinaryStream(columnIndex: Int, x: InputStream?): Nothing","org.ktorm.database.CachedRowSet.updateBinaryStream"]},{"name":"open override fun updateBinaryStream(columnIndex: Int, x: InputStream?, length: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-binary-stream.html","searchKeys":["updateBinaryStream","open override fun updateBinaryStream(columnIndex: Int, x: InputStream?, length: Int): Nothing","org.ktorm.database.CachedRowSet.updateBinaryStream"]},{"name":"open override fun updateBinaryStream(columnIndex: Int, x: InputStream?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-binary-stream.html","searchKeys":["updateBinaryStream","open override fun updateBinaryStream(columnIndex: Int, x: InputStream?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateBinaryStream"]},{"name":"open override fun updateBinaryStream(columnLabel: String?, x: InputStream?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-binary-stream.html","searchKeys":["updateBinaryStream","open override fun updateBinaryStream(columnLabel: String?, x: InputStream?): Nothing","org.ktorm.database.CachedRowSet.updateBinaryStream"]},{"name":"open override fun updateBinaryStream(columnLabel: String?, x: InputStream?, length: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-binary-stream.html","searchKeys":["updateBinaryStream","open override fun updateBinaryStream(columnLabel: String?, x: InputStream?, length: Int): Nothing","org.ktorm.database.CachedRowSet.updateBinaryStream"]},{"name":"open override fun updateBinaryStream(columnLabel: String?, x: InputStream?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateBinaryStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-binary-stream.html","searchKeys":["updateBinaryStream","open override fun updateBinaryStream(columnLabel: String?, x: InputStream?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateBinaryStream"]},{"name":"open override fun updateBlob(columnIndex: Int, inputStream: InputStream?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-blob.html","searchKeys":["updateBlob","open override fun updateBlob(columnIndex: Int, inputStream: InputStream?): Nothing","org.ktorm.database.CachedRowSet.updateBlob"]},{"name":"open override fun updateBlob(columnIndex: Int, inputStream: InputStream?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-blob.html","searchKeys":["updateBlob","open override fun updateBlob(columnIndex: Int, inputStream: InputStream?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateBlob"]},{"name":"open override fun updateBlob(columnIndex: Int, x: Blob?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-blob.html","searchKeys":["updateBlob","open override fun updateBlob(columnIndex: Int, x: Blob?): Nothing","org.ktorm.database.CachedRowSet.updateBlob"]},{"name":"open override fun updateBlob(columnLabel: String?, inputStream: InputStream?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-blob.html","searchKeys":["updateBlob","open override fun updateBlob(columnLabel: String?, inputStream: InputStream?): Nothing","org.ktorm.database.CachedRowSet.updateBlob"]},{"name":"open override fun updateBlob(columnLabel: String?, inputStream: InputStream?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-blob.html","searchKeys":["updateBlob","open override fun updateBlob(columnLabel: String?, inputStream: InputStream?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateBlob"]},{"name":"open override fun updateBlob(columnLabel: String?, x: Blob?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBlob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-blob.html","searchKeys":["updateBlob","open override fun updateBlob(columnLabel: String?, x: Blob?): Nothing","org.ktorm.database.CachedRowSet.updateBlob"]},{"name":"open override fun updateBoolean(columnIndex: Int, x: Boolean): Nothing","description":"org.ktorm.database.CachedRowSet.updateBoolean","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-boolean.html","searchKeys":["updateBoolean","open override fun updateBoolean(columnIndex: Int, x: Boolean): Nothing","org.ktorm.database.CachedRowSet.updateBoolean"]},{"name":"open override fun updateBoolean(columnLabel: String?, x: Boolean): Nothing","description":"org.ktorm.database.CachedRowSet.updateBoolean","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-boolean.html","searchKeys":["updateBoolean","open override fun updateBoolean(columnLabel: String?, x: Boolean): Nothing","org.ktorm.database.CachedRowSet.updateBoolean"]},{"name":"open override fun updateByte(columnIndex: Int, x: Byte): Nothing","description":"org.ktorm.database.CachedRowSet.updateByte","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-byte.html","searchKeys":["updateByte","open override fun updateByte(columnIndex: Int, x: Byte): Nothing","org.ktorm.database.CachedRowSet.updateByte"]},{"name":"open override fun updateByte(columnLabel: String?, x: Byte): Nothing","description":"org.ktorm.database.CachedRowSet.updateByte","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-byte.html","searchKeys":["updateByte","open override fun updateByte(columnLabel: String?, x: Byte): Nothing","org.ktorm.database.CachedRowSet.updateByte"]},{"name":"open override fun updateBytes(columnIndex: Int, x: ByteArray?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBytes","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-bytes.html","searchKeys":["updateBytes","open override fun updateBytes(columnIndex: Int, x: ByteArray?): Nothing","org.ktorm.database.CachedRowSet.updateBytes"]},{"name":"open override fun updateBytes(columnLabel: String?, x: ByteArray?): Nothing","description":"org.ktorm.database.CachedRowSet.updateBytes","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-bytes.html","searchKeys":["updateBytes","open override fun updateBytes(columnLabel: String?, x: ByteArray?): Nothing","org.ktorm.database.CachedRowSet.updateBytes"]},{"name":"open override fun updateCharacterStream(columnIndex: Int, x: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-character-stream.html","searchKeys":["updateCharacterStream","open override fun updateCharacterStream(columnIndex: Int, x: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateCharacterStream"]},{"name":"open override fun updateCharacterStream(columnIndex: Int, x: Reader?, length: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-character-stream.html","searchKeys":["updateCharacterStream","open override fun updateCharacterStream(columnIndex: Int, x: Reader?, length: Int): Nothing","org.ktorm.database.CachedRowSet.updateCharacterStream"]},{"name":"open override fun updateCharacterStream(columnIndex: Int, x: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-character-stream.html","searchKeys":["updateCharacterStream","open override fun updateCharacterStream(columnIndex: Int, x: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateCharacterStream"]},{"name":"open override fun updateCharacterStream(columnLabel: String?, reader: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-character-stream.html","searchKeys":["updateCharacterStream","open override fun updateCharacterStream(columnLabel: String?, reader: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateCharacterStream"]},{"name":"open override fun updateCharacterStream(columnLabel: String?, reader: Reader?, length: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-character-stream.html","searchKeys":["updateCharacterStream","open override fun updateCharacterStream(columnLabel: String?, reader: Reader?, length: Int): Nothing","org.ktorm.database.CachedRowSet.updateCharacterStream"]},{"name":"open override fun updateCharacterStream(columnLabel: String?, reader: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-character-stream.html","searchKeys":["updateCharacterStream","open override fun updateCharacterStream(columnLabel: String?, reader: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateCharacterStream"]},{"name":"open override fun updateClob(columnIndex: Int, reader: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-clob.html","searchKeys":["updateClob","open override fun updateClob(columnIndex: Int, reader: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateClob"]},{"name":"open override fun updateClob(columnIndex: Int, reader: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-clob.html","searchKeys":["updateClob","open override fun updateClob(columnIndex: Int, reader: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateClob"]},{"name":"open override fun updateClob(columnIndex: Int, x: Clob?): Nothing","description":"org.ktorm.database.CachedRowSet.updateClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-clob.html","searchKeys":["updateClob","open override fun updateClob(columnIndex: Int, x: Clob?): Nothing","org.ktorm.database.CachedRowSet.updateClob"]},{"name":"open override fun updateClob(columnLabel: String?, reader: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-clob.html","searchKeys":["updateClob","open override fun updateClob(columnLabel: String?, reader: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateClob"]},{"name":"open override fun updateClob(columnLabel: String?, reader: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-clob.html","searchKeys":["updateClob","open override fun updateClob(columnLabel: String?, reader: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateClob"]},{"name":"open override fun updateClob(columnLabel: String?, x: Clob?): Nothing","description":"org.ktorm.database.CachedRowSet.updateClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-clob.html","searchKeys":["updateClob","open override fun updateClob(columnLabel: String?, x: Clob?): Nothing","org.ktorm.database.CachedRowSet.updateClob"]},{"name":"open override fun updateDate(columnIndex: Int, x: Date?): Nothing","description":"org.ktorm.database.CachedRowSet.updateDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-date.html","searchKeys":["updateDate","open override fun updateDate(columnIndex: Int, x: Date?): Nothing","org.ktorm.database.CachedRowSet.updateDate"]},{"name":"open override fun updateDate(columnLabel: String?, x: Date?): Nothing","description":"org.ktorm.database.CachedRowSet.updateDate","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-date.html","searchKeys":["updateDate","open override fun updateDate(columnLabel: String?, x: Date?): Nothing","org.ktorm.database.CachedRowSet.updateDate"]},{"name":"open override fun updateDouble(columnIndex: Int, x: Double): Nothing","description":"org.ktorm.database.CachedRowSet.updateDouble","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-double.html","searchKeys":["updateDouble","open override fun updateDouble(columnIndex: Int, x: Double): Nothing","org.ktorm.database.CachedRowSet.updateDouble"]},{"name":"open override fun updateDouble(columnLabel: String?, x: Double): Nothing","description":"org.ktorm.database.CachedRowSet.updateDouble","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-double.html","searchKeys":["updateDouble","open override fun updateDouble(columnLabel: String?, x: Double): Nothing","org.ktorm.database.CachedRowSet.updateDouble"]},{"name":"open override fun updateFloat(columnIndex: Int, x: Float): Nothing","description":"org.ktorm.database.CachedRowSet.updateFloat","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-float.html","searchKeys":["updateFloat","open override fun updateFloat(columnIndex: Int, x: Float): Nothing","org.ktorm.database.CachedRowSet.updateFloat"]},{"name":"open override fun updateFloat(columnLabel: String?, x: Float): Nothing","description":"org.ktorm.database.CachedRowSet.updateFloat","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-float.html","searchKeys":["updateFloat","open override fun updateFloat(columnLabel: String?, x: Float): Nothing","org.ktorm.database.CachedRowSet.updateFloat"]},{"name":"open override fun updateInt(columnIndex: Int, x: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateInt","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-int.html","searchKeys":["updateInt","open override fun updateInt(columnIndex: Int, x: Int): Nothing","org.ktorm.database.CachedRowSet.updateInt"]},{"name":"open override fun updateInt(columnLabel: String?, x: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateInt","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-int.html","searchKeys":["updateInt","open override fun updateInt(columnLabel: String?, x: Int): Nothing","org.ktorm.database.CachedRowSet.updateInt"]},{"name":"open override fun updateLong(columnIndex: Int, x: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateLong","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-long.html","searchKeys":["updateLong","open override fun updateLong(columnIndex: Int, x: Long): Nothing","org.ktorm.database.CachedRowSet.updateLong"]},{"name":"open override fun updateLong(columnLabel: String?, x: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateLong","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-long.html","searchKeys":["updateLong","open override fun updateLong(columnLabel: String?, x: Long): Nothing","org.ktorm.database.CachedRowSet.updateLong"]},{"name":"open override fun updateNCharacterStream(columnIndex: Int, x: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-character-stream.html","searchKeys":["updateNCharacterStream","open override fun updateNCharacterStream(columnIndex: Int, x: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateNCharacterStream"]},{"name":"open override fun updateNCharacterStream(columnIndex: Int, x: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateNCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-character-stream.html","searchKeys":["updateNCharacterStream","open override fun updateNCharacterStream(columnIndex: Int, x: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateNCharacterStream"]},{"name":"open override fun updateNCharacterStream(columnLabel: String?, reader: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-character-stream.html","searchKeys":["updateNCharacterStream","open override fun updateNCharacterStream(columnLabel: String?, reader: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateNCharacterStream"]},{"name":"open override fun updateNCharacterStream(columnLabel: String?, reader: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateNCharacterStream","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-character-stream.html","searchKeys":["updateNCharacterStream","open override fun updateNCharacterStream(columnLabel: String?, reader: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateNCharacterStream"]},{"name":"open override fun updateNClob(columnIndex: Int, nClob: NClob?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-clob.html","searchKeys":["updateNClob","open override fun updateNClob(columnIndex: Int, nClob: NClob?): Nothing","org.ktorm.database.CachedRowSet.updateNClob"]},{"name":"open override fun updateNClob(columnIndex: Int, reader: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-clob.html","searchKeys":["updateNClob","open override fun updateNClob(columnIndex: Int, reader: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateNClob"]},{"name":"open override fun updateNClob(columnIndex: Int, reader: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-clob.html","searchKeys":["updateNClob","open override fun updateNClob(columnIndex: Int, reader: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateNClob"]},{"name":"open override fun updateNClob(columnLabel: String?, nClob: NClob?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-clob.html","searchKeys":["updateNClob","open override fun updateNClob(columnLabel: String?, nClob: NClob?): Nothing","org.ktorm.database.CachedRowSet.updateNClob"]},{"name":"open override fun updateNClob(columnLabel: String?, reader: Reader?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-clob.html","searchKeys":["updateNClob","open override fun updateNClob(columnLabel: String?, reader: Reader?): Nothing","org.ktorm.database.CachedRowSet.updateNClob"]},{"name":"open override fun updateNClob(columnLabel: String?, reader: Reader?, length: Long): Nothing","description":"org.ktorm.database.CachedRowSet.updateNClob","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-clob.html","searchKeys":["updateNClob","open override fun updateNClob(columnLabel: String?, reader: Reader?, length: Long): Nothing","org.ktorm.database.CachedRowSet.updateNClob"]},{"name":"open override fun updateNString(columnIndex: Int, nString: String?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNString","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-string.html","searchKeys":["updateNString","open override fun updateNString(columnIndex: Int, nString: String?): Nothing","org.ktorm.database.CachedRowSet.updateNString"]},{"name":"open override fun updateNString(columnLabel: String?, nString: String?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNString","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-n-string.html","searchKeys":["updateNString","open override fun updateNString(columnLabel: String?, nString: String?): Nothing","org.ktorm.database.CachedRowSet.updateNString"]},{"name":"open override fun updateNull(columnIndex: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateNull","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-null.html","searchKeys":["updateNull","open override fun updateNull(columnIndex: Int): Nothing","org.ktorm.database.CachedRowSet.updateNull"]},{"name":"open override fun updateNull(columnLabel: String?): Nothing","description":"org.ktorm.database.CachedRowSet.updateNull","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-null.html","searchKeys":["updateNull","open override fun updateNull(columnLabel: String?): Nothing","org.ktorm.database.CachedRowSet.updateNull"]},{"name":"open override fun updateObject(columnIndex: Int, x: Any?): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnIndex: Int, x: Any?): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateObject(columnIndex: Int, x: Any?, scaleOrLength: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnIndex: Int, x: Any?, scaleOrLength: Int): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateObject(columnIndex: Int, x: Any?, targetSqlType: SQLType?): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnIndex: Int, x: Any?, targetSqlType: SQLType?): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateObject(columnIndex: Int, x: Any?, targetSqlType: SQLType?, scaleOrLength: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnIndex: Int, x: Any?, targetSqlType: SQLType?, scaleOrLength: Int): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateObject(columnLabel: String?, x: Any?): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnLabel: String?, x: Any?): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateObject(columnLabel: String?, x: Any?, scaleOrLength: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnLabel: String?, x: Any?, scaleOrLength: Int): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateObject(columnLabel: String?, x: Any?, targetSqlType: SQLType?): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnLabel: String?, x: Any?, targetSqlType: SQLType?): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateObject(columnLabel: String?, x: Any?, targetSqlType: SQLType?, scaleOrLength: Int): Nothing","description":"org.ktorm.database.CachedRowSet.updateObject","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-object.html","searchKeys":["updateObject","open override fun updateObject(columnLabel: String?, x: Any?, targetSqlType: SQLType?, scaleOrLength: Int): Nothing","org.ktorm.database.CachedRowSet.updateObject"]},{"name":"open override fun updateRef(columnIndex: Int, x: Ref?): Nothing","description":"org.ktorm.database.CachedRowSet.updateRef","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ref.html","searchKeys":["updateRef","open override fun updateRef(columnIndex: Int, x: Ref?): Nothing","org.ktorm.database.CachedRowSet.updateRef"]},{"name":"open override fun updateRef(columnLabel: String?, x: Ref?): Nothing","description":"org.ktorm.database.CachedRowSet.updateRef","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-ref.html","searchKeys":["updateRef","open override fun updateRef(columnLabel: String?, x: Ref?): Nothing","org.ktorm.database.CachedRowSet.updateRef"]},{"name":"open override fun updateRow(): Nothing","description":"org.ktorm.database.CachedRowSet.updateRow","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-row.html","searchKeys":["updateRow","open override fun updateRow(): Nothing","org.ktorm.database.CachedRowSet.updateRow"]},{"name":"open override fun updateRowId(columnIndex: Int, x: RowId?): Nothing","description":"org.ktorm.database.CachedRowSet.updateRowId","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-row-id.html","searchKeys":["updateRowId","open override fun updateRowId(columnIndex: Int, x: RowId?): Nothing","org.ktorm.database.CachedRowSet.updateRowId"]},{"name":"open override fun updateRowId(columnLabel: String?, x: RowId?): Nothing","description":"org.ktorm.database.CachedRowSet.updateRowId","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-row-id.html","searchKeys":["updateRowId","open override fun updateRowId(columnLabel: String?, x: RowId?): Nothing","org.ktorm.database.CachedRowSet.updateRowId"]},{"name":"open override fun updateSQLXML(columnIndex: Int, xmlObject: SQLXML?): Nothing","description":"org.ktorm.database.CachedRowSet.updateSQLXML","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-s-q-l-x-m-l.html","searchKeys":["updateSQLXML","open override fun updateSQLXML(columnIndex: Int, xmlObject: SQLXML?): Nothing","org.ktorm.database.CachedRowSet.updateSQLXML"]},{"name":"open override fun updateSQLXML(columnLabel: String?, xmlObject: SQLXML?): Nothing","description":"org.ktorm.database.CachedRowSet.updateSQLXML","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-s-q-l-x-m-l.html","searchKeys":["updateSQLXML","open override fun updateSQLXML(columnLabel: String?, xmlObject: SQLXML?): Nothing","org.ktorm.database.CachedRowSet.updateSQLXML"]},{"name":"open override fun updateShort(columnIndex: Int, x: Short): Nothing","description":"org.ktorm.database.CachedRowSet.updateShort","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-short.html","searchKeys":["updateShort","open override fun updateShort(columnIndex: Int, x: Short): Nothing","org.ktorm.database.CachedRowSet.updateShort"]},{"name":"open override fun updateShort(columnLabel: String?, x: Short): Nothing","description":"org.ktorm.database.CachedRowSet.updateShort","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-short.html","searchKeys":["updateShort","open override fun updateShort(columnLabel: String?, x: Short): Nothing","org.ktorm.database.CachedRowSet.updateShort"]},{"name":"open override fun updateString(columnIndex: Int, x: String?): Nothing","description":"org.ktorm.database.CachedRowSet.updateString","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-string.html","searchKeys":["updateString","open override fun updateString(columnIndex: Int, x: String?): Nothing","org.ktorm.database.CachedRowSet.updateString"]},{"name":"open override fun updateString(columnLabel: String?, x: String?): Nothing","description":"org.ktorm.database.CachedRowSet.updateString","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-string.html","searchKeys":["updateString","open override fun updateString(columnLabel: String?, x: String?): Nothing","org.ktorm.database.CachedRowSet.updateString"]},{"name":"open override fun updateTime(columnIndex: Int, x: Time?): Nothing","description":"org.ktorm.database.CachedRowSet.updateTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-time.html","searchKeys":["updateTime","open override fun updateTime(columnIndex: Int, x: Time?): Nothing","org.ktorm.database.CachedRowSet.updateTime"]},{"name":"open override fun updateTime(columnLabel: String?, x: Time?): Nothing","description":"org.ktorm.database.CachedRowSet.updateTime","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-time.html","searchKeys":["updateTime","open override fun updateTime(columnLabel: String?, x: Time?): Nothing","org.ktorm.database.CachedRowSet.updateTime"]},{"name":"open override fun updateTimestamp(columnIndex: Int, x: Timestamp?): Nothing","description":"org.ktorm.database.CachedRowSet.updateTimestamp","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-timestamp.html","searchKeys":["updateTimestamp","open override fun updateTimestamp(columnIndex: Int, x: Timestamp?): Nothing","org.ktorm.database.CachedRowSet.updateTimestamp"]},{"name":"open override fun updateTimestamp(columnLabel: String?, x: Timestamp?): Nothing","description":"org.ktorm.database.CachedRowSet.updateTimestamp","location":"ktorm-core/org.ktorm.database/-cached-row-set/update-timestamp.html","searchKeys":["updateTimestamp","open override fun updateTimestamp(columnLabel: String?, x: Timestamp?): Nothing","org.ktorm.database.CachedRowSet.updateTimestamp"]},{"name":"open override fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.expression.SqlFormatter.visit","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit.html","searchKeys":["visit","open override fun visit(expr: SqlExpression): SqlExpression","org.ktorm.expression.SqlFormatter.visit"]},{"name":"open override fun visitBetween(expr: BetweenExpression): BetweenExpression","description":"org.ktorm.expression.SqlFormatter.visitBetween","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-between.html","searchKeys":["visitBetween","open override fun visitBetween(expr: BetweenExpression): BetweenExpression","org.ktorm.expression.SqlFormatter.visitBetween"]},{"name":"open override fun visitDelete(expr: DeleteExpression): DeleteExpression","description":"org.ktorm.expression.SqlFormatter.visitDelete","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-delete.html","searchKeys":["visitDelete","open override fun visitDelete(expr: DeleteExpression): DeleteExpression","org.ktorm.expression.SqlFormatter.visitDelete"]},{"name":"open override fun visitExists(expr: ExistsExpression): ExistsExpression","description":"org.ktorm.expression.SqlFormatter.visitExists","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-exists.html","searchKeys":["visitExists","open override fun visitExists(expr: ExistsExpression): ExistsExpression","org.ktorm.expression.SqlFormatter.visitExists"]},{"name":"open override fun visitInList(expr: InListExpression): InListExpression","description":"org.ktorm.expression.SqlFormatter.visitInList","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-in-list.html","searchKeys":["visitInList","open override fun visitInList(expr: InListExpression): InListExpression","org.ktorm.expression.SqlFormatter.visitInList"]},{"name":"open override fun visitInsert(expr: InsertExpression): InsertExpression","description":"org.ktorm.expression.SqlFormatter.visitInsert","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-insert.html","searchKeys":["visitInsert","open override fun visitInsert(expr: InsertExpression): InsertExpression","org.ktorm.expression.SqlFormatter.visitInsert"]},{"name":"open override fun visitInsertFromQuery(expr: InsertFromQueryExpression): InsertFromQueryExpression","description":"org.ktorm.expression.SqlFormatter.visitInsertFromQuery","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-insert-from-query.html","searchKeys":["visitInsertFromQuery","open override fun visitInsertFromQuery(expr: InsertFromQueryExpression): InsertFromQueryExpression","org.ktorm.expression.SqlFormatter.visitInsertFromQuery"]},{"name":"open override fun visitJoin(expr: JoinExpression): JoinExpression","description":"org.ktorm.expression.SqlFormatter.visitJoin","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-join.html","searchKeys":["visitJoin","open override fun visitJoin(expr: JoinExpression): JoinExpression","org.ktorm.expression.SqlFormatter.visitJoin"]},{"name":"open override fun visitOrderBy(expr: OrderByExpression): OrderByExpression","description":"org.ktorm.expression.SqlFormatter.visitOrderBy","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-order-by.html","searchKeys":["visitOrderBy","open override fun visitOrderBy(expr: OrderByExpression): OrderByExpression","org.ktorm.expression.SqlFormatter.visitOrderBy"]},{"name":"open override fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","description":"org.ktorm.expression.SqlFormatter.visitQuerySource","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-query-source.html","searchKeys":["visitQuerySource","open override fun visitQuerySource(expr: QuerySourceExpression): QuerySourceExpression","org.ktorm.expression.SqlFormatter.visitQuerySource"]},{"name":"open override fun visitSelect(expr: SelectExpression): SelectExpression","description":"org.ktorm.expression.SqlFormatter.visitSelect","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-select.html","searchKeys":["visitSelect","open override fun visitSelect(expr: SelectExpression): SelectExpression","org.ktorm.expression.SqlFormatter.visitSelect"]},{"name":"open override fun visitTable(expr: TableExpression): TableExpression","description":"org.ktorm.expression.SqlFormatter.visitTable","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-table.html","searchKeys":["visitTable","open override fun visitTable(expr: TableExpression): TableExpression","org.ktorm.expression.SqlFormatter.visitTable"]},{"name":"open override fun visitUnion(expr: UnionExpression): UnionExpression","description":"org.ktorm.expression.SqlFormatter.visitUnion","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-union.html","searchKeys":["visitUnion","open override fun visitUnion(expr: UnionExpression): UnionExpression","org.ktorm.expression.SqlFormatter.visitUnion"]},{"name":"open override fun visitUnknown(expr: SqlExpression): SqlExpression","description":"org.ktorm.expression.SqlFormatter.visitUnknown","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-unknown.html","searchKeys":["visitUnknown","open override fun visitUnknown(expr: SqlExpression): SqlExpression","org.ktorm.expression.SqlFormatter.visitUnknown"]},{"name":"open override fun visitUpdate(expr: UpdateExpression): UpdateExpression","description":"org.ktorm.expression.SqlFormatter.visitUpdate","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-update.html","searchKeys":["visitUpdate","open override fun visitUpdate(expr: UpdateExpression): UpdateExpression","org.ktorm.expression.SqlFormatter.visitUpdate"]},{"name":"open override fun visitWindowFrameBound(expr: WindowFrameBoundExpression): WindowFrameBoundExpression","description":"org.ktorm.expression.SqlFormatter.visitWindowFrameBound","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-window-frame-bound.html","searchKeys":["visitWindowFrameBound","open override fun visitWindowFrameBound(expr: WindowFrameBoundExpression): WindowFrameBoundExpression","org.ktorm.expression.SqlFormatter.visitWindowFrameBound"]},{"name":"open override fun visitWindowSpecification(expr: WindowSpecificationExpression): WindowSpecificationExpression","description":"org.ktorm.expression.SqlFormatter.visitWindowSpecification","location":"ktorm-core/org.ktorm.expression/-sql-formatter/visit-window-specification.html","searchKeys":["visitWindowSpecification","open override fun visitWindowSpecification(expr: WindowSpecificationExpression): WindowSpecificationExpression","org.ktorm.expression.SqlFormatter.visitWindowSpecification"]},{"name":"open override fun warn(msg: String, e: Throwable?)","description":"org.ktorm.logging.AndroidLoggerAdapter.warn","location":"ktorm-core/org.ktorm.logging/-android-logger-adapter/warn.html","searchKeys":["warn","open override fun warn(msg: String, e: Throwable?)","org.ktorm.logging.AndroidLoggerAdapter.warn"]},{"name":"open override fun warn(msg: String, e: Throwable?)","description":"org.ktorm.logging.CommonsLoggerAdapter.warn","location":"ktorm-core/org.ktorm.logging/-commons-logger-adapter/warn.html","searchKeys":["warn","open override fun warn(msg: String, e: Throwable?)","org.ktorm.logging.CommonsLoggerAdapter.warn"]},{"name":"open override fun warn(msg: String, e: Throwable?)","description":"org.ktorm.logging.ConsoleLogger.warn","location":"ktorm-core/org.ktorm.logging/-console-logger/warn.html","searchKeys":["warn","open override fun warn(msg: String, e: Throwable?)","org.ktorm.logging.ConsoleLogger.warn"]},{"name":"open override fun warn(msg: String, e: Throwable?)","description":"org.ktorm.logging.JdkLoggerAdapter.warn","location":"ktorm-core/org.ktorm.logging/-jdk-logger-adapter/warn.html","searchKeys":["warn","open override fun warn(msg: String, e: Throwable?)","org.ktorm.logging.JdkLoggerAdapter.warn"]},{"name":"open override fun warn(msg: String, e: Throwable?)","description":"org.ktorm.logging.NoOpLogger.warn","location":"ktorm-core/org.ktorm.logging/-no-op-logger/warn.html","searchKeys":["warn","open override fun warn(msg: String, e: Throwable?)","org.ktorm.logging.NoOpLogger.warn"]},{"name":"open override fun warn(msg: String, e: Throwable?)","description":"org.ktorm.logging.Slf4jLoggerAdapter.warn","location":"ktorm-core/org.ktorm.logging/-slf4j-logger-adapter/warn.html","searchKeys":["warn","open override fun warn(msg: String, e: Throwable?)","org.ktorm.logging.Slf4jLoggerAdapter.warn"]},{"name":"open override fun wasNull(): Boolean","description":"org.ktorm.database.CachedRowSet.wasNull","location":"ktorm-core/org.ktorm.database/-cached-row-set/was-null.html","searchKeys":["wasNull","open override fun wasNull(): Boolean","org.ktorm.database.CachedRowSet.wasNull"]},{"name":"open override fun wrapArgument(argument: T?): ArgumentExpression<T>","description":"org.ktorm.expression.ScalarExpression.wrapArgument","location":"ktorm-core/org.ktorm.expression/-scalar-expression/wrap-argument.html","searchKeys":["wrapArgument","open override fun wrapArgument(argument: T?): ArgumentExpression<T>","org.ktorm.expression.ScalarExpression.wrapArgument"]},{"name":"open override fun wrapArgument(argument: T?): ArgumentExpression<T>","description":"org.ktorm.schema.Column.wrapArgument","location":"ktorm-core/org.ktorm.schema/-column/wrap-argument.html","searchKeys":["wrapArgument","open override fun wrapArgument(argument: T?): ArgumentExpression<T>","org.ktorm.schema.Column.wrapArgument"]},{"name":"open override val currentTransaction: Transaction?","description":"org.ktorm.database.JdbcTransactionManager.currentTransaction","location":"ktorm-core/org.ktorm.database/-jdbc-transaction-manager/current-transaction.html","searchKeys":["currentTransaction","open override val currentTransaction: Transaction?","org.ktorm.database.JdbcTransactionManager.currentTransaction"]},{"name":"open override val currentTransaction: Transaction? = null","description":"org.ktorm.database.SpringManagedTransactionManager.currentTransaction","location":"ktorm-core/org.ktorm.database/-spring-managed-transaction-manager/current-transaction.html","searchKeys":["currentTransaction","open override val currentTransaction: Transaction? = null","org.ktorm.database.SpringManagedTransactionManager.currentTransaction"]},{"name":"open override val defaultIsolation: TransactionIsolation? = null","description":"org.ktorm.database.JdbcTransactionManager.defaultIsolation","location":"ktorm-core/org.ktorm.database/-jdbc-transaction-manager/default-isolation.html","searchKeys":["defaultIsolation","open override val defaultIsolation: TransactionIsolation? = null","org.ktorm.database.JdbcTransactionManager.defaultIsolation"]},{"name":"open override val defaultIsolation: TransactionIsolation? = null","description":"org.ktorm.database.SpringManagedTransactionManager.defaultIsolation","location":"ktorm-core/org.ktorm.database/-spring-managed-transaction-manager/default-isolation.html","searchKeys":["defaultIsolation","open override val defaultIsolation: TransactionIsolation? = null","org.ktorm.database.SpringManagedTransactionManager.defaultIsolation"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.AggregateExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.AggregateExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.ArgumentExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-argument-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.ArgumentExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.BetweenExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-between-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.BetweenExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.BinaryExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-binary-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.BinaryExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.CaseWhenExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-case-when-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.CaseWhenExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.CastingExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-casting-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.CastingExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.ColumnAssignmentExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-column-assignment-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.ColumnAssignmentExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.ColumnDeclaringExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.ColumnDeclaringExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.ColumnExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-column-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.ColumnExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.DeleteExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-delete-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.DeleteExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.ExistsExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-exists-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.ExistsExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.FunctionExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-function-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.FunctionExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.InListExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-in-list-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.InListExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.InsertExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-insert-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.InsertExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.InsertFromQueryExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-insert-from-query-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.InsertFromQueryExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.JoinExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-join-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.JoinExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.OrderByExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-order-by-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.OrderByExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.SelectExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-select-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.SelectExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.TableExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-table-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.TableExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.UnaryExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-unary-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.UnaryExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.UnionExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-union-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.UnionExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.UpdateExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-update-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.UpdateExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.WindowFrameBoundExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.WindowFrameBoundExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.WindowFunctionExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-window-function-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.WindowFunctionExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.expression.WindowSpecificationExpression.extraProperties","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.expression.WindowSpecificationExpression.extraProperties"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.AggregateExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.AggregateExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.BetweenExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-between-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.BetweenExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.BinaryExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-binary-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.BinaryExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.CaseWhenExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-case-when-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.CaseWhenExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.CastingExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-casting-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.CastingExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.ColumnAssignmentExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-column-assignment-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.ColumnAssignmentExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.ColumnDeclaringExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.ColumnDeclaringExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.ColumnExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-column-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.ColumnExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.DeleteExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-delete-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.DeleteExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.ExistsExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-exists-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.ExistsExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.FunctionExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-function-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.FunctionExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.InListExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-in-list-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.InListExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.InsertExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-insert-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.InsertExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.InsertFromQueryExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-insert-from-query-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.InsertFromQueryExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.JoinExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-join-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.JoinExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.OrderByExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-order-by-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.OrderByExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.UnaryExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-unary-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.UnaryExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.UpdateExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-update-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.UpdateExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.WindowFrameBoundExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.WindowFrameBoundExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.WindowFunctionExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-window-function-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.WindowFunctionExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.expression.WindowSpecificationExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.expression.WindowSpecificationExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = true","description":"org.ktorm.expression.ArgumentExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-argument-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = true","org.ktorm.expression.ArgumentExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = true","description":"org.ktorm.expression.TableExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-table-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = true","org.ktorm.expression.TableExpression.isLeafNode"]},{"name":"open override val limit: Int? = null","description":"org.ktorm.expression.SelectExpression.limit","location":"ktorm-core/org.ktorm.expression/-select-expression/limit.html","searchKeys":["limit","open override val limit: Int? = null","org.ktorm.expression.SelectExpression.limit"]},{"name":"open override val limit: Int? = null","description":"org.ktorm.expression.UnionExpression.limit","location":"ktorm-core/org.ktorm.expression/-union-expression/limit.html","searchKeys":["limit","open override val limit: Int? = null","org.ktorm.expression.UnionExpression.limit"]},{"name":"open override val offset: Int? = null","description":"org.ktorm.expression.SelectExpression.offset","location":"ktorm-core/org.ktorm.expression/-select-expression/offset.html","searchKeys":["offset","open override val offset: Int? = null","org.ktorm.expression.SelectExpression.offset"]},{"name":"open override val offset: Int? = null","description":"org.ktorm.expression.UnionExpression.offset","location":"ktorm-core/org.ktorm.expression/-union-expression/offset.html","searchKeys":["offset","open override val offset: Int? = null","org.ktorm.expression.UnionExpression.offset"]},{"name":"open override val orderBy: List<OrderByExpression>","description":"org.ktorm.expression.SelectExpression.orderBy","location":"ktorm-core/org.ktorm.expression/-select-expression/order-by.html","searchKeys":["orderBy","open override val orderBy: List<OrderByExpression>","org.ktorm.expression.SelectExpression.orderBy"]},{"name":"open override val orderBy: List<OrderByExpression>","description":"org.ktorm.expression.UnionExpression.orderBy","location":"ktorm-core/org.ktorm.expression/-union-expression/order-by.html","searchKeys":["orderBy","open override val orderBy: List<OrderByExpression>","org.ktorm.expression.UnionExpression.orderBy"]},{"name":"open override val sqlType: SqlType<Boolean>","description":"org.ktorm.expression.BetweenExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-between-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<Boolean>","org.ktorm.expression.BetweenExpression.sqlType"]},{"name":"open override val sqlType: SqlType<Boolean>","description":"org.ktorm.expression.ExistsExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-exists-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<Boolean>","org.ktorm.expression.ExistsExpression.sqlType"]},{"name":"open override val sqlType: SqlType<Boolean>","description":"org.ktorm.expression.InListExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-in-list-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<Boolean>","org.ktorm.expression.InListExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.AggregateExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.AggregateExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.ArgumentExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-argument-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.ArgumentExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.BinaryExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-binary-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.BinaryExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.CaseWhenExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-case-when-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.CaseWhenExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.CastingExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-casting-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.CastingExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.ColumnDeclaringExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.ColumnDeclaringExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.ColumnExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-column-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.ColumnExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.FunctionExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-function-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.FunctionExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.UnaryExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-unary-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.UnaryExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.expression.WindowFunctionExpression.sqlType","location":"ktorm-core/org.ktorm.expression/-window-function-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.expression.WindowFunctionExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.schema.Column.sqlType","location":"ktorm-core/org.ktorm.schema/-column/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.schema.Column.sqlType"]},{"name":"open override val tableAlias: String? = null","description":"org.ktorm.expression.SelectExpression.tableAlias","location":"ktorm-core/org.ktorm.expression/-select-expression/table-alias.html","searchKeys":["tableAlias","open override val tableAlias: String? = null","org.ktorm.expression.SelectExpression.tableAlias"]},{"name":"open override val tableAlias: String? = null","description":"org.ktorm.expression.UnionExpression.tableAlias","location":"ktorm-core/org.ktorm.expression/-union-expression/table-alias.html","searchKeys":["tableAlias","open override val tableAlias: String? = null","org.ktorm.expression.UnionExpression.tableAlias"]},{"name":"operator fun <C : Any> get(column: Column<C>): C?","description":"org.ktorm.dsl.QueryRowSet.get","location":"ktorm-core/org.ktorm.dsl/-query-row-set/get.html","searchKeys":["get","operator fun <C : Any> get(column: Column<C>): C?","org.ktorm.dsl.QueryRowSet.get"]},{"name":"operator fun <C : Any> get(column: ColumnDeclaringExpression<C>): C?","description":"org.ktorm.dsl.QueryRowSet.get","location":"ktorm-core/org.ktorm.dsl/-query-row-set/get.html","searchKeys":["get","operator fun <C : Any> get(column: ColumnDeclaringExpression<C>): C?","org.ktorm.dsl.QueryRowSet.get"]},{"name":"operator fun <T : Number> ColumnDeclaring<T>.unaryMinus(): UnaryExpression<T>","description":"org.ktorm.dsl.unaryMinus","location":"ktorm-core/org.ktorm.dsl/unary-minus.html","searchKeys":["unaryMinus","operator fun <T : Number> ColumnDeclaring<T>.unaryMinus(): UnaryExpression<T>","org.ktorm.dsl.unaryMinus"]},{"name":"operator fun <T : Number> ColumnDeclaring<T>.unaryPlus(): UnaryExpression<T>","description":"org.ktorm.dsl.unaryPlus","location":"ktorm-core/org.ktorm.dsl/unary-plus.html","searchKeys":["unaryPlus","operator fun <T : Number> ColumnDeclaring<T>.unaryPlus(): UnaryExpression<T>","org.ktorm.dsl.unaryPlus"]},{"name":"operator fun <T : ResultSet> T.iterator(): Iterator<T>","description":"org.ktorm.database.iterator","location":"ktorm-core/org.ktorm.database/iterator.html","searchKeys":["iterator","operator fun <T : ResultSet> T.iterator(): Iterator<T>","org.ktorm.database.iterator"]},{"name":"operator fun ColumnDeclaring<Boolean>.not(): UnaryExpression<Boolean>","description":"org.ktorm.dsl.not","location":"ktorm-core/org.ktorm.dsl/not.html","searchKeys":["not","operator fun ColumnDeclaring<Boolean>.not(): UnaryExpression<Boolean>","org.ktorm.dsl.not"]},{"name":"operator fun get(name: String): Column<*>","description":"org.ktorm.schema.BaseTable.get","location":"ktorm-core/org.ktorm.schema/-base-table/get.html","searchKeys":["get","operator fun get(name: String): Column<*>","org.ktorm.schema.BaseTable.get"]},{"name":"operator fun invoke(): E","description":"org.ktorm.entity.Entity.Factory.invoke","location":"ktorm-core/org.ktorm.entity/-entity/-factory/invoke.html","searchKeys":["invoke","operator fun invoke(): E","org.ktorm.entity.Entity.Factory.invoke"]},{"name":"operator fun iterator(): Iterator<E>","description":"org.ktorm.entity.EntitySequence.iterator","location":"ktorm-core/org.ktorm.entity/-entity-sequence/iterator.html","searchKeys":["iterator","operator fun iterator(): Iterator<E>","org.ktorm.entity.EntitySequence.iterator"]},{"name":"operator fun iterator(): Iterator<QueryRowSet>","description":"org.ktorm.dsl.Query.iterator","location":"ktorm-core/org.ktorm.dsl/-query/iterator.html","searchKeys":["iterator","operator fun iterator(): Iterator<QueryRowSet>","org.ktorm.dsl.Query.iterator"]},{"name":"operator override fun equals(other: Any?): Boolean","description":"org.ktorm.schema.BaseTable.equals","location":"ktorm-core/org.ktorm.schema/-base-table/equals.html","searchKeys":["equals","operator override fun equals(other: Any?): Boolean","org.ktorm.schema.BaseTable.equals"]},{"name":"override fun hashCode(): Int","description":"org.ktorm.schema.BaseTable.hashCode","location":"ktorm-core/org.ktorm.schema/-base-table/hash-code.html","searchKeys":["hashCode","override fun hashCode(): Int","org.ktorm.schema.BaseTable.hashCode"]},{"name":"override val isLeafNode: Boolean = false","description":"org.ktorm.expression.QueryExpression.isLeafNode","location":"ktorm-core/org.ktorm.expression/-query-expression/is-leaf-node.html","searchKeys":["isLeafNode","override val isLeafNode: Boolean = false","org.ktorm.expression.QueryExpression.isLeafNode"]},{"name":"sealed class ColumnBinding","description":"org.ktorm.schema.ColumnBinding","location":"ktorm-core/org.ktorm.schema/-column-binding/index.html","searchKeys":["ColumnBinding","sealed class ColumnBinding","org.ktorm.schema.ColumnBinding"]},{"name":"sealed class QueryExpression : QuerySourceExpression","description":"org.ktorm.expression.QueryExpression","location":"ktorm-core/org.ktorm.expression/-query-expression/index.html","searchKeys":["QueryExpression","sealed class QueryExpression : QuerySourceExpression","org.ktorm.expression.QueryExpression"]},{"name":"typealias Tuple2<E1, E2> = Pair<E1, E2>","description":"org.ktorm.entity.Tuple2","location":"ktorm-core/org.ktorm.entity/-tuple2/index.html","searchKeys":["Tuple2","typealias Tuple2<E1, E2> = Pair<E1, E2>","org.ktorm.entity.Tuple2"]},{"name":"typealias Tuple3<E1, E2, E3> = Triple<E1, E2, E3>","description":"org.ktorm.entity.Tuple3","location":"ktorm-core/org.ktorm.entity/-tuple3/index.html","searchKeys":["Tuple3","typealias Tuple3<E1, E2, E3> = Triple<E1, E2, E3>","org.ktorm.entity.Tuple3"]},{"name":"val alias: String?","description":"org.ktorm.schema.BaseTable.alias","location":"ktorm-core/org.ktorm.schema/-base-table/alias.html","searchKeys":["alias","val alias: String?","org.ktorm.schema.BaseTable.alias"]},{"name":"val allBindings: List<ColumnBinding>","description":"org.ktorm.schema.Column.allBindings","location":"ktorm-core/org.ktorm.schema/-column/all-bindings.html","searchKeys":["allBindings","val allBindings: List<ColumnBinding>","org.ktorm.schema.Column.allBindings"]},{"name":"val alwaysQuoteIdentifiers: Boolean = false","description":"org.ktorm.database.Database.alwaysQuoteIdentifiers","location":"ktorm-core/org.ktorm.database/-database/always-quote-identifiers.html","searchKeys":["alwaysQuoteIdentifiers","val alwaysQuoteIdentifiers: Boolean = false","org.ktorm.database.Database.alwaysQuoteIdentifiers"]},{"name":"val argument: ScalarExpression<*>?","description":"org.ktorm.expression.AggregateExpression.argument","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/argument.html","searchKeys":["argument","val argument: ScalarExpression<*>?","org.ktorm.expression.AggregateExpression.argument"]},{"name":"val argument: ScalarExpression<*>?","description":"org.ktorm.expression.WindowFrameBoundExpression.argument","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-expression/argument.html","searchKeys":["argument","val argument: ScalarExpression<*>?","org.ktorm.expression.WindowFrameBoundExpression.argument"]},{"name":"val arguments: List<ScalarExpression<*>>","description":"org.ktorm.expression.FunctionExpression.arguments","location":"ktorm-core/org.ktorm.expression/-function-expression/arguments.html","searchKeys":["arguments","val arguments: List<ScalarExpression<*>>","org.ktorm.expression.FunctionExpression.arguments"]},{"name":"val arguments: List<ScalarExpression<*>>","description":"org.ktorm.expression.WindowFunctionExpression.arguments","location":"ktorm-core/org.ktorm.expression/-window-function-expression/arguments.html","searchKeys":["arguments","val arguments: List<ScalarExpression<*>>","org.ktorm.expression.WindowFunctionExpression.arguments"]},{"name":"val assignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.expression.InsertExpression.assignments","location":"ktorm-core/org.ktorm.expression/-insert-expression/assignments.html","searchKeys":["assignments","val assignments: List<ColumnAssignmentExpression<*>>","org.ktorm.expression.InsertExpression.assignments"]},{"name":"val assignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.expression.UpdateExpression.assignments","location":"ktorm-core/org.ktorm.expression/-update-expression/assignments.html","searchKeys":["assignments","val assignments: List<ColumnAssignmentExpression<*>>","org.ktorm.expression.UpdateExpression.assignments"]},{"name":"val beautifySql: Boolean","description":"org.ktorm.expression.SqlFormatter.beautifySql","location":"ktorm-core/org.ktorm.expression/-sql-formatter/beautify-sql.html","searchKeys":["beautifySql","val beautifySql: Boolean","org.ktorm.expression.SqlFormatter.beautifySql"]},{"name":"val binding: ColumnBinding? = null","description":"org.ktorm.schema.Column.binding","location":"ktorm-core/org.ktorm.schema/-column/binding.html","searchKeys":["binding","val binding: ColumnBinding? = null","org.ktorm.schema.Column.binding"]},{"name":"val catalog: String?","description":"org.ktorm.schema.BaseTable.catalog","location":"ktorm-core/org.ktorm.schema/-base-table/catalog.html","searchKeys":["catalog","val catalog: String?","org.ktorm.schema.BaseTable.catalog"]},{"name":"val catalog: String? = null","description":"org.ktorm.expression.TableExpression.catalog","location":"ktorm-core/org.ktorm.expression/-table-expression/catalog.html","searchKeys":["catalog","val catalog: String? = null","org.ktorm.expression.TableExpression.catalog"]},{"name":"val column: ColumnExpression<T>","description":"org.ktorm.expression.ColumnAssignmentExpression.column","location":"ktorm-core/org.ktorm.expression/-column-assignment-expression/column.html","searchKeys":["column","val column: ColumnExpression<T>","org.ktorm.expression.ColumnAssignmentExpression.column"]},{"name":"val columns: List<Column<*>>","description":"org.ktorm.schema.BaseTable.columns","location":"ktorm-core/org.ktorm.schema/-base-table/columns.html","searchKeys":["columns","val columns: List<Column<*>>","org.ktorm.schema.BaseTable.columns"]},{"name":"val columns: List<ColumnDeclaringExpression<*>>","description":"org.ktorm.expression.SelectExpression.columns","location":"ktorm-core/org.ktorm.expression/-select-expression/columns.html","searchKeys":["columns","val columns: List<ColumnDeclaringExpression<*>>","org.ktorm.expression.SelectExpression.columns"]},{"name":"val columns: List<ColumnExpression<*>>","description":"org.ktorm.expression.InsertFromQueryExpression.columns","location":"ktorm-core/org.ktorm.expression/-insert-from-query-expression/columns.html","searchKeys":["columns","val columns: List<ColumnExpression<*>>","org.ktorm.expression.InsertFromQueryExpression.columns"]},{"name":"val condition: ColumnDeclaring<T>","description":"org.ktorm.dsl.WhenContinuation.condition","location":"ktorm-core/org.ktorm.dsl/-when-continuation/condition.html","searchKeys":["condition","val condition: ColumnDeclaring<T>","org.ktorm.dsl.WhenContinuation.condition"]},{"name":"val condition: ScalarExpression<Boolean>? = null","description":"org.ktorm.expression.JoinExpression.condition","location":"ktorm-core/org.ktorm.expression/-join-expression/condition.html","searchKeys":["condition","val condition: ScalarExpression<Boolean>? = null","org.ktorm.expression.JoinExpression.condition"]},{"name":"val connector: () -> Connection","description":"org.ktorm.database.JdbcTransactionManager.connector","location":"ktorm-core/org.ktorm.database/-jdbc-transaction-manager/connector.html","searchKeys":["connector","val connector: () -> Connection","org.ktorm.database.JdbcTransactionManager.connector"]},{"name":"val dataSource: DataSource","description":"org.ktorm.database.SpringManagedTransactionManager.dataSource","location":"ktorm-core/org.ktorm.database/-spring-managed-transaction-manager/data-source.html","searchKeys":["dataSource","val dataSource: DataSource","org.ktorm.database.SpringManagedTransactionManager.dataSource"]},{"name":"val database: Database","description":"org.ktorm.dsl.Query.database","location":"ktorm-core/org.ktorm.dsl/-query/database.html","searchKeys":["database","val database: Database","org.ktorm.dsl.Query.database"]},{"name":"val database: Database","description":"org.ktorm.dsl.QuerySource.database","location":"ktorm-core/org.ktorm.dsl/-query-source/database.html","searchKeys":["database","val database: Database","org.ktorm.dsl.QuerySource.database"]},{"name":"val database: Database","description":"org.ktorm.entity.EntitySequence.database","location":"ktorm-core/org.ktorm.entity/-entity-sequence/database.html","searchKeys":["database","val database: Database","org.ktorm.entity.EntitySequence.database"]},{"name":"val database: Database","description":"org.ktorm.expression.SqlFormatter.database","location":"ktorm-core/org.ktorm.expression/-sql-formatter/database.html","searchKeys":["database","val database: Database","org.ktorm.expression.SqlFormatter.database"]},{"name":"val declaredName: String? = null","description":"org.ktorm.expression.ColumnDeclaringExpression.declaredName","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/declared-name.html","searchKeys":["declaredName","val declaredName: String? = null","org.ktorm.expression.ColumnDeclaringExpression.declaredName"]},{"name":"val dialect: SqlDialect","description":"org.ktorm.database.Database.dialect","location":"ktorm-core/org.ktorm.database/-database/dialect.html","searchKeys":["dialect","val dialect: SqlDialect","org.ktorm.database.Database.dialect"]},{"name":"val element1: E1","description":"org.ktorm.entity.Tuple4.element1","location":"ktorm-core/org.ktorm.entity/-tuple4/element1.html","searchKeys":["element1","val element1: E1","org.ktorm.entity.Tuple4.element1"]},{"name":"val element1: E1","description":"org.ktorm.entity.Tuple5.element1","location":"ktorm-core/org.ktorm.entity/-tuple5/element1.html","searchKeys":["element1","val element1: E1","org.ktorm.entity.Tuple5.element1"]},{"name":"val element1: E1","description":"org.ktorm.entity.Tuple6.element1","location":"ktorm-core/org.ktorm.entity/-tuple6/element1.html","searchKeys":["element1","val element1: E1","org.ktorm.entity.Tuple6.element1"]},{"name":"val element1: E1","description":"org.ktorm.entity.Tuple7.element1","location":"ktorm-core/org.ktorm.entity/-tuple7/element1.html","searchKeys":["element1","val element1: E1","org.ktorm.entity.Tuple7.element1"]},{"name":"val element1: E1","description":"org.ktorm.entity.Tuple8.element1","location":"ktorm-core/org.ktorm.entity/-tuple8/element1.html","searchKeys":["element1","val element1: E1","org.ktorm.entity.Tuple8.element1"]},{"name":"val element1: E1","description":"org.ktorm.entity.Tuple9.element1","location":"ktorm-core/org.ktorm.entity/-tuple9/element1.html","searchKeys":["element1","val element1: E1","org.ktorm.entity.Tuple9.element1"]},{"name":"val element2: E2","description":"org.ktorm.entity.Tuple4.element2","location":"ktorm-core/org.ktorm.entity/-tuple4/element2.html","searchKeys":["element2","val element2: E2","org.ktorm.entity.Tuple4.element2"]},{"name":"val element2: E2","description":"org.ktorm.entity.Tuple5.element2","location":"ktorm-core/org.ktorm.entity/-tuple5/element2.html","searchKeys":["element2","val element2: E2","org.ktorm.entity.Tuple5.element2"]},{"name":"val element2: E2","description":"org.ktorm.entity.Tuple6.element2","location":"ktorm-core/org.ktorm.entity/-tuple6/element2.html","searchKeys":["element2","val element2: E2","org.ktorm.entity.Tuple6.element2"]},{"name":"val element2: E2","description":"org.ktorm.entity.Tuple7.element2","location":"ktorm-core/org.ktorm.entity/-tuple7/element2.html","searchKeys":["element2","val element2: E2","org.ktorm.entity.Tuple7.element2"]},{"name":"val element2: E2","description":"org.ktorm.entity.Tuple8.element2","location":"ktorm-core/org.ktorm.entity/-tuple8/element2.html","searchKeys":["element2","val element2: E2","org.ktorm.entity.Tuple8.element2"]},{"name":"val element2: E2","description":"org.ktorm.entity.Tuple9.element2","location":"ktorm-core/org.ktorm.entity/-tuple9/element2.html","searchKeys":["element2","val element2: E2","org.ktorm.entity.Tuple9.element2"]},{"name":"val element3: E3","description":"org.ktorm.entity.Tuple4.element3","location":"ktorm-core/org.ktorm.entity/-tuple4/element3.html","searchKeys":["element3","val element3: E3","org.ktorm.entity.Tuple4.element3"]},{"name":"val element3: E3","description":"org.ktorm.entity.Tuple5.element3","location":"ktorm-core/org.ktorm.entity/-tuple5/element3.html","searchKeys":["element3","val element3: E3","org.ktorm.entity.Tuple5.element3"]},{"name":"val element3: E3","description":"org.ktorm.entity.Tuple6.element3","location":"ktorm-core/org.ktorm.entity/-tuple6/element3.html","searchKeys":["element3","val element3: E3","org.ktorm.entity.Tuple6.element3"]},{"name":"val element3: E3","description":"org.ktorm.entity.Tuple7.element3","location":"ktorm-core/org.ktorm.entity/-tuple7/element3.html","searchKeys":["element3","val element3: E3","org.ktorm.entity.Tuple7.element3"]},{"name":"val element3: E3","description":"org.ktorm.entity.Tuple8.element3","location":"ktorm-core/org.ktorm.entity/-tuple8/element3.html","searchKeys":["element3","val element3: E3","org.ktorm.entity.Tuple8.element3"]},{"name":"val element3: E3","description":"org.ktorm.entity.Tuple9.element3","location":"ktorm-core/org.ktorm.entity/-tuple9/element3.html","searchKeys":["element3","val element3: E3","org.ktorm.entity.Tuple9.element3"]},{"name":"val element4: E4","description":"org.ktorm.entity.Tuple4.element4","location":"ktorm-core/org.ktorm.entity/-tuple4/element4.html","searchKeys":["element4","val element4: E4","org.ktorm.entity.Tuple4.element4"]},{"name":"val element4: E4","description":"org.ktorm.entity.Tuple5.element4","location":"ktorm-core/org.ktorm.entity/-tuple5/element4.html","searchKeys":["element4","val element4: E4","org.ktorm.entity.Tuple5.element4"]},{"name":"val element4: E4","description":"org.ktorm.entity.Tuple6.element4","location":"ktorm-core/org.ktorm.entity/-tuple6/element4.html","searchKeys":["element4","val element4: E4","org.ktorm.entity.Tuple6.element4"]},{"name":"val element4: E4","description":"org.ktorm.entity.Tuple7.element4","location":"ktorm-core/org.ktorm.entity/-tuple7/element4.html","searchKeys":["element4","val element4: E4","org.ktorm.entity.Tuple7.element4"]},{"name":"val element4: E4","description":"org.ktorm.entity.Tuple8.element4","location":"ktorm-core/org.ktorm.entity/-tuple8/element4.html","searchKeys":["element4","val element4: E4","org.ktorm.entity.Tuple8.element4"]},{"name":"val element4: E4","description":"org.ktorm.entity.Tuple9.element4","location":"ktorm-core/org.ktorm.entity/-tuple9/element4.html","searchKeys":["element4","val element4: E4","org.ktorm.entity.Tuple9.element4"]},{"name":"val element5: E5","description":"org.ktorm.entity.Tuple5.element5","location":"ktorm-core/org.ktorm.entity/-tuple5/element5.html","searchKeys":["element5","val element5: E5","org.ktorm.entity.Tuple5.element5"]},{"name":"val element5: E5","description":"org.ktorm.entity.Tuple6.element5","location":"ktorm-core/org.ktorm.entity/-tuple6/element5.html","searchKeys":["element5","val element5: E5","org.ktorm.entity.Tuple6.element5"]},{"name":"val element5: E5","description":"org.ktorm.entity.Tuple7.element5","location":"ktorm-core/org.ktorm.entity/-tuple7/element5.html","searchKeys":["element5","val element5: E5","org.ktorm.entity.Tuple7.element5"]},{"name":"val element5: E5","description":"org.ktorm.entity.Tuple8.element5","location":"ktorm-core/org.ktorm.entity/-tuple8/element5.html","searchKeys":["element5","val element5: E5","org.ktorm.entity.Tuple8.element5"]},{"name":"val element5: E5","description":"org.ktorm.entity.Tuple9.element5","location":"ktorm-core/org.ktorm.entity/-tuple9/element5.html","searchKeys":["element5","val element5: E5","org.ktorm.entity.Tuple9.element5"]},{"name":"val element6: E6","description":"org.ktorm.entity.Tuple6.element6","location":"ktorm-core/org.ktorm.entity/-tuple6/element6.html","searchKeys":["element6","val element6: E6","org.ktorm.entity.Tuple6.element6"]},{"name":"val element6: E6","description":"org.ktorm.entity.Tuple7.element6","location":"ktorm-core/org.ktorm.entity/-tuple7/element6.html","searchKeys":["element6","val element6: E6","org.ktorm.entity.Tuple7.element6"]},{"name":"val element6: E6","description":"org.ktorm.entity.Tuple8.element6","location":"ktorm-core/org.ktorm.entity/-tuple8/element6.html","searchKeys":["element6","val element6: E6","org.ktorm.entity.Tuple8.element6"]},{"name":"val element6: E6","description":"org.ktorm.entity.Tuple9.element6","location":"ktorm-core/org.ktorm.entity/-tuple9/element6.html","searchKeys":["element6","val element6: E6","org.ktorm.entity.Tuple9.element6"]},{"name":"val element7: E7","description":"org.ktorm.entity.Tuple7.element7","location":"ktorm-core/org.ktorm.entity/-tuple7/element7.html","searchKeys":["element7","val element7: E7","org.ktorm.entity.Tuple7.element7"]},{"name":"val element7: E7","description":"org.ktorm.entity.Tuple8.element7","location":"ktorm-core/org.ktorm.entity/-tuple8/element7.html","searchKeys":["element7","val element7: E7","org.ktorm.entity.Tuple8.element7"]},{"name":"val element7: E7","description":"org.ktorm.entity.Tuple9.element7","location":"ktorm-core/org.ktorm.entity/-tuple9/element7.html","searchKeys":["element7","val element7: E7","org.ktorm.entity.Tuple9.element7"]},{"name":"val element8: E8","description":"org.ktorm.entity.Tuple8.element8","location":"ktorm-core/org.ktorm.entity/-tuple8/element8.html","searchKeys":["element8","val element8: E8","org.ktorm.entity.Tuple8.element8"]},{"name":"val element8: E8","description":"org.ktorm.entity.Tuple9.element8","location":"ktorm-core/org.ktorm.entity/-tuple9/element8.html","searchKeys":["element8","val element8: E8","org.ktorm.entity.Tuple9.element8"]},{"name":"val element9: E9","description":"org.ktorm.entity.Tuple9.element9","location":"ktorm-core/org.ktorm.entity/-tuple9/element9.html","searchKeys":["element9","val element9: E9","org.ktorm.entity.Tuple9.element9"]},{"name":"val elseClause: ColumnDeclaring<R>? = null","description":"org.ktorm.dsl.CaseWhen.elseClause","location":"ktorm-core/org.ktorm.dsl/-case-when/else-clause.html","searchKeys":["elseClause","val elseClause: ColumnDeclaring<R>? = null","org.ktorm.dsl.CaseWhen.elseClause"]},{"name":"val elseClause: ScalarExpression<T>?","description":"org.ktorm.expression.CaseWhenExpression.elseClause","location":"ktorm-core/org.ktorm.expression/-case-when-expression/else-clause.html","searchKeys":["elseClause","val elseClause: ScalarExpression<T>?","org.ktorm.expression.CaseWhenExpression.elseClause"]},{"name":"val entityClass: KClass<E>?","description":"org.ktorm.schema.BaseTable.entityClass","location":"ktorm-core/org.ktorm.schema/-base-table/entity-class.html","searchKeys":["entityClass","val entityClass: KClass<E>?","org.ktorm.schema.BaseTable.entityClass"]},{"name":"val entityExtractor: (row: QueryRowSet) -> E","description":"org.ktorm.entity.EntitySequence.entityExtractor","location":"ktorm-core/org.ktorm.entity/-entity-sequence/entity-extractor.html","searchKeys":["entityExtractor","val entityExtractor: (row: QueryRowSet) -> E","org.ktorm.entity.EntitySequence.entityExtractor"]},{"name":"val entries: EnumEntries<AggregateType>","description":"org.ktorm.expression.AggregateType.entries","location":"ktorm-core/org.ktorm.expression/-aggregate-type/entries.html","searchKeys":["entries","val entries: EnumEntries<AggregateType>","org.ktorm.expression.AggregateType.entries"]},{"name":"val entries: EnumEntries<BinaryExpressionType>","description":"org.ktorm.expression.BinaryExpressionType.entries","location":"ktorm-core/org.ktorm.expression/-binary-expression-type/entries.html","searchKeys":["entries","val entries: EnumEntries<BinaryExpressionType>","org.ktorm.expression.BinaryExpressionType.entries"]},{"name":"val entries: EnumEntries<JoinType>","description":"org.ktorm.expression.JoinType.entries","location":"ktorm-core/org.ktorm.expression/-join-type/entries.html","searchKeys":["entries","val entries: EnumEntries<JoinType>","org.ktorm.expression.JoinType.entries"]},{"name":"val entries: EnumEntries<LogLevel>","description":"org.ktorm.logging.LogLevel.entries","location":"ktorm-core/org.ktorm.logging/-log-level/entries.html","searchKeys":["entries","val entries: EnumEntries<LogLevel>","org.ktorm.logging.LogLevel.entries"]},{"name":"val entries: EnumEntries<OrderType>","description":"org.ktorm.expression.OrderType.entries","location":"ktorm-core/org.ktorm.expression/-order-type/entries.html","searchKeys":["entries","val entries: EnumEntries<OrderType>","org.ktorm.expression.OrderType.entries"]},{"name":"val entries: EnumEntries<TransactionIsolation>","description":"org.ktorm.database.TransactionIsolation.entries","location":"ktorm-core/org.ktorm.database/-transaction-isolation/entries.html","searchKeys":["entries","val entries: EnumEntries<TransactionIsolation>","org.ktorm.database.TransactionIsolation.entries"]},{"name":"val entries: EnumEntries<UnaryExpressionType>","description":"org.ktorm.expression.UnaryExpressionType.entries","location":"ktorm-core/org.ktorm.expression/-unary-expression-type/entries.html","searchKeys":["entries","val entries: EnumEntries<UnaryExpressionType>","org.ktorm.expression.UnaryExpressionType.entries"]},{"name":"val entries: EnumEntries<WindowFrameBoundType>","description":"org.ktorm.expression.WindowFrameBoundType.entries","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-type/entries.html","searchKeys":["entries","val entries: EnumEntries<WindowFrameBoundType>","org.ktorm.expression.WindowFrameBoundType.entries"]},{"name":"val entries: EnumEntries<WindowFrameUnitType>","description":"org.ktorm.expression.WindowFrameUnitType.entries","location":"ktorm-core/org.ktorm.expression/-window-frame-unit-type/entries.html","searchKeys":["entries","val entries: EnumEntries<WindowFrameUnitType>","org.ktorm.expression.WindowFrameUnitType.entries"]},{"name":"val entries: EnumEntries<WindowFunctionType>","description":"org.ktorm.expression.WindowFunctionType.entries","location":"ktorm-core/org.ktorm.expression/-window-function-type/entries.html","searchKeys":["entries","val entries: EnumEntries<WindowFunctionType>","org.ktorm.expression.WindowFunctionType.entries"]},{"name":"val enumClass: Class<C>","description":"org.ktorm.schema.EnumSqlType.enumClass","location":"ktorm-core/org.ktorm.schema/-enum-sql-type/enum-class.html","searchKeys":["enumClass","val enumClass: Class<C>","org.ktorm.schema.EnumSqlType.enumClass"]},{"name":"val exceptionTranslator: (SQLException) -> Throwable? = null","description":"org.ktorm.database.Database.exceptionTranslator","location":"ktorm-core/org.ktorm.database/-database/exception-translator.html","searchKeys":["exceptionTranslator","val exceptionTranslator: (SQLException) -> Throwable? = null","org.ktorm.database.Database.exceptionTranslator"]},{"name":"val expression: QueryExpression","description":"org.ktorm.dsl.Query.expression","location":"ktorm-core/org.ktorm.dsl/-query/expression.html","searchKeys":["expression","val expression: QueryExpression","org.ktorm.dsl.Query.expression"]},{"name":"val expression: QuerySourceExpression","description":"org.ktorm.dsl.QuerySource.expression","location":"ktorm-core/org.ktorm.dsl/-query-source/expression.html","searchKeys":["expression","val expression: QuerySourceExpression","org.ktorm.dsl.QuerySource.expression"]},{"name":"val expression: ScalarExpression<*>","description":"org.ktorm.expression.BetweenExpression.expression","location":"ktorm-core/org.ktorm.expression/-between-expression/expression.html","searchKeys":["expression","val expression: ScalarExpression<*>","org.ktorm.expression.BetweenExpression.expression"]},{"name":"val expression: ScalarExpression<*>","description":"org.ktorm.expression.OrderByExpression.expression","location":"ktorm-core/org.ktorm.expression/-order-by-expression/expression.html","searchKeys":["expression","val expression: ScalarExpression<*>","org.ktorm.expression.OrderByExpression.expression"]},{"name":"val expression: ScalarExpression<T>","description":"org.ktorm.expression.ColumnAssignmentExpression.expression","location":"ktorm-core/org.ktorm.expression/-column-assignment-expression/expression.html","searchKeys":["expression","val expression: ScalarExpression<T>","org.ktorm.expression.ColumnAssignmentExpression.expression"]},{"name":"val expression: ScalarExpression<T>","description":"org.ktorm.expression.ColumnDeclaringExpression.expression","location":"ktorm-core/org.ktorm.expression/-column-declaring-expression/expression.html","searchKeys":["expression","val expression: ScalarExpression<T>","org.ktorm.expression.ColumnDeclaringExpression.expression"]},{"name":"val expression: SelectExpression","description":"org.ktorm.entity.EntitySequence.expression","location":"ktorm-core/org.ktorm.entity/-entity-sequence/expression.html","searchKeys":["expression","val expression: SelectExpression","org.ktorm.entity.EntitySequence.expression"]},{"name":"val expression: SqlExpression","description":"org.ktorm.expression.CastingExpression.expression","location":"ktorm-core/org.ktorm.expression/-casting-expression/expression.html","searchKeys":["expression","val expression: SqlExpression","org.ktorm.expression.CastingExpression.expression"]},{"name":"val extraBindings: List<ColumnBinding>","description":"org.ktorm.schema.Column.extraBindings","location":"ktorm-core/org.ktorm.schema/-column/extra-bindings.html","searchKeys":["extraBindings","val extraBindings: List<ColumnBinding>","org.ktorm.schema.Column.extraBindings"]},{"name":"val extraNameCharacters: String","description":"org.ktorm.database.Database.extraNameCharacters","location":"ktorm-core/org.ktorm.database/-database/extra-name-characters.html","searchKeys":["extraNameCharacters","val extraNameCharacters: String","org.ktorm.database.Database.extraNameCharacters"]},{"name":"val frameEnd: WindowFrameBoundExpression? = null","description":"org.ktorm.expression.WindowSpecificationExpression.frameEnd","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/frame-end.html","searchKeys":["frameEnd","val frameEnd: WindowFrameBoundExpression? = null","org.ktorm.expression.WindowSpecificationExpression.frameEnd"]},{"name":"val frameStart: WindowFrameBoundExpression? = null","description":"org.ktorm.expression.WindowSpecificationExpression.frameStart","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/frame-start.html","searchKeys":["frameStart","val frameStart: WindowFrameBoundExpression? = null","org.ktorm.expression.WindowSpecificationExpression.frameStart"]},{"name":"val frameUnit: WindowFrameUnitType? = null","description":"org.ktorm.expression.WindowSpecificationExpression.frameUnit","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/frame-unit.html","searchKeys":["frameUnit","val frameUnit: WindowFrameUnitType? = null","org.ktorm.expression.WindowSpecificationExpression.frameUnit"]},{"name":"val from: QuerySourceExpression","description":"org.ktorm.expression.SelectExpression.from","location":"ktorm-core/org.ktorm.expression/-select-expression/from.html","searchKeys":["from","val from: QuerySourceExpression","org.ktorm.expression.SelectExpression.from"]},{"name":"val functionName: String","description":"org.ktorm.expression.FunctionExpression.functionName","location":"ktorm-core/org.ktorm.expression/-function-expression/function-name.html","searchKeys":["functionName","val functionName: String","org.ktorm.expression.FunctionExpression.functionName"]},{"name":"val generateSqlInUpperCase: Boolean? = null","description":"org.ktorm.database.Database.generateSqlInUpperCase","location":"ktorm-core/org.ktorm.database/-database/generate-sql-in-upper-case.html","searchKeys":["generateSqlInUpperCase","val generateSqlInUpperCase: Boolean? = null","org.ktorm.database.Database.generateSqlInUpperCase"]},{"name":"val groupBy: List<ScalarExpression<*>>","description":"org.ktorm.expression.SelectExpression.groupBy","location":"ktorm-core/org.ktorm.expression/-select-expression/group-by.html","searchKeys":["groupBy","val groupBy: List<ScalarExpression<*>>","org.ktorm.expression.SelectExpression.groupBy"]},{"name":"val having: ScalarExpression<Boolean>? = null","description":"org.ktorm.expression.SelectExpression.having","location":"ktorm-core/org.ktorm.expression/-select-expression/having.html","searchKeys":["having","val having: ScalarExpression<Boolean>? = null","org.ktorm.expression.SelectExpression.having"]},{"name":"val identifierQuoteString: String","description":"org.ktorm.database.Database.identifierQuoteString","location":"ktorm-core/org.ktorm.database/-database/identifier-quote-string.html","searchKeys":["identifierQuoteString","val identifierQuoteString: String","org.ktorm.database.Database.identifierQuoteString"]},{"name":"val indentSize: Int","description":"org.ktorm.expression.SqlFormatter.indentSize","location":"ktorm-core/org.ktorm.expression/-sql-formatter/indent-size.html","searchKeys":["indentSize","val indentSize: Int","org.ktorm.expression.SqlFormatter.indentSize"]},{"name":"val isDistinct: Boolean = false","description":"org.ktorm.expression.AggregateExpression.isDistinct","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/is-distinct.html","searchKeys":["isDistinct","val isDistinct: Boolean = false","org.ktorm.expression.AggregateExpression.isDistinct"]},{"name":"val isDistinct: Boolean = false","description":"org.ktorm.expression.SelectExpression.isDistinct","location":"ktorm-core/org.ktorm.expression/-select-expression/is-distinct.html","searchKeys":["isDistinct","val isDistinct: Boolean = false","org.ktorm.expression.SelectExpression.isDistinct"]},{"name":"val isDistinct: Boolean = false","description":"org.ktorm.expression.WindowFunctionExpression.isDistinct","location":"ktorm-core/org.ktorm.expression/-window-function-expression/is-distinct.html","searchKeys":["isDistinct","val isDistinct: Boolean = false","org.ktorm.expression.WindowFunctionExpression.isDistinct"]},{"name":"val isUnionAll: Boolean","description":"org.ktorm.expression.UnionExpression.isUnionAll","location":"ktorm-core/org.ktorm.expression/-union-expression/is-union-all.html","searchKeys":["isUnionAll","val isUnionAll: Boolean","org.ktorm.expression.UnionExpression.isUnionAll"]},{"name":"val keySelector: (T) -> ColumnDeclaring<K>","description":"org.ktorm.entity.EntityGrouping.keySelector","location":"ktorm-core/org.ktorm.entity/-entity-grouping/key-selector.html","searchKeys":["keySelector","val keySelector: (T) -> ColumnDeclaring<K>","org.ktorm.entity.EntityGrouping.keySelector"]},{"name":"val keywords: Set<String>","description":"org.ktorm.database.Database.keywords","location":"ktorm-core/org.ktorm.database/-database/keywords.html","searchKeys":["keywords","val keywords: Set<String>","org.ktorm.database.Database.keywords"]},{"name":"val label: String","description":"org.ktorm.schema.Column.label","location":"ktorm-core/org.ktorm.schema/-column/label.html","searchKeys":["label","val label: String","org.ktorm.schema.Column.label"]},{"name":"val left: QueryExpression","description":"org.ktorm.expression.UnionExpression.left","location":"ktorm-core/org.ktorm.expression/-union-expression/left.html","searchKeys":["left","val left: QueryExpression","org.ktorm.expression.UnionExpression.left"]},{"name":"val left: QuerySourceExpression","description":"org.ktorm.expression.JoinExpression.left","location":"ktorm-core/org.ktorm.expression/-join-expression/left.html","searchKeys":["left","val left: QuerySourceExpression","org.ktorm.expression.JoinExpression.left"]},{"name":"val left: ScalarExpression<*>","description":"org.ktorm.expression.BinaryExpression.left","location":"ktorm-core/org.ktorm.expression/-binary-expression/left.html","searchKeys":["left","val left: ScalarExpression<*>","org.ktorm.expression.BinaryExpression.left"]},{"name":"val left: ScalarExpression<*>","description":"org.ktorm.expression.InListExpression.left","location":"ktorm-core/org.ktorm.expression/-in-list-expression/left.html","searchKeys":["left","val left: ScalarExpression<*>","org.ktorm.expression.InListExpression.left"]},{"name":"val level: Int","description":"org.ktorm.database.TransactionIsolation.level","location":"ktorm-core/org.ktorm.database/-transaction-isolation/level.html","searchKeys":["level","val level: Int","org.ktorm.database.TransactionIsolation.level"]},{"name":"val logger: Logger","description":"org.ktorm.database.Database.logger","location":"ktorm-core/org.ktorm.database/-database/logger.html","searchKeys":["logger","val logger: Logger","org.ktorm.database.Database.logger"]},{"name":"val lower: ScalarExpression<*>","description":"org.ktorm.expression.BetweenExpression.lower","location":"ktorm-core/org.ktorm.expression/-between-expression/lower.html","searchKeys":["lower","val lower: ScalarExpression<*>","org.ktorm.expression.BetweenExpression.lower"]},{"name":"val maxColumnNameLength: Int","description":"org.ktorm.database.Database.maxColumnNameLength","location":"ktorm-core/org.ktorm.database/-database/max-column-name-length.html","searchKeys":["maxColumnNameLength","val maxColumnNameLength: Int","org.ktorm.database.Database.maxColumnNameLength"]},{"name":"val name: String","description":"org.ktorm.database.Database.name","location":"ktorm-core/org.ktorm.database/-database/name.html","searchKeys":["name","val name: String","org.ktorm.database.Database.name"]},{"name":"val name: String","description":"org.ktorm.expression.ColumnExpression.name","location":"ktorm-core/org.ktorm.expression/-column-expression/name.html","searchKeys":["name","val name: String","org.ktorm.expression.ColumnExpression.name"]},{"name":"val name: String","description":"org.ktorm.expression.TableExpression.name","location":"ktorm-core/org.ktorm.expression/-table-expression/name.html","searchKeys":["name","val name: String","org.ktorm.expression.TableExpression.name"]},{"name":"val name: String","description":"org.ktorm.schema.Column.name","location":"ktorm-core/org.ktorm.schema/-column/name.html","searchKeys":["name","val name: String","org.ktorm.schema.Column.name"]},{"name":"val notBetween: Boolean = false","description":"org.ktorm.expression.BetweenExpression.notBetween","location":"ktorm-core/org.ktorm.expression/-between-expression/not-between.html","searchKeys":["notBetween","val notBetween: Boolean = false","org.ktorm.expression.BetweenExpression.notBetween"]},{"name":"val notExists: Boolean = false","description":"org.ktorm.expression.ExistsExpression.notExists","location":"ktorm-core/org.ktorm.expression/-exists-expression/not-exists.html","searchKeys":["notExists","val notExists: Boolean = false","org.ktorm.expression.ExistsExpression.notExists"]},{"name":"val notInList: Boolean = false","description":"org.ktorm.expression.InListExpression.notInList","location":"ktorm-core/org.ktorm.expression/-in-list-expression/not-in-list.html","searchKeys":["notInList","val notInList: Boolean = false","org.ktorm.expression.InListExpression.notInList"]},{"name":"val onProperty: KProperty1<*, *>","description":"org.ktorm.schema.ReferenceBinding.onProperty","location":"ktorm-core/org.ktorm.schema/-reference-binding/on-property.html","searchKeys":["onProperty","val onProperty: KProperty1<*, *>","org.ktorm.schema.ReferenceBinding.onProperty"]},{"name":"val operand: ColumnDeclaring<T>?","description":"org.ktorm.dsl.CaseWhen.operand","location":"ktorm-core/org.ktorm.dsl/-case-when/operand.html","searchKeys":["operand","val operand: ColumnDeclaring<T>?","org.ktorm.dsl.CaseWhen.operand"]},{"name":"val operand: ScalarExpression<*>","description":"org.ktorm.expression.UnaryExpression.operand","location":"ktorm-core/org.ktorm.expression/-unary-expression/operand.html","searchKeys":["operand","val operand: ScalarExpression<*>","org.ktorm.expression.UnaryExpression.operand"]},{"name":"val operand: ScalarExpression<*>?","description":"org.ktorm.expression.CaseWhenExpression.operand","location":"ktorm-core/org.ktorm.expression/-case-when-expression/operand.html","searchKeys":["operand","val operand: ScalarExpression<*>?","org.ktorm.expression.CaseWhenExpression.operand"]},{"name":"val orderBy: List<OrderByExpression>","description":"org.ktorm.expression.WindowSpecificationExpression.orderBy","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/order-by.html","searchKeys":["orderBy","val orderBy: List<OrderByExpression>","org.ktorm.expression.WindowSpecificationExpression.orderBy"]},{"name":"val orderType: OrderType","description":"org.ktorm.expression.OrderByExpression.orderType","location":"ktorm-core/org.ktorm.expression/-order-by-expression/order-type.html","searchKeys":["orderType","val orderType: OrderType","org.ktorm.expression.OrderByExpression.orderType"]},{"name":"val parameters: List<ArgumentExpression<*>>","description":"org.ktorm.expression.SqlFormatter.parameters","location":"ktorm-core/org.ktorm.expression/-sql-formatter/parameters.html","searchKeys":["parameters","val parameters: List<ArgumentExpression<*>>","org.ktorm.expression.SqlFormatter.parameters"]},{"name":"val parent: CaseWhen<T, R>","description":"org.ktorm.dsl.WhenContinuation.parent","location":"ktorm-core/org.ktorm.dsl/-when-continuation/parent.html","searchKeys":["parent","val parent: CaseWhen<T, R>","org.ktorm.dsl.WhenContinuation.parent"]},{"name":"val partitionBy: List<ScalarExpression<*>>","description":"org.ktorm.expression.WindowSpecificationExpression.partitionBy","location":"ktorm-core/org.ktorm.expression/-window-specification-expression/partition-by.html","searchKeys":["partitionBy","val partitionBy: List<ScalarExpression<*>>","org.ktorm.expression.WindowSpecificationExpression.partitionBy"]},{"name":"val primaryKeys: List<Column<*>>","description":"org.ktorm.schema.BaseTable.primaryKeys","location":"ktorm-core/org.ktorm.schema/-base-table/primary-keys.html","searchKeys":["primaryKeys","val primaryKeys: List<Column<*>>","org.ktorm.schema.BaseTable.primaryKeys"]},{"name":"val productName: String","description":"org.ktorm.database.Database.productName","location":"ktorm-core/org.ktorm.database/-database/product-name.html","searchKeys":["productName","val productName: String","org.ktorm.database.Database.productName"]},{"name":"val productVersion: String","description":"org.ktorm.database.Database.productVersion","location":"ktorm-core/org.ktorm.database/-database/product-version.html","searchKeys":["productVersion","val productVersion: String","org.ktorm.database.Database.productVersion"]},{"name":"val properties: List<KProperty1<*, *>>","description":"org.ktorm.schema.NestedBinding.properties","location":"ktorm-core/org.ktorm.schema/-nested-binding/properties.html","searchKeys":["properties","val properties: List<KProperty1<*, *>>","org.ktorm.schema.NestedBinding.properties"]},{"name":"val query: Query","description":"org.ktorm.dsl.QueryRowSet.query","location":"ktorm-core/org.ktorm.dsl/-query-row-set/query.html","searchKeys":["query","val query: Query","org.ktorm.dsl.QueryRowSet.query"]},{"name":"val query: Query","description":"org.ktorm.entity.EntitySequence.query","location":"ktorm-core/org.ktorm.entity/-entity-sequence/query.html","searchKeys":["query","val query: Query","org.ktorm.entity.EntitySequence.query"]},{"name":"val query: QueryExpression","description":"org.ktorm.expression.ExistsExpression.query","location":"ktorm-core/org.ktorm.expression/-exists-expression/query.html","searchKeys":["query","val query: QueryExpression","org.ktorm.expression.ExistsExpression.query"]},{"name":"val query: QueryExpression","description":"org.ktorm.expression.InsertFromQueryExpression.query","location":"ktorm-core/org.ktorm.expression/-insert-from-query-expression/query.html","searchKeys":["query","val query: QueryExpression","org.ktorm.expression.InsertFromQueryExpression.query"]},{"name":"val query: QueryExpression? = null","description":"org.ktorm.expression.InListExpression.query","location":"ktorm-core/org.ktorm.expression/-in-list-expression/query.html","searchKeys":["query","val query: QueryExpression? = null","org.ktorm.expression.InListExpression.query"]},{"name":"val referenceTable: BaseTable<*>","description":"org.ktorm.schema.ReferenceBinding.referenceTable","location":"ktorm-core/org.ktorm.schema/-reference-binding/reference-table.html","searchKeys":["referenceTable","val referenceTable: BaseTable<*>","org.ktorm.schema.ReferenceBinding.referenceTable"]},{"name":"val referenceTable: BaseTable<*>?","description":"org.ktorm.schema.Column.referenceTable","location":"ktorm-core/org.ktorm.schema/-column/reference-table.html","searchKeys":["referenceTable","val referenceTable: BaseTable<*>?","org.ktorm.schema.Column.referenceTable"]},{"name":"val referencedKotlinType: KType","description":"org.ktorm.schema.TypeReference.referencedKotlinType","location":"ktorm-core/org.ktorm.schema/-type-reference/referenced-kotlin-type.html","searchKeys":["referencedKotlinType","val referencedKotlinType: KType","org.ktorm.schema.TypeReference.referencedKotlinType"]},{"name":"val referencedType: Type","description":"org.ktorm.schema.TypeReference.referencedType","location":"ktorm-core/org.ktorm.schema/-type-reference/referenced-type.html","searchKeys":["referencedType","val referencedType: Type","org.ktorm.schema.TypeReference.referencedType"]},{"name":"val right: QueryExpression","description":"org.ktorm.expression.UnionExpression.right","location":"ktorm-core/org.ktorm.expression/-union-expression/right.html","searchKeys":["right","val right: QueryExpression","org.ktorm.expression.UnionExpression.right"]},{"name":"val right: QuerySourceExpression","description":"org.ktorm.expression.JoinExpression.right","location":"ktorm-core/org.ktorm.expression/-join-expression/right.html","searchKeys":["right","val right: QuerySourceExpression","org.ktorm.expression.JoinExpression.right"]},{"name":"val right: ScalarExpression<*>","description":"org.ktorm.expression.BinaryExpression.right","location":"ktorm-core/org.ktorm.expression/-binary-expression/right.html","searchKeys":["right","val right: ScalarExpression<*>","org.ktorm.expression.BinaryExpression.right"]},{"name":"val rowSet: QueryRowSet","description":"org.ktorm.dsl.Query.rowSet","location":"ktorm-core/org.ktorm.dsl/-query/row-set.html","searchKeys":["rowSet","val rowSet: QueryRowSet","org.ktorm.dsl.Query.rowSet"]},{"name":"val rowSet: QueryRowSet","description":"org.ktorm.entity.EntitySequence.rowSet","location":"ktorm-core/org.ktorm.entity/-entity-sequence/row-set.html","searchKeys":["rowSet","val rowSet: QueryRowSet","org.ktorm.entity.EntitySequence.rowSet"]},{"name":"val schema: String?","description":"org.ktorm.schema.BaseTable.schema","location":"ktorm-core/org.ktorm.schema/-base-table/schema.html","searchKeys":["schema","val schema: String?","org.ktorm.schema.BaseTable.schema"]},{"name":"val schema: String? = null","description":"org.ktorm.expression.TableExpression.schema","location":"ktorm-core/org.ktorm.expression/-table-expression/schema.html","searchKeys":["schema","val schema: String? = null","org.ktorm.expression.TableExpression.schema"]},{"name":"val sequence: EntitySequence<E, T>","description":"org.ktorm.entity.EntityGrouping.sequence","location":"ktorm-core/org.ktorm.entity/-entity-grouping/sequence.html","searchKeys":["sequence","val sequence: EntitySequence<E, T>","org.ktorm.entity.EntityGrouping.sequence"]},{"name":"val sourceTable: BaseTable<*>","description":"org.ktorm.dsl.QuerySource.sourceTable","location":"ktorm-core/org.ktorm.dsl/-query-source/source-table.html","searchKeys":["sourceTable","val sourceTable: BaseTable<*>","org.ktorm.dsl.QuerySource.sourceTable"]},{"name":"val sourceTable: T","description":"org.ktorm.entity.EntitySequence.sourceTable","location":"ktorm-core/org.ktorm.entity/-entity-sequence/source-table.html","searchKeys":["sourceTable","val sourceTable: T","org.ktorm.entity.EntitySequence.sourceTable"]},{"name":"val sql: String","description":"org.ktorm.dsl.Query.sql","location":"ktorm-core/org.ktorm.dsl/-query/sql.html","searchKeys":["sql","val sql: String","org.ktorm.dsl.Query.sql"]},{"name":"val sql: String","description":"org.ktorm.entity.EntitySequence.sql","location":"ktorm-core/org.ktorm.entity/-entity-sequence/sql.html","searchKeys":["sql","val sql: String","org.ktorm.entity.EntitySequence.sql"]},{"name":"val sql: String","description":"org.ktorm.expression.SqlFormatter.sql","location":"ktorm-core/org.ktorm.expression/-sql-formatter/sql.html","searchKeys":["sql","val sql: String","org.ktorm.expression.SqlFormatter.sql"]},{"name":"val storesLowerCaseIdentifiers: Boolean","description":"org.ktorm.database.Database.storesLowerCaseIdentifiers","location":"ktorm-core/org.ktorm.database/-database/stores-lower-case-identifiers.html","searchKeys":["storesLowerCaseIdentifiers","val storesLowerCaseIdentifiers: Boolean","org.ktorm.database.Database.storesLowerCaseIdentifiers"]},{"name":"val storesLowerCaseQuotedIdentifiers: Boolean","description":"org.ktorm.database.Database.storesLowerCaseQuotedIdentifiers","location":"ktorm-core/org.ktorm.database/-database/stores-lower-case-quoted-identifiers.html","searchKeys":["storesLowerCaseQuotedIdentifiers","val storesLowerCaseQuotedIdentifiers: Boolean","org.ktorm.database.Database.storesLowerCaseQuotedIdentifiers"]},{"name":"val storesMixedCaseIdentifiers: Boolean","description":"org.ktorm.database.Database.storesMixedCaseIdentifiers","location":"ktorm-core/org.ktorm.database/-database/stores-mixed-case-identifiers.html","searchKeys":["storesMixedCaseIdentifiers","val storesMixedCaseIdentifiers: Boolean","org.ktorm.database.Database.storesMixedCaseIdentifiers"]},{"name":"val storesMixedCaseQuotedIdentifiers: Boolean","description":"org.ktorm.database.Database.storesMixedCaseQuotedIdentifiers","location":"ktorm-core/org.ktorm.database/-database/stores-mixed-case-quoted-identifiers.html","searchKeys":["storesMixedCaseQuotedIdentifiers","val storesMixedCaseQuotedIdentifiers: Boolean","org.ktorm.database.Database.storesMixedCaseQuotedIdentifiers"]},{"name":"val storesUpperCaseIdentifiers: Boolean","description":"org.ktorm.database.Database.storesUpperCaseIdentifiers","location":"ktorm-core/org.ktorm.database/-database/stores-upper-case-identifiers.html","searchKeys":["storesUpperCaseIdentifiers","val storesUpperCaseIdentifiers: Boolean","org.ktorm.database.Database.storesUpperCaseIdentifiers"]},{"name":"val storesUpperCaseQuotedIdentifiers: Boolean","description":"org.ktorm.database.Database.storesUpperCaseQuotedIdentifiers","location":"ktorm-core/org.ktorm.database/-database/stores-upper-case-quoted-identifiers.html","searchKeys":["storesUpperCaseQuotedIdentifiers","val storesUpperCaseQuotedIdentifiers: Boolean","org.ktorm.database.Database.storesUpperCaseQuotedIdentifiers"]},{"name":"val supportsMixedCaseIdentifiers: Boolean","description":"org.ktorm.database.Database.supportsMixedCaseIdentifiers","location":"ktorm-core/org.ktorm.database/-database/supports-mixed-case-identifiers.html","searchKeys":["supportsMixedCaseIdentifiers","val supportsMixedCaseIdentifiers: Boolean","org.ktorm.database.Database.supportsMixedCaseIdentifiers"]},{"name":"val supportsMixedCaseQuotedIdentifiers: Boolean","description":"org.ktorm.database.Database.supportsMixedCaseQuotedIdentifiers","location":"ktorm-core/org.ktorm.database/-database/supports-mixed-case-quoted-identifiers.html","searchKeys":["supportsMixedCaseQuotedIdentifiers","val supportsMixedCaseQuotedIdentifiers: Boolean","org.ktorm.database.Database.supportsMixedCaseQuotedIdentifiers"]},{"name":"val table: BaseTable<*>","description":"org.ktorm.schema.Column.table","location":"ktorm-core/org.ktorm.schema/-column/table.html","searchKeys":["table","val table: BaseTable<*>","org.ktorm.schema.Column.table"]},{"name":"val table: TableExpression","description":"org.ktorm.expression.DeleteExpression.table","location":"ktorm-core/org.ktorm.expression/-delete-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.expression.DeleteExpression.table"]},{"name":"val table: TableExpression","description":"org.ktorm.expression.InsertExpression.table","location":"ktorm-core/org.ktorm.expression/-insert-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.expression.InsertExpression.table"]},{"name":"val table: TableExpression","description":"org.ktorm.expression.InsertFromQueryExpression.table","location":"ktorm-core/org.ktorm.expression/-insert-from-query-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.expression.InsertFromQueryExpression.table"]},{"name":"val table: TableExpression","description":"org.ktorm.expression.UpdateExpression.table","location":"ktorm-core/org.ktorm.expression/-update-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.expression.UpdateExpression.table"]},{"name":"val table: TableExpression?","description":"org.ktorm.expression.ColumnExpression.table","location":"ktorm-core/org.ktorm.expression/-column-expression/table.html","searchKeys":["table","val table: TableExpression?","org.ktorm.expression.ColumnExpression.table"]},{"name":"val tableAlias: String? = null","description":"org.ktorm.expression.TableExpression.tableAlias","location":"ktorm-core/org.ktorm.expression/-table-expression/table-alias.html","searchKeys":["tableAlias","val tableAlias: String? = null","org.ktorm.expression.TableExpression.tableAlias"]},{"name":"val tableName: String","description":"org.ktorm.schema.BaseTable.tableName","location":"ktorm-core/org.ktorm.schema/-base-table/table-name.html","searchKeys":["tableName","val tableName: String","org.ktorm.schema.BaseTable.tableName"]},{"name":"val threshold: LogLevel","description":"org.ktorm.logging.ConsoleLogger.threshold","location":"ktorm-core/org.ktorm.logging/-console-logger/threshold.html","searchKeys":["threshold","val threshold: LogLevel","org.ktorm.logging.ConsoleLogger.threshold"]},{"name":"val totalRecords: Int","description":"org.ktorm.dsl.Query.totalRecords","location":"ktorm-core/org.ktorm.dsl/-query/total-records.html","searchKeys":["totalRecords","val totalRecords: Int","org.ktorm.dsl.Query.totalRecords"]},{"name":"val totalRecords: Int","description":"org.ktorm.entity.EntitySequence.totalRecords","location":"ktorm-core/org.ktorm.entity/-entity-sequence/total-records.html","searchKeys":["totalRecords","val totalRecords: Int","org.ktorm.entity.EntitySequence.totalRecords"]},{"name":"val totalRecordsInAllPages: Int","description":"org.ktorm.dsl.Query.totalRecordsInAllPages","location":"ktorm-core/org.ktorm.dsl/-query/total-records-in-all-pages.html","searchKeys":["totalRecordsInAllPages","val totalRecordsInAllPages: Int","org.ktorm.dsl.Query.totalRecordsInAllPages"]},{"name":"val totalRecordsInAllPages: Int","description":"org.ktorm.entity.EntitySequence.totalRecordsInAllPages","location":"ktorm-core/org.ktorm.entity/-entity-sequence/total-records-in-all-pages.html","searchKeys":["totalRecordsInAllPages","val totalRecordsInAllPages: Int","org.ktorm.entity.EntitySequence.totalRecordsInAllPages"]},{"name":"val transactionManager: TransactionManager","description":"org.ktorm.database.Database.transactionManager","location":"ktorm-core/org.ktorm.database/-database/transaction-manager.html","searchKeys":["transactionManager","val transactionManager: TransactionManager","org.ktorm.database.Database.transactionManager"]},{"name":"val type: AggregateType","description":"org.ktorm.expression.AggregateExpression.type","location":"ktorm-core/org.ktorm.expression/-aggregate-expression/type.html","searchKeys":["type","val type: AggregateType","org.ktorm.expression.AggregateExpression.type"]},{"name":"val type: BinaryExpressionType","description":"org.ktorm.expression.BinaryExpression.type","location":"ktorm-core/org.ktorm.expression/-binary-expression/type.html","searchKeys":["type","val type: BinaryExpressionType","org.ktorm.expression.BinaryExpression.type"]},{"name":"val type: JoinType","description":"org.ktorm.expression.JoinExpression.type","location":"ktorm-core/org.ktorm.expression/-join-expression/type.html","searchKeys":["type","val type: JoinType","org.ktorm.expression.JoinExpression.type"]},{"name":"val type: UnaryExpressionType","description":"org.ktorm.expression.UnaryExpression.type","location":"ktorm-core/org.ktorm.expression/-unary-expression/type.html","searchKeys":["type","val type: UnaryExpressionType","org.ktorm.expression.UnaryExpression.type"]},{"name":"val type: WindowFrameBoundType","description":"org.ktorm.expression.WindowFrameBoundExpression.type","location":"ktorm-core/org.ktorm.expression/-window-frame-bound-expression/type.html","searchKeys":["type","val type: WindowFrameBoundType","org.ktorm.expression.WindowFrameBoundExpression.type"]},{"name":"val type: WindowFunctionType","description":"org.ktorm.expression.WindowFunctionExpression.type","location":"ktorm-core/org.ktorm.expression/-window-function-expression/type.html","searchKeys":["type","val type: WindowFunctionType","org.ktorm.expression.WindowFunctionExpression.type"]},{"name":"val typeCode: Int","description":"org.ktorm.schema.SqlType.typeCode","location":"ktorm-core/org.ktorm.schema/-sql-type/type-code.html","searchKeys":["typeCode","val typeCode: Int","org.ktorm.schema.SqlType.typeCode"]},{"name":"val typeName: String","description":"org.ktorm.schema.SqlType.typeName","location":"ktorm-core/org.ktorm.schema/-sql-type/type-name.html","searchKeys":["typeName","val typeName: String","org.ktorm.schema.SqlType.typeName"]},{"name":"val upper: ScalarExpression<*>","description":"org.ktorm.expression.BetweenExpression.upper","location":"ktorm-core/org.ktorm.expression/-between-expression/upper.html","searchKeys":["upper","val upper: ScalarExpression<*>","org.ktorm.expression.BetweenExpression.upper"]},{"name":"val url: String","description":"org.ktorm.database.Database.url","location":"ktorm-core/org.ktorm.database/-database/url.html","searchKeys":["url","val url: String","org.ktorm.database.Database.url"]},{"name":"val value: T?","description":"org.ktorm.expression.ArgumentExpression.value","location":"ktorm-core/org.ktorm.expression/-argument-expression/value.html","searchKeys":["value","val value: T?","org.ktorm.expression.ArgumentExpression.value"]},{"name":"val values: List<ScalarExpression<*>>? = null","description":"org.ktorm.expression.InListExpression.values","location":"ktorm-core/org.ktorm.expression/-in-list-expression/values.html","searchKeys":["values","val values: List<ScalarExpression<*>>? = null","org.ktorm.expression.InListExpression.values"]},{"name":"val whenClauses: List<Pair<ColumnDeclaring<T>, ColumnDeclaring<R>>>","description":"org.ktorm.dsl.CaseWhen.whenClauses","location":"ktorm-core/org.ktorm.dsl/-case-when/when-clauses.html","searchKeys":["whenClauses","val whenClauses: List<Pair<ColumnDeclaring<T>, ColumnDeclaring<R>>>","org.ktorm.dsl.CaseWhen.whenClauses"]},{"name":"val whenClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>","description":"org.ktorm.expression.CaseWhenExpression.whenClauses","location":"ktorm-core/org.ktorm.expression/-case-when-expression/when-clauses.html","searchKeys":["whenClauses","val whenClauses: List<Pair<ScalarExpression<*>, ScalarExpression<T>>>","org.ktorm.expression.CaseWhenExpression.whenClauses"]},{"name":"val where: ScalarExpression<Boolean>?","description":"org.ktorm.expression.DeleteExpression.where","location":"ktorm-core/org.ktorm.expression/-delete-expression/where.html","searchKeys":["where","val where: ScalarExpression<Boolean>?","org.ktorm.expression.DeleteExpression.where"]},{"name":"val where: ScalarExpression<Boolean>? = null","description":"org.ktorm.expression.SelectExpression.where","location":"ktorm-core/org.ktorm.expression/-select-expression/where.html","searchKeys":["where","val where: ScalarExpression<Boolean>? = null","org.ktorm.expression.SelectExpression.where"]},{"name":"val where: ScalarExpression<Boolean>? = null","description":"org.ktorm.expression.UpdateExpression.where","location":"ktorm-core/org.ktorm.expression/-update-expression/where.html","searchKeys":["where","val where: ScalarExpression<Boolean>? = null","org.ktorm.expression.UpdateExpression.where"]},{"name":"val window: WindowSpecificationExpression","description":"org.ktorm.expression.WindowFunctionExpression.window","location":"ktorm-core/org.ktorm.expression/-window-function-expression/window.html","searchKeys":["window","val window: WindowSpecificationExpression","org.ktorm.expression.WindowFunctionExpression.window"]},{"name":"class KtormKspMavenPluginExtension : KotlinMavenPluginExtension","description":"org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension","location":"ktorm-ksp-compiler-maven-plugin/org.ktorm.ksp.compiler.maven/-ktorm-ksp-maven-plugin-extension/index.html","searchKeys":["KtormKspMavenPluginExtension","class KtormKspMavenPluginExtension : KotlinMavenPluginExtension","org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension"]},{"name":"constructor()","description":"org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.KtormKspMavenPluginExtension","location":"ktorm-ksp-compiler-maven-plugin/org.ktorm.ksp.compiler.maven/-ktorm-ksp-maven-plugin-extension/-ktorm-ksp-maven-plugin-extension.html","searchKeys":["KtormKspMavenPluginExtension","constructor()","org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.KtormKspMavenPluginExtension"]},{"name":"open override fun getCompilerPluginId(): String","description":"org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.getCompilerPluginId","location":"ktorm-ksp-compiler-maven-plugin/org.ktorm.ksp.compiler.maven/-ktorm-ksp-maven-plugin-extension/get-compiler-plugin-id.html","searchKeys":["getCompilerPluginId","open override fun getCompilerPluginId(): String","org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.getCompilerPluginId"]},{"name":"open override fun getPluginOptions(project: MavenProject, execution: MojoExecution): List<PluginOption>","description":"org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.getPluginOptions","location":"ktorm-ksp-compiler-maven-plugin/org.ktorm.ksp.compiler.maven/-ktorm-ksp-maven-plugin-extension/get-plugin-options.html","searchKeys":["getPluginOptions","open override fun getPluginOptions(project: MavenProject, execution: MojoExecution): List<PluginOption>","org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.getPluginOptions"]},{"name":"open override fun isApplicable(project: MavenProject, execution: MojoExecution): Boolean","description":"org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.isApplicable","location":"ktorm-ksp-compiler-maven-plugin/org.ktorm.ksp.compiler.maven/-ktorm-ksp-maven-plugin-extension/is-applicable.html","searchKeys":["isApplicable","open override fun isApplicable(project: MavenProject, execution: MojoExecution): Boolean","org.ktorm.ksp.compiler.maven.KtormKspMavenPluginExtension.isApplicable"]},{"name":"constructor()","description":"org.ktorm.support.oracle.OracleDialect.OracleDialect","location":"ktorm-support-oracle/org.ktorm.support.oracle/-oracle-dialect/-oracle-dialect.html","searchKeys":["OracleDialect","constructor()","org.ktorm.support.oracle.OracleDialect.OracleDialect"]},{"name":"constructor(database: Database, beautifySql: Boolean, indentSize: Int)","description":"org.ktorm.support.oracle.OracleFormatter.OracleFormatter","location":"ktorm-support-oracle/org.ktorm.support.oracle/-oracle-formatter/-oracle-formatter.html","searchKeys":["OracleFormatter","constructor(database: Database, beautifySql: Boolean, indentSize: Int)","org.ktorm.support.oracle.OracleFormatter.OracleFormatter"]},{"name":"open class OracleDialect : SqlDialect","description":"org.ktorm.support.oracle.OracleDialect","location":"ktorm-support-oracle/org.ktorm.support.oracle/-oracle-dialect/index.html","searchKeys":["OracleDialect","open class OracleDialect : SqlDialect","org.ktorm.support.oracle.OracleDialect"]},{"name":"open class OracleFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter","description":"org.ktorm.support.oracle.OracleFormatter","location":"ktorm-support-oracle/org.ktorm.support.oracle/-oracle-formatter/index.html","searchKeys":["OracleFormatter","open class OracleFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter","org.ktorm.support.oracle.OracleFormatter"]},{"name":"open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","description":"org.ktorm.support.oracle.OracleDialect.createSqlFormatter","location":"ktorm-support-oracle/org.ktorm.support.oracle/-oracle-dialect/create-sql-formatter.html","searchKeys":["createSqlFormatter","open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","org.ktorm.support.oracle.OracleDialect.createSqlFormatter"]},{"name":"open override fun visitQuery(expr: QueryExpression): QueryExpression","description":"org.ktorm.support.oracle.OracleFormatter.visitQuery","location":"ktorm-support-oracle/org.ktorm.support.oracle/-oracle-formatter/visit-query.html","searchKeys":["visitQuery","open override fun visitQuery(expr: QueryExpression): QueryExpression","org.ktorm.support.oracle.OracleFormatter.visitQuery"]},{"name":"open override fun visitUnion(expr: UnionExpression): UnionExpression","description":"org.ktorm.support.oracle.OracleFormatter.visitUnion","location":"ktorm-support-oracle/org.ktorm.support.oracle/-oracle-formatter/visit-union.html","searchKeys":["visitUnion","open override fun visitUnion(expr: UnionExpression): UnionExpression","org.ktorm.support.oracle.OracleFormatter.visitUnion"]},{"name":"annotation class Column(val name: String = \"\", val sqlType: KClass<out SqlType<*>> = Nothing::class, val propertyName: String = \"\")","description":"org.ktorm.ksp.annotation.Column","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-column/index.html","searchKeys":["Column","annotation class Column(val name: String = \"\", val sqlType: KClass<out SqlType<*>> = Nothing::class, val propertyName: String = \"\")","org.ktorm.ksp.annotation.Column"]},{"name":"annotation class Ignore","description":"org.ktorm.ksp.annotation.Ignore","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-ignore/index.html","searchKeys":["Ignore","annotation class Ignore","org.ktorm.ksp.annotation.Ignore"]},{"name":"annotation class PrimaryKey","description":"org.ktorm.ksp.annotation.PrimaryKey","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-primary-key/index.html","searchKeys":["PrimaryKey","annotation class PrimaryKey","org.ktorm.ksp.annotation.PrimaryKey"]},{"name":"annotation class References(val name: String = \"\", val propertyName: String = \"\", val refTablePropertyName: String = \"\")","description":"org.ktorm.ksp.annotation.References","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-references/index.html","searchKeys":["References","annotation class References(val name: String = \"\", val propertyName: String = \"\", val refTablePropertyName: String = \"\")","org.ktorm.ksp.annotation.References"]},{"name":"annotation class Table(val name: String = \"\", val alias: String = \"\", val catalog: String = \"\", val schema: String = \"\", val className: String = \"\", val entitySequenceName: String = \"\", val ignoreProperties: Array<String> = [])","description":"org.ktorm.ksp.annotation.Table","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/index.html","searchKeys":["Table","annotation class Table(val name: String = \"\", val alias: String = \"\", val catalog: String = \"\", val schema: String = \"\", val className: String = \"\", val entitySequenceName: String = \"\", val ignoreProperties: Array<String> = [])","org.ktorm.ksp.annotation.Table"]},{"name":"inline fun <T : Any> of(): T?","description":"org.ktorm.ksp.annotation.Undefined.of","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-undefined/of.html","searchKeys":["of","inline fun <T : Any> of(): T?","org.ktorm.ksp.annotation.Undefined.of"]},{"name":"object Undefined","description":"org.ktorm.ksp.annotation.Undefined","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-undefined/index.html","searchKeys":["Undefined","object Undefined","org.ktorm.ksp.annotation.Undefined"]},{"name":"val alias: String","description":"org.ktorm.ksp.annotation.Table.alias","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/alias.html","searchKeys":["alias","val alias: String","org.ktorm.ksp.annotation.Table.alias"]},{"name":"val catalog: String","description":"org.ktorm.ksp.annotation.Table.catalog","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/catalog.html","searchKeys":["catalog","val catalog: String","org.ktorm.ksp.annotation.Table.catalog"]},{"name":"val className: String","description":"org.ktorm.ksp.annotation.Table.className","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/class-name.html","searchKeys":["className","val className: String","org.ktorm.ksp.annotation.Table.className"]},{"name":"val entitySequenceName: String","description":"org.ktorm.ksp.annotation.Table.entitySequenceName","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/entity-sequence-name.html","searchKeys":["entitySequenceName","val entitySequenceName: String","org.ktorm.ksp.annotation.Table.entitySequenceName"]},{"name":"val ignoreProperties: Array<String>","description":"org.ktorm.ksp.annotation.Table.ignoreProperties","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/ignore-properties.html","searchKeys":["ignoreProperties","val ignoreProperties: Array<String>","org.ktorm.ksp.annotation.Table.ignoreProperties"]},{"name":"val name: String","description":"org.ktorm.ksp.annotation.Column.name","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-column/name.html","searchKeys":["name","val name: String","org.ktorm.ksp.annotation.Column.name"]},{"name":"val name: String","description":"org.ktorm.ksp.annotation.References.name","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-references/name.html","searchKeys":["name","val name: String","org.ktorm.ksp.annotation.References.name"]},{"name":"val name: String","description":"org.ktorm.ksp.annotation.Table.name","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/name.html","searchKeys":["name","val name: String","org.ktorm.ksp.annotation.Table.name"]},{"name":"val propertyName: String","description":"org.ktorm.ksp.annotation.Column.propertyName","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-column/property-name.html","searchKeys":["propertyName","val propertyName: String","org.ktorm.ksp.annotation.Column.propertyName"]},{"name":"val propertyName: String","description":"org.ktorm.ksp.annotation.References.propertyName","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-references/property-name.html","searchKeys":["propertyName","val propertyName: String","org.ktorm.ksp.annotation.References.propertyName"]},{"name":"val refTablePropertyName: String","description":"org.ktorm.ksp.annotation.References.refTablePropertyName","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-references/ref-table-property-name.html","searchKeys":["refTablePropertyName","val refTablePropertyName: String","org.ktorm.ksp.annotation.References.refTablePropertyName"]},{"name":"val schema: String","description":"org.ktorm.ksp.annotation.Table.schema","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-table/schema.html","searchKeys":["schema","val schema: String","org.ktorm.ksp.annotation.Table.schema"]},{"name":"val sqlType: KClass<out SqlType<*>>","description":"org.ktorm.ksp.annotation.Column.sqlType","location":"ktorm-ksp-annotations/org.ktorm.ksp.annotation/-column/sql-type.html","searchKeys":["sqlType","val sqlType: KClass<out SqlType<*>>","org.ktorm.ksp.annotation.Column.sqlType"]},{"name":"class KtormProcessorProvider : SymbolProcessorProvider","description":"org.ktorm.ksp.compiler.KtormProcessorProvider","location":"ktorm-ksp-compiler/org.ktorm.ksp.compiler/-ktorm-processor-provider/index.html","searchKeys":["KtormProcessorProvider","class KtormProcessorProvider : SymbolProcessorProvider","org.ktorm.ksp.compiler.KtormProcessorProvider"]},{"name":"constructor()","description":"org.ktorm.ksp.compiler.KtormProcessorProvider.KtormProcessorProvider","location":"ktorm-ksp-compiler/org.ktorm.ksp.compiler/-ktorm-processor-provider/-ktorm-processor-provider.html","searchKeys":["KtormProcessorProvider","constructor()","org.ktorm.ksp.compiler.KtormProcessorProvider.KtormProcessorProvider"]},{"name":"open override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor","description":"org.ktorm.ksp.compiler.KtormProcessorProvider.create","location":"ktorm-ksp-compiler/org.ktorm.ksp.compiler/-ktorm-processor-provider/create.html","searchKeys":["create","open override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor","org.ktorm.ksp.compiler.KtormProcessorProvider.create"]},{"name":"CONCATENATE","description":"org.ktorm.support.postgresql.HStoreExpressionType.CONCATENATE","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-c-o-n-c-a-t-e-n-a-t-e/index.html","searchKeys":["CONCATENATE","CONCATENATE","org.ktorm.support.postgresql.HStoreExpressionType.CONCATENATE"]},{"name":"CONTAINED_IN","description":"org.ktorm.support.postgresql.CubeExpressionType.CONTAINED_IN","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/-c-o-n-t-a-i-n-e-d_-i-n/index.html","searchKeys":["CONTAINED_IN","CONTAINED_IN","org.ktorm.support.postgresql.CubeExpressionType.CONTAINED_IN"]},{"name":"CONTAINED_IN","description":"org.ktorm.support.postgresql.HStoreExpressionType.CONTAINED_IN","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-c-o-n-t-a-i-n-e-d_-i-n/index.html","searchKeys":["CONTAINED_IN","CONTAINED_IN","org.ktorm.support.postgresql.HStoreExpressionType.CONTAINED_IN"]},{"name":"CONTAINS","description":"org.ktorm.support.postgresql.CubeExpressionType.CONTAINS","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/-c-o-n-t-a-i-n-s/index.html","searchKeys":["CONTAINS","CONTAINS","org.ktorm.support.postgresql.CubeExpressionType.CONTAINS"]},{"name":"CONTAINS","description":"org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-c-o-n-t-a-i-n-s/index.html","searchKeys":["CONTAINS","CONTAINS","org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS"]},{"name":"CONTAINS_ALL","description":"org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS_ALL","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-c-o-n-t-a-i-n-s_-a-l-l/index.html","searchKeys":["CONTAINS_ALL","CONTAINS_ALL","org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS_ALL"]},{"name":"CONTAINS_ANY","description":"org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS_ANY","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-c-o-n-t-a-i-n-s_-a-n-y/index.html","searchKeys":["CONTAINS_ANY","CONTAINS_ANY","org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS_ANY"]},{"name":"CONTAINS_KEY","description":"org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS_KEY","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-c-o-n-t-a-i-n-s_-k-e-y/index.html","searchKeys":["CONTAINS_KEY","CONTAINS_KEY","org.ktorm.support.postgresql.HStoreExpressionType.CONTAINS_KEY"]},{"name":"DELETE","description":"org.ktorm.support.postgresql.HStoreExpressionType.DELETE","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-d-e-l-e-t-e/index.html","searchKeys":["DELETE","DELETE","org.ktorm.support.postgresql.HStoreExpressionType.DELETE"]},{"name":"FOR_KEY_SHARE","description":"org.ktorm.support.postgresql.LockingMode.FOR_KEY_SHARE","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/-f-o-r_-k-e-y_-s-h-a-r-e/index.html","searchKeys":["FOR_KEY_SHARE","FOR_KEY_SHARE","org.ktorm.support.postgresql.LockingMode.FOR_KEY_SHARE"]},{"name":"FOR_NO_KEY_UPDATE","description":"org.ktorm.support.postgresql.LockingMode.FOR_NO_KEY_UPDATE","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/-f-o-r_-n-o_-k-e-y_-u-p-d-a-t-e/index.html","searchKeys":["FOR_NO_KEY_UPDATE","FOR_NO_KEY_UPDATE","org.ktorm.support.postgresql.LockingMode.FOR_NO_KEY_UPDATE"]},{"name":"FOR_SHARE","description":"org.ktorm.support.postgresql.LockingMode.FOR_SHARE","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/-f-o-r_-s-h-a-r-e/index.html","searchKeys":["FOR_SHARE","FOR_SHARE","org.ktorm.support.postgresql.LockingMode.FOR_SHARE"]},{"name":"FOR_UPDATE","description":"org.ktorm.support.postgresql.LockingMode.FOR_UPDATE","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/-f-o-r_-u-p-d-a-t-e/index.html","searchKeys":["FOR_UPDATE","FOR_UPDATE","org.ktorm.support.postgresql.LockingMode.FOR_UPDATE"]},{"name":"GET","description":"org.ktorm.support.postgresql.HStoreExpressionType.GET","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/-g-e-t/index.html","searchKeys":["GET","GET","org.ktorm.support.postgresql.HStoreExpressionType.GET"]},{"name":"NOWAIT","description":"org.ktorm.support.postgresql.LockingWait.NOWAIT","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-wait/-n-o-w-a-i-t/index.html","searchKeys":["NOWAIT","NOWAIT","org.ktorm.support.postgresql.LockingWait.NOWAIT"]},{"name":"OVERLAP","description":"org.ktorm.support.postgresql.CubeExpressionType.OVERLAP","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/-o-v-e-r-l-a-p/index.html","searchKeys":["OVERLAP","OVERLAP","org.ktorm.support.postgresql.CubeExpressionType.OVERLAP"]},{"name":"SKIP_LOCKED","description":"org.ktorm.support.postgresql.LockingWait.SKIP_LOCKED","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-wait/-s-k-i-p_-l-o-c-k-e-d/index.html","searchKeys":["SKIP_LOCKED","SKIP_LOCKED","org.ktorm.support.postgresql.LockingWait.SKIP_LOCKED"]},{"name":"WAIT","description":"org.ktorm.support.postgresql.LockingWait.WAIT","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-wait/-w-a-i-t/index.html","searchKeys":["WAIT","WAIT","org.ktorm.support.postgresql.LockingWait.WAIT"]},{"name":"class BulkInsertOrUpdateStatementBuilder<T : BaseTable<*>>(table: T) : BulkInsertStatementBuilder<T> ","description":"org.ktorm.support.postgresql.BulkInsertOrUpdateStatementBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-or-update-statement-builder/index.html","searchKeys":["BulkInsertOrUpdateStatementBuilder","class BulkInsertOrUpdateStatementBuilder<T : BaseTable<*>>(table: T) : BulkInsertStatementBuilder<T> ","org.ktorm.support.postgresql.BulkInsertOrUpdateStatementBuilder"]},{"name":"class InsertOrUpdateOnConflictClauseBuilder : PostgreSqlAssignmentsBuilder","description":"org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-on-conflict-clause-builder/index.html","searchKeys":["InsertOrUpdateOnConflictClauseBuilder","class InsertOrUpdateOnConflictClauseBuilder : PostgreSqlAssignmentsBuilder","org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder"]},{"name":"class InsertOrUpdateStatementBuilder : PostgreSqlAssignmentsBuilder","description":"org.ktorm.support.postgresql.InsertOrUpdateStatementBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-statement-builder/index.html","searchKeys":["InsertOrUpdateStatementBuilder","class InsertOrUpdateStatementBuilder : PostgreSqlAssignmentsBuilder","org.ktorm.support.postgresql.InsertOrUpdateStatementBuilder"]},{"name":"constructor()","description":"org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder.InsertOrUpdateOnConflictClauseBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-on-conflict-clause-builder/-insert-or-update-on-conflict-clause-builder.html","searchKeys":["InsertOrUpdateOnConflictClauseBuilder","constructor()","org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder.InsertOrUpdateOnConflictClauseBuilder"]},{"name":"constructor()","description":"org.ktorm.support.postgresql.InsertOrUpdateStatementBuilder.InsertOrUpdateStatementBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-statement-builder/-insert-or-update-statement-builder.html","searchKeys":["InsertOrUpdateStatementBuilder","constructor()","org.ktorm.support.postgresql.InsertOrUpdateStatementBuilder.InsertOrUpdateStatementBuilder"]},{"name":"constructor()","description":"org.ktorm.support.postgresql.PostgreSqlAssignmentsBuilder.PostgreSqlAssignmentsBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-assignments-builder/-postgre-sql-assignments-builder.html","searchKeys":["PostgreSqlAssignmentsBuilder","constructor()","org.ktorm.support.postgresql.PostgreSqlAssignmentsBuilder.PostgreSqlAssignmentsBuilder"]},{"name":"constructor()","description":"org.ktorm.support.postgresql.PostgreSqlDialect.PostgreSqlDialect","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-dialect/-postgre-sql-dialect.html","searchKeys":["PostgreSqlDialect","constructor()","org.ktorm.support.postgresql.PostgreSqlDialect.PostgreSqlDialect"]},{"name":"constructor(database: Database, beautifySql: Boolean, indentSize: Int)","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.PostgreSqlFormatter","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/-postgre-sql-formatter.html","searchKeys":["PostgreSqlFormatter","constructor(database: Database, beautifySql: Boolean, indentSize: Int)","org.ktorm.support.postgresql.PostgreSqlFormatter.PostgreSqlFormatter"]},{"name":"constructor(left: ScalarExpression<*>, right: ScalarExpression<*>, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.postgresql.ILikeExpression.ILikeExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-i-like-expression/-i-like-expression.html","searchKeys":["ILikeExpression","constructor(left: ScalarExpression<*>, right: ScalarExpression<*>, sqlType: SqlType<Boolean> = BooleanSqlType, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.postgresql.ILikeExpression.ILikeExpression"]},{"name":"constructor(mode: LockingMode, tables: List<TableExpression>, wait: LockingWait)","description":"org.ktorm.support.postgresql.LockingClause.LockingClause","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-clause/-locking-clause.html","searchKeys":["LockingClause","constructor(mode: LockingMode, tables: List<TableExpression>, wait: LockingWait)","org.ktorm.support.postgresql.LockingClause.LockingClause"]},{"name":"constructor(sqlType: SqlType<T>, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.postgresql.DefaultValueExpression.DefaultValueExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-default-value-expression/-default-value-expression.html","searchKeys":["DefaultValueExpression","constructor(sqlType: SqlType<T>, isLeafNode: Boolean = true, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.postgresql.DefaultValueExpression.DefaultValueExpression"]},{"name":"constructor(table: T)","description":"org.ktorm.support.postgresql.BulkInsertOrUpdateStatementBuilder.BulkInsertOrUpdateStatementBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-or-update-statement-builder/-bulk-insert-or-update-statement-builder.html","searchKeys":["BulkInsertOrUpdateStatementBuilder","constructor(table: T)","org.ktorm.support.postgresql.BulkInsertOrUpdateStatementBuilder.BulkInsertOrUpdateStatementBuilder"]},{"name":"constructor(table: T)","description":"org.ktorm.support.postgresql.BulkInsertStatementBuilder.BulkInsertStatementBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-statement-builder/-bulk-insert-statement-builder.html","searchKeys":["BulkInsertStatementBuilder","constructor(table: T)","org.ktorm.support.postgresql.BulkInsertStatementBuilder.BulkInsertStatementBuilder"]},{"name":"constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.InsertOrUpdateExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/-insert-or-update-expression.html","searchKeys":["InsertOrUpdateExpression","constructor(table: TableExpression, assignments: List<ColumnAssignmentExpression<*>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.postgresql.InsertOrUpdateExpression.InsertOrUpdateExpression"]},{"name":"constructor(table: TableExpression, assignments: List<List<ColumnAssignmentExpression<*>>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.postgresql.BulkInsertExpression.BulkInsertExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/-bulk-insert-expression.html","searchKeys":["BulkInsertExpression","constructor(table: TableExpression, assignments: List<List<ColumnAssignmentExpression<*>>>, conflictColumns: List<ColumnExpression<*>> = emptyList(), updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), returningColumns: List<ColumnExpression<*>> = emptyList(), isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.postgresql.BulkInsertExpression.BulkInsertExpression"]},{"name":"constructor(type: CubeExpressionType, left: ScalarExpression<*>, right: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.postgresql.CubeExpression.CubeExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/-cube-expression.html","searchKeys":["CubeExpression","constructor(type: CubeExpressionType, left: ScalarExpression<*>, right: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.postgresql.CubeExpression.CubeExpression"]},{"name":"constructor(type: HStoreExpressionType, left: ScalarExpression<HStore>, right: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","description":"org.ktorm.support.postgresql.HStoreExpression.HStoreExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/-h-store-expression.html","searchKeys":["HStoreExpression","constructor(type: HStoreExpressionType, left: ScalarExpression<HStore>, right: ScalarExpression<*>, sqlType: SqlType<T>, isLeafNode: Boolean = false, extraProperties: Map<String, Any> = emptyMap())","org.ktorm.support.postgresql.HStoreExpression.HStoreExpression"]},{"name":"constructor(x: DoubleArray, y: DoubleArray)","description":"org.ktorm.support.postgresql.Cube.Cube","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube/-cube.html","searchKeys":["Cube","constructor(x: DoubleArray, y: DoubleArray)","org.ktorm.support.postgresql.Cube.Cube"]},{"name":"data class BulkInsertExpression(val table: TableExpression, val assignments: List<List<ColumnAssignmentExpression<*>>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.support.postgresql.BulkInsertExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/index.html","searchKeys":["BulkInsertExpression","data class BulkInsertExpression(val table: TableExpression, val assignments: List<List<ColumnAssignmentExpression<*>>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.support.postgresql.BulkInsertExpression"]},{"name":"data class Cube(val x: DoubleArray, val y: DoubleArray)","description":"org.ktorm.support.postgresql.Cube","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube/index.html","searchKeys":["Cube","data class Cube(val x: DoubleArray, val y: DoubleArray)","org.ktorm.support.postgresql.Cube"]},{"name":"data class CubeExpression<T : Any>(val type: CubeExpressionType, val left: ScalarExpression<*>, val right: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.support.postgresql.CubeExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/index.html","searchKeys":["CubeExpression","data class CubeExpression<T : Any>(val type: CubeExpressionType, val left: ScalarExpression<*>, val right: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.support.postgresql.CubeExpression"]},{"name":"data class DefaultValueExpression<T : Any>(val sqlType: SqlType<T>, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.support.postgresql.DefaultValueExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-default-value-expression/index.html","searchKeys":["DefaultValueExpression","data class DefaultValueExpression<T : Any>(val sqlType: SqlType<T>, val isLeafNode: Boolean = true, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.support.postgresql.DefaultValueExpression"]},{"name":"data class HStoreExpression<T : Any>(val type: HStoreExpressionType, val left: ScalarExpression<HStore>, val right: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","description":"org.ktorm.support.postgresql.HStoreExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/index.html","searchKeys":["HStoreExpression","data class HStoreExpression<T : Any>(val type: HStoreExpressionType, val left: ScalarExpression<HStore>, val right: ScalarExpression<*>, val sqlType: SqlType<T>, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<T> ","org.ktorm.support.postgresql.HStoreExpression"]},{"name":"data class ILikeExpression(val left: ScalarExpression<*>, val right: ScalarExpression<*>, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","description":"org.ktorm.support.postgresql.ILikeExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-i-like-expression/index.html","searchKeys":["ILikeExpression","data class ILikeExpression(val left: ScalarExpression<*>, val right: ScalarExpression<*>, val sqlType: SqlType<Boolean> = BooleanSqlType, val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : ScalarExpression<Boolean> ","org.ktorm.support.postgresql.ILikeExpression"]},{"name":"data class InsertOrUpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/index.html","searchKeys":["InsertOrUpdateExpression","data class InsertOrUpdateExpression(val table: TableExpression, val assignments: List<ColumnAssignmentExpression<*>>, val conflictColumns: List<ColumnExpression<*>> = emptyList(), val updateAssignments: List<ColumnAssignmentExpression<*>> = emptyList(), val returningColumns: List<ColumnExpression<*>> = emptyList(), val isLeafNode: Boolean = false, val extraProperties: Map<String, Any> = emptyMap()) : SqlExpression","org.ktorm.support.postgresql.InsertOrUpdateExpression"]},{"name":"data class LockingClause(val mode: LockingMode, val tables: List<TableExpression>, val wait: LockingWait)","description":"org.ktorm.support.postgresql.LockingClause","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-clause/index.html","searchKeys":["LockingClause","data class LockingClause(val mode: LockingMode, val tables: List<TableExpression>, val wait: LockingWait)","org.ktorm.support.postgresql.LockingClause"]},{"name":"enum CubeExpressionType : Enum<CubeExpressionType> ","description":"org.ktorm.support.postgresql.CubeExpressionType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/index.html","searchKeys":["CubeExpressionType","enum CubeExpressionType : Enum<CubeExpressionType> ","org.ktorm.support.postgresql.CubeExpressionType"]},{"name":"enum HStoreExpressionType : Enum<HStoreExpressionType> ","description":"org.ktorm.support.postgresql.HStoreExpressionType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/index.html","searchKeys":["HStoreExpressionType","enum HStoreExpressionType : Enum<HStoreExpressionType> ","org.ktorm.support.postgresql.HStoreExpressionType"]},{"name":"enum LockingMode : Enum<LockingMode> ","description":"org.ktorm.support.postgresql.LockingMode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/index.html","searchKeys":["LockingMode","enum LockingMode : Enum<LockingMode> ","org.ktorm.support.postgresql.LockingMode"]},{"name":"enum LockingWait : Enum<LockingWait> ","description":"org.ktorm.support.postgresql.LockingWait","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-wait/index.html","searchKeys":["LockingWait","enum LockingWait : Enum<LockingWait> ","org.ktorm.support.postgresql.LockingWait"]},{"name":"fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): EntitySequence<E, T>","description":"org.ktorm.support.postgresql.locking","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/locking.html","searchKeys":["locking","fun <E : Any, T : BaseTable<E>> EntitySequence<E, T>.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): EntitySequence<E, T>","org.ktorm.support.postgresql.locking"]},{"name":"fun <T : Any> Column<T>.defaultValue(): DefaultValueExpression<T>","description":"org.ktorm.support.postgresql.defaultValue","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/default-value.html","searchKeys":["defaultValue","fun <T : Any> Column<T>.defaultValue(): DefaultValueExpression<T>","org.ktorm.support.postgresql.defaultValue"]},{"name":"fun <T : Any> excluded(column: Column<T>): ColumnExpression<T>","description":"org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder.excluded","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-on-conflict-clause-builder/excluded.html","searchKeys":["excluded","fun <T : Any> excluded(column: Column<T>): ColumnExpression<T>","org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder.excluded"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Column<C>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<C?>","description":"org.ktorm.support.postgresql.bulkInsertOrUpdateReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-or-update-returning.html","searchKeys":["bulkInsertOrUpdateReturning","fun <T : BaseTable<*>, C : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Column<C>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<C?>","org.ktorm.support.postgresql.bulkInsertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.bulkInsertReturning(table: T, returning: Column<C>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<C?>","description":"org.ktorm.support.postgresql.bulkInsertReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-returning.html","searchKeys":["bulkInsertReturning","fun <T : BaseTable<*>, C : Any> Database.bulkInsertReturning(table: T, returning: Column<C>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<C?>","org.ktorm.support.postgresql.bulkInsertReturning"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.insertOrUpdateReturning(table: T, returning: Column<C>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): C?","description":"org.ktorm.support.postgresql.insertOrUpdateReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-or-update-returning.html","searchKeys":["insertOrUpdateReturning","fun <T : BaseTable<*>, C : Any> Database.insertOrUpdateReturning(table: T, returning: Column<C>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): C?","org.ktorm.support.postgresql.insertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C : Any> Database.insertReturning(table: T, returning: Column<C>, block: AssignmentsBuilder.(T) -> Unit): C?","description":"org.ktorm.support.postgresql.insertReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-returning.html","searchKeys":["insertReturning","fun <T : BaseTable<*>, C : Any> Database.insertReturning(table: T, returning: Column<C>, block: AssignmentsBuilder.(T) -> Unit): C?","org.ktorm.support.postgresql.insertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","description":"org.ktorm.support.postgresql.bulkInsertOrUpdateReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-or-update-returning.html","searchKeys":["bulkInsertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","org.ktorm.support.postgresql.bulkInsertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","description":"org.ktorm.support.postgresql.bulkInsertReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-returning.html","searchKeys":["bulkInsertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.bulkInsertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Triple<C1?, C2?, C3?>>","org.ktorm.support.postgresql.bulkInsertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","description":"org.ktorm.support.postgresql.insertOrUpdateReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-or-update-returning.html","searchKeys":["insertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertOrUpdateReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","org.ktorm.support.postgresql.insertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: AssignmentsBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","description":"org.ktorm.support.postgresql.insertReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-returning.html","searchKeys":["insertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any, C3 : Any> Database.insertReturning(table: T, returning: Triple<Column<C1>, Column<C2>, Column<C3>>, block: AssignmentsBuilder.(T) -> Unit): Triple<C1?, C2?, C3?>","org.ktorm.support.postgresql.insertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","description":"org.ktorm.support.postgresql.bulkInsertOrUpdateReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-or-update-returning.html","searchKeys":["bulkInsertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","org.ktorm.support.postgresql.bulkInsertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","description":"org.ktorm.support.postgresql.bulkInsertReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-returning.html","searchKeys":["bulkInsertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.bulkInsertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: BulkInsertStatementBuilder<T>.(T) -> Unit): List<Pair<C1?, C2?>>","org.ktorm.support.postgresql.bulkInsertReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Pair<C1?, C2?>","description":"org.ktorm.support.postgresql.insertOrUpdateReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-or-update-returning.html","searchKeys":["insertOrUpdateReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertOrUpdateReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Pair<C1?, C2?>","org.ktorm.support.postgresql.insertOrUpdateReturning"]},{"name":"fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: AssignmentsBuilder.(T) -> Unit): Pair<C1?, C2?>","description":"org.ktorm.support.postgresql.insertReturning","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-returning.html","searchKeys":["insertReturning","fun <T : BaseTable<*>, C1 : Any, C2 : Any> Database.insertReturning(table: T, returning: Pair<Column<C1>, Column<C2>>, block: AssignmentsBuilder.(T) -> Unit): Pair<C1?, C2?>","org.ktorm.support.postgresql.insertReturning"]},{"name":"fun <T : BaseTable<*>> Database.bulkInsert(table: T, block: BulkInsertStatementBuilder<T>.(T) -> Unit): Int","description":"org.ktorm.support.postgresql.bulkInsert","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert.html","searchKeys":["bulkInsert","fun <T : BaseTable<*>> Database.bulkInsert(table: T, block: BulkInsertStatementBuilder<T>.(T) -> Unit): Int","org.ktorm.support.postgresql.bulkInsert"]},{"name":"fun <T : BaseTable<*>> Database.bulkInsertOrUpdate(table: T, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): Int","description":"org.ktorm.support.postgresql.bulkInsertOrUpdate","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-or-update.html","searchKeys":["bulkInsertOrUpdate","fun <T : BaseTable<*>> Database.bulkInsertOrUpdate(table: T, block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): Int","org.ktorm.support.postgresql.bulkInsertOrUpdate"]},{"name":"fun <T : BaseTable<*>> Database.insertOrUpdate(table: T, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","description":"org.ktorm.support.postgresql.insertOrUpdate","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-or-update.html","searchKeys":["insertOrUpdate","fun <T : BaseTable<*>> Database.insertOrUpdate(table: T, block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","org.ktorm.support.postgresql.insertOrUpdate"]},{"name":"fun <T : BaseTable<*>> T.bulkInsert(block: BulkInsertStatementBuilder<T>.(T) -> Unit): Int","description":"org.ktorm.support.postgresql.bulkInsert","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert.html","searchKeys":["bulkInsert","fun <T : BaseTable<*>> T.bulkInsert(block: BulkInsertStatementBuilder<T>.(T) -> Unit): Int","org.ktorm.support.postgresql.bulkInsert"]},{"name":"fun <T : BaseTable<*>> T.bulkInsertOrUpdate(block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): Int","description":"org.ktorm.support.postgresql.bulkInsertOrUpdate","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/bulk-insert-or-update.html","searchKeys":["bulkInsertOrUpdate","fun <T : BaseTable<*>> T.bulkInsertOrUpdate(block: BulkInsertOrUpdateStatementBuilder<T>.(T) -> Unit): Int","org.ktorm.support.postgresql.bulkInsertOrUpdate"]},{"name":"fun <T : BaseTable<*>> T.insertOrUpdate(block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","description":"org.ktorm.support.postgresql.insertOrUpdate","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/insert-or-update.html","searchKeys":["insertOrUpdate","fun <T : BaseTable<*>> T.insertOrUpdate(block: InsertOrUpdateStatementBuilder.(T) -> Unit): Int","org.ktorm.support.postgresql.insertOrUpdate"]},{"name":"fun BaseTable<*>.booleanArray(name: String): Column<BooleanArray>","description":"org.ktorm.support.postgresql.booleanArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/boolean-array.html","searchKeys":["booleanArray","fun BaseTable<*>.booleanArray(name: String): Column<BooleanArray>","org.ktorm.support.postgresql.booleanArray"]},{"name":"fun BaseTable<*>.cube(name: String): Column<Cube>","description":"org.ktorm.support.postgresql.cube","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/cube.html","searchKeys":["cube","fun BaseTable<*>.cube(name: String): Column<Cube>","org.ktorm.support.postgresql.cube"]},{"name":"fun BaseTable<*>.doubleArray(name: String): Column<DoubleArray>","description":"org.ktorm.support.postgresql.doubleArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/double-array.html","searchKeys":["doubleArray","fun BaseTable<*>.doubleArray(name: String): Column<DoubleArray>","org.ktorm.support.postgresql.doubleArray"]},{"name":"fun BaseTable<*>.earth(name: String): Column<Earth>","description":"org.ktorm.support.postgresql.earth","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth.html","searchKeys":["earth","fun BaseTable<*>.earth(name: String): Column<Earth>","org.ktorm.support.postgresql.earth"]},{"name":"fun BaseTable<*>.floatArray(name: String): Column<FloatArray>","description":"org.ktorm.support.postgresql.floatArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/float-array.html","searchKeys":["floatArray","fun BaseTable<*>.floatArray(name: String): Column<FloatArray>","org.ktorm.support.postgresql.floatArray"]},{"name":"fun BaseTable<*>.hstore(name: String): Column<HStore>","description":"org.ktorm.support.postgresql.hstore","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/hstore.html","searchKeys":["hstore","fun BaseTable<*>.hstore(name: String): Column<HStore>","org.ktorm.support.postgresql.hstore"]},{"name":"fun BaseTable<*>.intArray(name: String): Column<IntArray>","description":"org.ktorm.support.postgresql.intArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/int-array.html","searchKeys":["intArray","fun BaseTable<*>.intArray(name: String): Column<IntArray>","org.ktorm.support.postgresql.intArray"]},{"name":"fun BaseTable<*>.longArray(name: String): Column<LongArray>","description":"org.ktorm.support.postgresql.longArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/long-array.html","searchKeys":["longArray","fun BaseTable<*>.longArray(name: String): Column<LongArray>","org.ktorm.support.postgresql.longArray"]},{"name":"fun BaseTable<*>.shortArray(name: String): Column<ShortArray>","description":"org.ktorm.support.postgresql.shortArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/short-array.html","searchKeys":["shortArray","fun BaseTable<*>.shortArray(name: String): Column<ShortArray>","org.ktorm.support.postgresql.shortArray"]},{"name":"fun BaseTable<*>.textArray(name: String): Column<TextArray>","description":"org.ktorm.support.postgresql.textArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/text-array.html","searchKeys":["textArray","fun BaseTable<*>.textArray(name: String): Column<TextArray>","org.ktorm.support.postgresql.textArray"]},{"name":"fun ColumnDeclaring<Cube>.containedIn(argument: Cube): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.containedIn","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contained-in.html","searchKeys":["containedIn","fun ColumnDeclaring<Cube>.containedIn(argument: Cube): CubeExpression<Boolean>","org.ktorm.support.postgresql.containedIn"]},{"name":"fun ColumnDeclaring<Cube>.containedIn(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.containedIn","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contained-in.html","searchKeys":["containedIn","fun ColumnDeclaring<Cube>.containedIn(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","org.ktorm.support.postgresql.containedIn"]},{"name":"fun ColumnDeclaring<Cube>.contains(argument: Cube): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.contains","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains.html","searchKeys":["contains","fun ColumnDeclaring<Cube>.contains(argument: Cube): CubeExpression<Boolean>","org.ktorm.support.postgresql.contains"]},{"name":"fun ColumnDeclaring<Cube>.contains(argument: Earth): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.contains","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains.html","searchKeys":["contains","fun ColumnDeclaring<Cube>.contains(argument: Earth): CubeExpression<Boolean>","org.ktorm.support.postgresql.contains"]},{"name":"fun ColumnDeclaring<Cube>.contains(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.contains","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains.html","searchKeys":["contains","fun ColumnDeclaring<Cube>.contains(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","org.ktorm.support.postgresql.contains"]},{"name":"fun ColumnDeclaring<Cube>.contains(expr: ColumnDeclaring<Earth>): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.contains","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains.html","searchKeys":["contains","fun ColumnDeclaring<Cube>.contains(expr: ColumnDeclaring<Earth>): CubeExpression<Boolean>","org.ktorm.support.postgresql.contains"]},{"name":"fun ColumnDeclaring<Cube>.overlaps(argument: Cube): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.overlaps","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/overlaps.html","searchKeys":["overlaps","fun ColumnDeclaring<Cube>.overlaps(argument: Cube): CubeExpression<Boolean>","org.ktorm.support.postgresql.overlaps"]},{"name":"fun ColumnDeclaring<Cube>.overlaps(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.overlaps","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/overlaps.html","searchKeys":["overlaps","fun ColumnDeclaring<Cube>.overlaps(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","org.ktorm.support.postgresql.overlaps"]},{"name":"fun ColumnDeclaring<Earth>.containedIn(argument: Cube): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.containedIn","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contained-in.html","searchKeys":["containedIn","fun ColumnDeclaring<Earth>.containedIn(argument: Cube): CubeExpression<Boolean>","org.ktorm.support.postgresql.containedIn"]},{"name":"fun ColumnDeclaring<Earth>.containedIn(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","description":"org.ktorm.support.postgresql.containedIn","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contained-in.html","searchKeys":["containedIn","fun ColumnDeclaring<Earth>.containedIn(expr: ColumnDeclaring<Cube>): CubeExpression<Boolean>","org.ktorm.support.postgresql.containedIn"]},{"name":"fun ColumnDeclaring<HStore>.containedIn(argument: HStore): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containedIn","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contained-in.html","searchKeys":["containedIn","fun ColumnDeclaring<HStore>.containedIn(argument: HStore): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containedIn"]},{"name":"fun ColumnDeclaring<HStore>.containedIn(expr: ColumnDeclaring<HStore>): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containedIn","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contained-in.html","searchKeys":["containedIn","fun ColumnDeclaring<HStore>.containedIn(expr: ColumnDeclaring<HStore>): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containedIn"]},{"name":"fun ColumnDeclaring<HStore>.contains(argument: HStore): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.contains","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains.html","searchKeys":["contains","fun ColumnDeclaring<HStore>.contains(argument: HStore): HStoreExpression<Boolean>","org.ktorm.support.postgresql.contains"]},{"name":"fun ColumnDeclaring<HStore>.contains(expr: ColumnDeclaring<HStore>): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.contains","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains.html","searchKeys":["contains","fun ColumnDeclaring<HStore>.contains(expr: ColumnDeclaring<HStore>): HStoreExpression<Boolean>","org.ktorm.support.postgresql.contains"]},{"name":"fun ColumnDeclaring<HStore>.containsAll(argument: TextArray): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containsAll","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains-all.html","searchKeys":["containsAll","fun ColumnDeclaring<HStore>.containsAll(argument: TextArray): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containsAll"]},{"name":"fun ColumnDeclaring<HStore>.containsAll(expr: ColumnDeclaring<TextArray>): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containsAll","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains-all.html","searchKeys":["containsAll","fun ColumnDeclaring<HStore>.containsAll(expr: ColumnDeclaring<TextArray>): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containsAll"]},{"name":"fun ColumnDeclaring<HStore>.containsAny(argument: TextArray): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containsAny","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains-any.html","searchKeys":["containsAny","fun ColumnDeclaring<HStore>.containsAny(argument: TextArray): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containsAny"]},{"name":"fun ColumnDeclaring<HStore>.containsAny(expr: ColumnDeclaring<TextArray>): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containsAny","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains-any.html","searchKeys":["containsAny","fun ColumnDeclaring<HStore>.containsAny(expr: ColumnDeclaring<TextArray>): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containsAny"]},{"name":"fun ColumnDeclaring<HStore>.containsKey(argument: String): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containsKey","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains-key.html","searchKeys":["containsKey","fun ColumnDeclaring<HStore>.containsKey(argument: String): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containsKey"]},{"name":"fun ColumnDeclaring<HStore>.containsKey(expr: ColumnDeclaring<String>): HStoreExpression<Boolean>","description":"org.ktorm.support.postgresql.containsKey","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/contains-key.html","searchKeys":["containsKey","fun ColumnDeclaring<HStore>.containsKey(expr: ColumnDeclaring<String>): HStoreExpression<Boolean>","org.ktorm.support.postgresql.containsKey"]},{"name":"fun Query.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): Query","description":"org.ktorm.support.postgresql.locking","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/locking.html","searchKeys":["locking","fun Query.locking(mode: LockingMode, tables: List<BaseTable<*>> = emptyList(), wait: LockingWait = WAIT): Query","org.ktorm.support.postgresql.locking"]},{"name":"fun arrayPosition(array: BooleanArray, value: ColumnDeclaring<Boolean>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: BooleanArray, value: ColumnDeclaring<Boolean>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<BooleanArray>, value: Boolean, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<BooleanArray>, value: Boolean, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<BooleanArray>, value: ColumnDeclaring<Boolean>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<BooleanArray>, value: ColumnDeclaring<Boolean>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<IntArray>, value: ColumnDeclaring<Int>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<IntArray>, value: ColumnDeclaring<Int>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<IntArray>, value: Int, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<IntArray>, value: Int, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<LongArray>, value: ColumnDeclaring<Long>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<LongArray>, value: ColumnDeclaring<Long>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<LongArray>, value: Long, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<LongArray>, value: Long, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<ShortArray>, value: ColumnDeclaring<Short>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<ShortArray>, value: ColumnDeclaring<Short>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<ShortArray>, value: Short, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<ShortArray>, value: Short, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<TextArray>, value: ColumnDeclaring<String>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<TextArray>, value: ColumnDeclaring<String>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ColumnDeclaring<TextArray>, value: String, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ColumnDeclaring<TextArray>, value: String, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: IntArray, value: ColumnDeclaring<Int>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: IntArray, value: ColumnDeclaring<Int>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: LongArray, value: ColumnDeclaring<Long>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: LongArray, value: ColumnDeclaring<Long>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: ShortArray, value: ColumnDeclaring<Short>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: ShortArray, value: ColumnDeclaring<Short>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun arrayPosition(array: TextArray, value: ColumnDeclaring<String>, offset: Int? = null): FunctionExpression<Int>","description":"org.ktorm.support.postgresql.arrayPosition","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/array-position.html","searchKeys":["arrayPosition","fun arrayPosition(array: TextArray, value: ColumnDeclaring<String>, offset: Int? = null): FunctionExpression<Int>","org.ktorm.support.postgresql.arrayPosition"]},{"name":"fun doNothing()","description":"org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder.doNothing","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-on-conflict-clause-builder/do-nothing.html","searchKeys":["doNothing","fun doNothing()","org.ktorm.support.postgresql.InsertOrUpdateOnConflictClauseBuilder.doNothing"]},{"name":"fun earthBox(point: ColumnDeclaring<Earth>, radius: ColumnDeclaring<Double>): FunctionExpression<Cube>","description":"org.ktorm.support.postgresql.earthBox","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-box.html","searchKeys":["earthBox","fun earthBox(point: ColumnDeclaring<Earth>, radius: ColumnDeclaring<Double>): FunctionExpression<Cube>","org.ktorm.support.postgresql.earthBox"]},{"name":"fun earthBox(point: ColumnDeclaring<Earth>, radius: Double): FunctionExpression<Cube>","description":"org.ktorm.support.postgresql.earthBox","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-box.html","searchKeys":["earthBox","fun earthBox(point: ColumnDeclaring<Earth>, radius: Double): FunctionExpression<Cube>","org.ktorm.support.postgresql.earthBox"]},{"name":"fun earthBox(point: Earth, radius: ColumnDeclaring<Double>): FunctionExpression<Cube>","description":"org.ktorm.support.postgresql.earthBox","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-box.html","searchKeys":["earthBox","fun earthBox(point: Earth, radius: ColumnDeclaring<Double>): FunctionExpression<Cube>","org.ktorm.support.postgresql.earthBox"]},{"name":"fun earthBox(point: Earth, radius: Double): FunctionExpression<Cube>","description":"org.ktorm.support.postgresql.earthBox","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-box.html","searchKeys":["earthBox","fun earthBox(point: Earth, radius: Double): FunctionExpression<Cube>","org.ktorm.support.postgresql.earthBox"]},{"name":"fun earthDistance(p1: ColumnDeclaring<Earth>, p2: ColumnDeclaring<Earth>): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.earthDistance","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-distance.html","searchKeys":["earthDistance","fun earthDistance(p1: ColumnDeclaring<Earth>, p2: ColumnDeclaring<Earth>): FunctionExpression<Double>","org.ktorm.support.postgresql.earthDistance"]},{"name":"fun earthDistance(p1: ColumnDeclaring<Earth>, p2: Earth): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.earthDistance","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-distance.html","searchKeys":["earthDistance","fun earthDistance(p1: ColumnDeclaring<Earth>, p2: Earth): FunctionExpression<Double>","org.ktorm.support.postgresql.earthDistance"]},{"name":"fun earthDistance(p1: Earth, p2: ColumnDeclaring<Earth>): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.earthDistance","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-distance.html","searchKeys":["earthDistance","fun earthDistance(p1: Earth, p2: ColumnDeclaring<Earth>): FunctionExpression<Double>","org.ktorm.support.postgresql.earthDistance"]},{"name":"fun earthDistance(p1: Earth, p2: Earth): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.earthDistance","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/earth-distance.html","searchKeys":["earthDistance","fun earthDistance(p1: Earth, p2: Earth): FunctionExpression<Double>","org.ktorm.support.postgresql.earthDistance"]},{"name":"fun item(block: AssignmentsBuilder.() -> Unit)","description":"org.ktorm.support.postgresql.BulkInsertStatementBuilder.item","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-statement-builder/item.html","searchKeys":["item","fun item(block: AssignmentsBuilder.() -> Unit)","org.ktorm.support.postgresql.BulkInsertStatementBuilder.item"]},{"name":"fun latitude(earth: ColumnDeclaring<Earth>): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.latitude","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/latitude.html","searchKeys":["latitude","fun latitude(earth: ColumnDeclaring<Earth>): FunctionExpression<Double>","org.ktorm.support.postgresql.latitude"]},{"name":"fun latitude(earth: Earth): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.latitude","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/latitude.html","searchKeys":["latitude","fun latitude(earth: Earth): FunctionExpression<Double>","org.ktorm.support.postgresql.latitude"]},{"name":"fun llToEarth(lat: ColumnDeclaring<Double>, lng: ColumnDeclaring<Double>): FunctionExpression<Earth>","description":"org.ktorm.support.postgresql.llToEarth","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/ll-to-earth.html","searchKeys":["llToEarth","fun llToEarth(lat: ColumnDeclaring<Double>, lng: ColumnDeclaring<Double>): FunctionExpression<Earth>","org.ktorm.support.postgresql.llToEarth"]},{"name":"fun llToEarth(lat: ColumnDeclaring<Double>, lng: Double): FunctionExpression<Earth>","description":"org.ktorm.support.postgresql.llToEarth","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/ll-to-earth.html","searchKeys":["llToEarth","fun llToEarth(lat: ColumnDeclaring<Double>, lng: Double): FunctionExpression<Earth>","org.ktorm.support.postgresql.llToEarth"]},{"name":"fun llToEarth(lat: Double, lng: ColumnDeclaring<Double>): FunctionExpression<Earth>","description":"org.ktorm.support.postgresql.llToEarth","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/ll-to-earth.html","searchKeys":["llToEarth","fun llToEarth(lat: Double, lng: ColumnDeclaring<Double>): FunctionExpression<Earth>","org.ktorm.support.postgresql.llToEarth"]},{"name":"fun llToEarth(lat: Double, lng: Double): FunctionExpression<Earth>","description":"org.ktorm.support.postgresql.llToEarth","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/ll-to-earth.html","searchKeys":["llToEarth","fun llToEarth(lat: Double, lng: Double): FunctionExpression<Earth>","org.ktorm.support.postgresql.llToEarth"]},{"name":"fun longitude(earth: ColumnDeclaring<Earth>): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.longitude","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/longitude.html","searchKeys":["longitude","fun longitude(earth: ColumnDeclaring<Earth>): FunctionExpression<Double>","org.ktorm.support.postgresql.longitude"]},{"name":"fun longitude(earth: Earth): FunctionExpression<Double>","description":"org.ktorm.support.postgresql.longitude","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/longitude.html","searchKeys":["longitude","fun longitude(earth: Earth): FunctionExpression<Double>","org.ktorm.support.postgresql.longitude"]},{"name":"fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","description":"org.ktorm.support.postgresql.BulkInsertOrUpdateStatementBuilder.onConflict","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-or-update-statement-builder/on-conflict.html","searchKeys":["onConflict","fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","org.ktorm.support.postgresql.BulkInsertOrUpdateStatementBuilder.onConflict"]},{"name":"fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","description":"org.ktorm.support.postgresql.InsertOrUpdateStatementBuilder.onConflict","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-statement-builder/on-conflict.html","searchKeys":["onConflict","fun onConflict(vararg columns: Column<*>, block: InsertOrUpdateOnConflictClauseBuilder.() -> Unit)","org.ktorm.support.postgresql.InsertOrUpdateStatementBuilder.onConflict"]},{"name":"fun valueOf(value: String): CubeExpressionType","description":"org.ktorm.support.postgresql.CubeExpressionType.valueOf","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): CubeExpressionType","org.ktorm.support.postgresql.CubeExpressionType.valueOf"]},{"name":"fun valueOf(value: String): HStoreExpressionType","description":"org.ktorm.support.postgresql.HStoreExpressionType.valueOf","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): HStoreExpressionType","org.ktorm.support.postgresql.HStoreExpressionType.valueOf"]},{"name":"fun valueOf(value: String): LockingMode","description":"org.ktorm.support.postgresql.LockingMode.valueOf","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LockingMode","org.ktorm.support.postgresql.LockingMode.valueOf"]},{"name":"fun valueOf(value: String): LockingWait","description":"org.ktorm.support.postgresql.LockingWait.valueOf","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-wait/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LockingWait","org.ktorm.support.postgresql.LockingWait.valueOf"]},{"name":"fun values(): Array<CubeExpressionType>","description":"org.ktorm.support.postgresql.CubeExpressionType.values","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/values.html","searchKeys":["values","fun values(): Array<CubeExpressionType>","org.ktorm.support.postgresql.CubeExpressionType.values"]},{"name":"fun values(): Array<HStoreExpressionType>","description":"org.ktorm.support.postgresql.HStoreExpressionType.values","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/values.html","searchKeys":["values","fun values(): Array<HStoreExpressionType>","org.ktorm.support.postgresql.HStoreExpressionType.values"]},{"name":"fun values(): Array<LockingMode>","description":"org.ktorm.support.postgresql.LockingMode.values","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/values.html","searchKeys":["values","fun values(): Array<LockingMode>","org.ktorm.support.postgresql.LockingMode.values"]},{"name":"fun values(): Array<LockingWait>","description":"org.ktorm.support.postgresql.LockingWait.values","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-wait/values.html","searchKeys":["values","fun values(): Array<LockingWait>","org.ktorm.support.postgresql.LockingWait.values"]},{"name":"infix fun ColumnDeclaring<*>.ilike(argument: String): ILikeExpression","description":"org.ktorm.support.postgresql.ilike","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/ilike.html","searchKeys":["ilike","infix fun ColumnDeclaring<*>.ilike(argument: String): ILikeExpression","org.ktorm.support.postgresql.ilike"]},{"name":"infix fun ColumnDeclaring<*>.ilike(expr: ColumnDeclaring<String>): ILikeExpression","description":"org.ktorm.support.postgresql.ilike","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/ilike.html","searchKeys":["ilike","infix fun ColumnDeclaring<*>.ilike(expr: ColumnDeclaring<String>): ILikeExpression","org.ktorm.support.postgresql.ilike"]},{"name":"interface PostgreSqlExpressionVisitor : SqlExpressionVisitor","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/index.html","searchKeys":["PostgreSqlExpressionVisitor","interface PostgreSqlExpressionVisitor : SqlExpressionVisitor","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor"]},{"name":"object BooleanArraySqlType : SqlType<BooleanArray> ","description":"org.ktorm.support.postgresql.BooleanArraySqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-boolean-array-sql-type/index.html","searchKeys":["BooleanArraySqlType","object BooleanArraySqlType : SqlType<BooleanArray> ","org.ktorm.support.postgresql.BooleanArraySqlType"]},{"name":"object CubeSqlType : SqlType<Cube> ","description":"org.ktorm.support.postgresql.CubeSqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-sql-type/index.html","searchKeys":["CubeSqlType","object CubeSqlType : SqlType<Cube> ","org.ktorm.support.postgresql.CubeSqlType"]},{"name":"object DoubleArraySqlType : SqlType<DoubleArray> ","description":"org.ktorm.support.postgresql.DoubleArraySqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-double-array-sql-type/index.html","searchKeys":["DoubleArraySqlType","object DoubleArraySqlType : SqlType<DoubleArray> ","org.ktorm.support.postgresql.DoubleArraySqlType"]},{"name":"object EarthSqlType : SqlType<Earth> ","description":"org.ktorm.support.postgresql.EarthSqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-earth-sql-type/index.html","searchKeys":["EarthSqlType","object EarthSqlType : SqlType<Earth> ","org.ktorm.support.postgresql.EarthSqlType"]},{"name":"object FloatArraySqlType : SqlType<FloatArray> ","description":"org.ktorm.support.postgresql.FloatArraySqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-float-array-sql-type/index.html","searchKeys":["FloatArraySqlType","object FloatArraySqlType : SqlType<FloatArray> ","org.ktorm.support.postgresql.FloatArraySqlType"]},{"name":"object HStoreSqlType : SqlType<HStore> ","description":"org.ktorm.support.postgresql.HStoreSqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-sql-type/index.html","searchKeys":["HStoreSqlType","object HStoreSqlType : SqlType<HStore> ","org.ktorm.support.postgresql.HStoreSqlType"]},{"name":"object IntArraySqlType : SqlType<IntArray> ","description":"org.ktorm.support.postgresql.IntArraySqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-int-array-sql-type/index.html","searchKeys":["IntArraySqlType","object IntArraySqlType : SqlType<IntArray> ","org.ktorm.support.postgresql.IntArraySqlType"]},{"name":"object LongArraySqlType : SqlType<LongArray> ","description":"org.ktorm.support.postgresql.LongArraySqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-long-array-sql-type/index.html","searchKeys":["LongArraySqlType","object LongArraySqlType : SqlType<LongArray> ","org.ktorm.support.postgresql.LongArraySqlType"]},{"name":"object ShortArraySqlType : SqlType<ShortArray> ","description":"org.ktorm.support.postgresql.ShortArraySqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-short-array-sql-type/index.html","searchKeys":["ShortArraySqlType","object ShortArraySqlType : SqlType<ShortArray> ","org.ktorm.support.postgresql.ShortArraySqlType"]},{"name":"object TextArraySqlType : SqlType<TextArray> ","description":"org.ktorm.support.postgresql.TextArraySqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-text-array-sql-type/index.html","searchKeys":["TextArraySqlType","object TextArraySqlType : SqlType<TextArray> ","org.ktorm.support.postgresql.TextArraySqlType"]},{"name":"open class BulkInsertStatementBuilder<T : BaseTable<*>>(table: T)","description":"org.ktorm.support.postgresql.BulkInsertStatementBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-statement-builder/index.html","searchKeys":["BulkInsertStatementBuilder","open class BulkInsertStatementBuilder<T : BaseTable<*>>(table: T)","org.ktorm.support.postgresql.BulkInsertStatementBuilder"]},{"name":"open class PostgreSqlAssignmentsBuilder : AssignmentsBuilder","description":"org.ktorm.support.postgresql.PostgreSqlAssignmentsBuilder","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-assignments-builder/index.html","searchKeys":["PostgreSqlAssignmentsBuilder","open class PostgreSqlAssignmentsBuilder : AssignmentsBuilder","org.ktorm.support.postgresql.PostgreSqlAssignmentsBuilder"]},{"name":"open class PostgreSqlDialect : SqlDialect","description":"org.ktorm.support.postgresql.PostgreSqlDialect","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-dialect/index.html","searchKeys":["PostgreSqlDialect","open class PostgreSqlDialect : SqlDialect","org.ktorm.support.postgresql.PostgreSqlDialect"]},{"name":"open class PostgreSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter, PostgreSqlExpressionVisitor","description":"org.ktorm.support.postgresql.PostgreSqlFormatter","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/index.html","searchKeys":["PostgreSqlFormatter","open class PostgreSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int) : SqlFormatter, PostgreSqlExpressionVisitor","org.ktorm.support.postgresql.PostgreSqlFormatter"]},{"name":"open fun <T : Any> visitCube(expr: CubeExpression<T>): CubeExpression<T>","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitCube","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-cube.html","searchKeys":["visitCube","open fun <T : Any> visitCube(expr: CubeExpression<T>): CubeExpression<T>","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitCube"]},{"name":"open fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitDefaultValue","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-default-value.html","searchKeys":["visitDefaultValue","open fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitDefaultValue"]},{"name":"open fun <T : Any> visitHStore(expr: HStoreExpression<T>): HStoreExpression<T>","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitHStore","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-h-store.html","searchKeys":["visitHStore","open fun <T : Any> visitHStore(expr: HStoreExpression<T>): HStoreExpression<T>","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitHStore"]},{"name":"open fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitBulkInsert","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-bulk-insert.html","searchKeys":["visitBulkInsert","open fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitBulkInsert"]},{"name":"open fun visitBulkInsertAssignments(assignments: List<List<ColumnAssignmentExpression<*>>>): List<List<ColumnAssignmentExpression<*>>>","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitBulkInsertAssignments","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-bulk-insert-assignments.html","searchKeys":["visitBulkInsertAssignments","open fun visitBulkInsertAssignments(assignments: List<List<ColumnAssignmentExpression<*>>>): List<List<ColumnAssignmentExpression<*>>>","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitBulkInsertAssignments"]},{"name":"open fun visitILike(expr: ILikeExpression): ILikeExpression","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitILike","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-i-like.html","searchKeys":["visitILike","open fun visitILike(expr: ILikeExpression): ILikeExpression","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitILike"]},{"name":"open fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitInsertOrUpdate","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-insert-or-update.html","searchKeys":["visitInsertOrUpdate","open fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitInsertOrUpdate"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"org.ktorm.support.postgresql.Cube.equals","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","org.ktorm.support.postgresql.Cube.equals"]},{"name":"open override fun <T : Any> visitCube(expr: CubeExpression<T>): CubeExpression<T>","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitCube","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-cube.html","searchKeys":["visitCube","open override fun <T : Any> visitCube(expr: CubeExpression<T>): CubeExpression<T>","org.ktorm.support.postgresql.PostgreSqlFormatter.visitCube"]},{"name":"open override fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitDefaultValue","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-default-value.html","searchKeys":["visitDefaultValue","open override fun <T : Any> visitDefaultValue(expr: DefaultValueExpression<T>): DefaultValueExpression<T>","org.ktorm.support.postgresql.PostgreSqlFormatter.visitDefaultValue"]},{"name":"open override fun <T : Any> visitHStore(expr: HStoreExpression<T>): HStoreExpression<T>","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitHStore","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-h-store.html","searchKeys":["visitHStore","open override fun <T : Any> visitHStore(expr: HStoreExpression<T>): HStoreExpression<T>","org.ktorm.support.postgresql.PostgreSqlFormatter.visitHStore"]},{"name":"open override fun <T : Any> visitScalar(expr: ScalarExpression<T>): ScalarExpression<T>","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitScalar","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit-scalar.html","searchKeys":["visitScalar","open override fun <T : Any> visitScalar(expr: ScalarExpression<T>): ScalarExpression<T>","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visitScalar"]},{"name":"open override fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","description":"org.ktorm.support.postgresql.PostgreSqlDialect.createExpressionVisitor","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-dialect/create-expression-visitor.html","searchKeys":["createExpressionVisitor","open override fun createExpressionVisitor(interceptor: SqlExpressionVisitorInterceptor): SqlExpressionVisitor","org.ktorm.support.postgresql.PostgreSqlDialect.createExpressionVisitor"]},{"name":"open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","description":"org.ktorm.support.postgresql.PostgreSqlDialect.createSqlFormatter","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-dialect/create-sql-formatter.html","searchKeys":["createSqlFormatter","open override fun createSqlFormatter(database: Database, beautifySql: Boolean, indentSize: Int): SqlFormatter","org.ktorm.support.postgresql.PostgreSqlDialect.createSqlFormatter"]},{"name":"open override fun hashCode(): Int","description":"org.ktorm.support.postgresql.Cube.hashCode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","org.ktorm.support.postgresql.Cube.hashCode"]},{"name":"open override fun toString(): String","description":"org.ktorm.support.postgresql.Cube.toString","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.support.postgresql.Cube.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.support.postgresql.CubeExpressionType.toString","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.support.postgresql.CubeExpressionType.toString"]},{"name":"open override fun toString(): String","description":"org.ktorm.support.postgresql.HStoreExpressionType.toString","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/to-string.html","searchKeys":["toString","open override fun toString(): String","org.ktorm.support.postgresql.HStoreExpressionType.toString"]},{"name":"open override fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visit","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-expression-visitor/visit.html","searchKeys":["visit","open override fun visit(expr: SqlExpression): SqlExpression","org.ktorm.support.postgresql.PostgreSqlExpressionVisitor.visit"]},{"name":"open override fun visit(expr: SqlExpression): SqlExpression","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visit","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit.html","searchKeys":["visit","open override fun visit(expr: SqlExpression): SqlExpression","org.ktorm.support.postgresql.PostgreSqlFormatter.visit"]},{"name":"open override fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitBulkInsert","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-bulk-insert.html","searchKeys":["visitBulkInsert","open override fun visitBulkInsert(expr: BulkInsertExpression): BulkInsertExpression","org.ktorm.support.postgresql.PostgreSqlFormatter.visitBulkInsert"]},{"name":"open override fun visitILike(expr: ILikeExpression): ILikeExpression","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitILike","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-i-like.html","searchKeys":["visitILike","open override fun visitILike(expr: ILikeExpression): ILikeExpression","org.ktorm.support.postgresql.PostgreSqlFormatter.visitILike"]},{"name":"open override fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitInsertOrUpdate","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-insert-or-update.html","searchKeys":["visitInsertOrUpdate","open override fun visitInsertOrUpdate(expr: InsertOrUpdateExpression): InsertOrUpdateExpression","org.ktorm.support.postgresql.PostgreSqlFormatter.visitInsertOrUpdate"]},{"name":"open override fun visitSelect(expr: SelectExpression): SelectExpression","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitSelect","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-select.html","searchKeys":["visitSelect","open override fun visitSelect(expr: SelectExpression): SelectExpression","org.ktorm.support.postgresql.PostgreSqlFormatter.visitSelect"]},{"name":"open override fun visitTable(expr: TableExpression): TableExpression","description":"org.ktorm.support.postgresql.PostgreSqlFormatter.visitTable","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-postgre-sql-formatter/visit-table.html","searchKeys":["visitTable","open override fun visitTable(expr: TableExpression): TableExpression","org.ktorm.support.postgresql.PostgreSqlFormatter.visitTable"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.postgresql.BulkInsertExpression.extraProperties","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.postgresql.BulkInsertExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.postgresql.CubeExpression.extraProperties","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.postgresql.CubeExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.postgresql.DefaultValueExpression.extraProperties","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-default-value-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.postgresql.DefaultValueExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.postgresql.HStoreExpression.extraProperties","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.postgresql.HStoreExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.postgresql.ILikeExpression.extraProperties","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-i-like-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.postgresql.ILikeExpression.extraProperties"]},{"name":"open override val extraProperties: Map<String, Any>","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.extraProperties","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/extra-properties.html","searchKeys":["extraProperties","open override val extraProperties: Map<String, Any>","org.ktorm.support.postgresql.InsertOrUpdateExpression.extraProperties"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.postgresql.BulkInsertExpression.isLeafNode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.postgresql.BulkInsertExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.postgresql.CubeExpression.isLeafNode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.postgresql.CubeExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.postgresql.HStoreExpression.isLeafNode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.postgresql.HStoreExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.postgresql.ILikeExpression.isLeafNode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-i-like-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.postgresql.ILikeExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = false","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.isLeafNode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = false","org.ktorm.support.postgresql.InsertOrUpdateExpression.isLeafNode"]},{"name":"open override val isLeafNode: Boolean = true","description":"org.ktorm.support.postgresql.DefaultValueExpression.isLeafNode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-default-value-expression/is-leaf-node.html","searchKeys":["isLeafNode","open override val isLeafNode: Boolean = true","org.ktorm.support.postgresql.DefaultValueExpression.isLeafNode"]},{"name":"open override val sqlType: SqlType<Boolean>","description":"org.ktorm.support.postgresql.ILikeExpression.sqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-i-like-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<Boolean>","org.ktorm.support.postgresql.ILikeExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.support.postgresql.CubeExpression.sqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.support.postgresql.CubeExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.support.postgresql.DefaultValueExpression.sqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-default-value-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.support.postgresql.DefaultValueExpression.sqlType"]},{"name":"open override val sqlType: SqlType<T>","description":"org.ktorm.support.postgresql.HStoreExpression.sqlType","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/sql-type.html","searchKeys":["sqlType","open override val sqlType: SqlType<T>","org.ktorm.support.postgresql.HStoreExpression.sqlType"]},{"name":"operator fun ColumnDeclaring<HStore>.get(argument: String): HStoreExpression<String>","description":"org.ktorm.support.postgresql.get","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/get.html","searchKeys":["get","operator fun ColumnDeclaring<HStore>.get(argument: String): HStoreExpression<String>","org.ktorm.support.postgresql.get"]},{"name":"operator fun ColumnDeclaring<HStore>.get(argument: TextArray): HStoreExpression<TextArray>","description":"org.ktorm.support.postgresql.get","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/get.html","searchKeys":["get","operator fun ColumnDeclaring<HStore>.get(argument: TextArray): HStoreExpression<TextArray>","org.ktorm.support.postgresql.get"]},{"name":"operator fun ColumnDeclaring<HStore>.get(expr: ColumnDeclaring<String>): HStoreExpression<String>","description":"org.ktorm.support.postgresql.get","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/get.html","searchKeys":["get","operator fun ColumnDeclaring<HStore>.get(expr: ColumnDeclaring<String>): HStoreExpression<String>","org.ktorm.support.postgresql.get"]},{"name":"operator fun ColumnDeclaring<HStore>.get(expr: ColumnDeclaring<TextArray>): HStoreExpression<TextArray>","description":"org.ktorm.support.postgresql.get","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/get.html","searchKeys":["get","operator fun ColumnDeclaring<HStore>.get(expr: ColumnDeclaring<TextArray>): HStoreExpression<TextArray>","org.ktorm.support.postgresql.get"]},{"name":"operator fun ColumnDeclaring<HStore>.minus(argument: HStore): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.minus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/minus.html","searchKeys":["minus","operator fun ColumnDeclaring<HStore>.minus(argument: HStore): HStoreExpression<HStore>","org.ktorm.support.postgresql.minus"]},{"name":"operator fun ColumnDeclaring<HStore>.minus(argument: String): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.minus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/minus.html","searchKeys":["minus","operator fun ColumnDeclaring<HStore>.minus(argument: String): HStoreExpression<HStore>","org.ktorm.support.postgresql.minus"]},{"name":"operator fun ColumnDeclaring<HStore>.minus(argument: TextArray): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.minus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/minus.html","searchKeys":["minus","operator fun ColumnDeclaring<HStore>.minus(argument: TextArray): HStoreExpression<HStore>","org.ktorm.support.postgresql.minus"]},{"name":"operator fun ColumnDeclaring<HStore>.minus(expr: ColumnDeclaring<HStore>): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.minus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/minus.html","searchKeys":["minus","operator fun ColumnDeclaring<HStore>.minus(expr: ColumnDeclaring<HStore>): HStoreExpression<HStore>","org.ktorm.support.postgresql.minus"]},{"name":"operator fun ColumnDeclaring<HStore>.minus(expr: ColumnDeclaring<String>): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.minus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/minus.html","searchKeys":["minus","operator fun ColumnDeclaring<HStore>.minus(expr: ColumnDeclaring<String>): HStoreExpression<HStore>","org.ktorm.support.postgresql.minus"]},{"name":"operator fun ColumnDeclaring<HStore>.minus(expr: ColumnDeclaring<TextArray>): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.minus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/minus.html","searchKeys":["minus","operator fun ColumnDeclaring<HStore>.minus(expr: ColumnDeclaring<TextArray>): HStoreExpression<HStore>","org.ktorm.support.postgresql.minus"]},{"name":"operator fun ColumnDeclaring<HStore>.plus(argument: HStore): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.plus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/plus.html","searchKeys":["plus","operator fun ColumnDeclaring<HStore>.plus(argument: HStore): HStoreExpression<HStore>","org.ktorm.support.postgresql.plus"]},{"name":"operator fun ColumnDeclaring<HStore>.plus(expr: ColumnDeclaring<HStore>): HStoreExpression<HStore>","description":"org.ktorm.support.postgresql.plus","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/plus.html","searchKeys":["plus","operator fun ColumnDeclaring<HStore>.plus(expr: ColumnDeclaring<HStore>): HStoreExpression<HStore>","org.ktorm.support.postgresql.plus"]},{"name":"typealias Earth = Triple<Double, Double, Double>","description":"org.ktorm.support.postgresql.Earth","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-earth/index.html","searchKeys":["Earth","typealias Earth = Triple<Double, Double, Double>","org.ktorm.support.postgresql.Earth"]},{"name":"typealias HStore = Map<String, String?>","description":"org.ktorm.support.postgresql.HStore","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store/index.html","searchKeys":["HStore","typealias HStore = Map<String, String?>","org.ktorm.support.postgresql.HStore"]},{"name":"typealias TextArray = Array<String?>","description":"org.ktorm.support.postgresql.TextArray","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-text-array/index.html","searchKeys":["TextArray","typealias TextArray = Array<String?>","org.ktorm.support.postgresql.TextArray"]},{"name":"val assignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.assignments","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/assignments.html","searchKeys":["assignments","val assignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.postgresql.InsertOrUpdateExpression.assignments"]},{"name":"val assignments: List<List<ColumnAssignmentExpression<*>>>","description":"org.ktorm.support.postgresql.BulkInsertExpression.assignments","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/assignments.html","searchKeys":["assignments","val assignments: List<List<ColumnAssignmentExpression<*>>>","org.ktorm.support.postgresql.BulkInsertExpression.assignments"]},{"name":"val conflictColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.postgresql.BulkInsertExpression.conflictColumns","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/conflict-columns.html","searchKeys":["conflictColumns","val conflictColumns: List<ColumnExpression<*>>","org.ktorm.support.postgresql.BulkInsertExpression.conflictColumns"]},{"name":"val conflictColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.conflictColumns","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/conflict-columns.html","searchKeys":["conflictColumns","val conflictColumns: List<ColumnExpression<*>>","org.ktorm.support.postgresql.InsertOrUpdateExpression.conflictColumns"]},{"name":"val entries: EnumEntries<CubeExpressionType>","description":"org.ktorm.support.postgresql.CubeExpressionType.entries","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression-type/entries.html","searchKeys":["entries","val entries: EnumEntries<CubeExpressionType>","org.ktorm.support.postgresql.CubeExpressionType.entries"]},{"name":"val entries: EnumEntries<HStoreExpressionType>","description":"org.ktorm.support.postgresql.HStoreExpressionType.entries","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression-type/entries.html","searchKeys":["entries","val entries: EnumEntries<HStoreExpressionType>","org.ktorm.support.postgresql.HStoreExpressionType.entries"]},{"name":"val entries: EnumEntries<LockingMode>","description":"org.ktorm.support.postgresql.LockingMode.entries","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-mode/entries.html","searchKeys":["entries","val entries: EnumEntries<LockingMode>","org.ktorm.support.postgresql.LockingMode.entries"]},{"name":"val entries: EnumEntries<LockingWait>","description":"org.ktorm.support.postgresql.LockingWait.entries","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-wait/entries.html","searchKeys":["entries","val entries: EnumEntries<LockingWait>","org.ktorm.support.postgresql.LockingWait.entries"]},{"name":"val left: ScalarExpression<*>","description":"org.ktorm.support.postgresql.CubeExpression.left","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/left.html","searchKeys":["left","val left: ScalarExpression<*>","org.ktorm.support.postgresql.CubeExpression.left"]},{"name":"val left: ScalarExpression<*>","description":"org.ktorm.support.postgresql.ILikeExpression.left","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-i-like-expression/left.html","searchKeys":["left","val left: ScalarExpression<*>","org.ktorm.support.postgresql.ILikeExpression.left"]},{"name":"val left: ScalarExpression<HStore>","description":"org.ktorm.support.postgresql.HStoreExpression.left","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/left.html","searchKeys":["left","val left: ScalarExpression<HStore>","org.ktorm.support.postgresql.HStoreExpression.left"]},{"name":"val mode: LockingMode","description":"org.ktorm.support.postgresql.LockingClause.mode","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-clause/mode.html","searchKeys":["mode","val mode: LockingMode","org.ktorm.support.postgresql.LockingClause.mode"]},{"name":"val returningColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.postgresql.BulkInsertExpression.returningColumns","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/returning-columns.html","searchKeys":["returningColumns","val returningColumns: List<ColumnExpression<*>>","org.ktorm.support.postgresql.BulkInsertExpression.returningColumns"]},{"name":"val returningColumns: List<ColumnExpression<*>>","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.returningColumns","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/returning-columns.html","searchKeys":["returningColumns","val returningColumns: List<ColumnExpression<*>>","org.ktorm.support.postgresql.InsertOrUpdateExpression.returningColumns"]},{"name":"val right: ScalarExpression<*>","description":"org.ktorm.support.postgresql.CubeExpression.right","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/right.html","searchKeys":["right","val right: ScalarExpression<*>","org.ktorm.support.postgresql.CubeExpression.right"]},{"name":"val right: ScalarExpression<*>","description":"org.ktorm.support.postgresql.HStoreExpression.right","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/right.html","searchKeys":["right","val right: ScalarExpression<*>","org.ktorm.support.postgresql.HStoreExpression.right"]},{"name":"val right: ScalarExpression<*>","description":"org.ktorm.support.postgresql.ILikeExpression.right","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-i-like-expression/right.html","searchKeys":["right","val right: ScalarExpression<*>","org.ktorm.support.postgresql.ILikeExpression.right"]},{"name":"val table: TableExpression","description":"org.ktorm.support.postgresql.BulkInsertExpression.table","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.support.postgresql.BulkInsertExpression.table"]},{"name":"val table: TableExpression","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.table","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/table.html","searchKeys":["table","val table: TableExpression","org.ktorm.support.postgresql.InsertOrUpdateExpression.table"]},{"name":"val tables: List<TableExpression>","description":"org.ktorm.support.postgresql.LockingClause.tables","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-clause/tables.html","searchKeys":["tables","val tables: List<TableExpression>","org.ktorm.support.postgresql.LockingClause.tables"]},{"name":"val type: CubeExpressionType","description":"org.ktorm.support.postgresql.CubeExpression.type","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube-expression/type.html","searchKeys":["type","val type: CubeExpressionType","org.ktorm.support.postgresql.CubeExpression.type"]},{"name":"val type: HStoreExpressionType","description":"org.ktorm.support.postgresql.HStoreExpression.type","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-h-store-expression/type.html","searchKeys":["type","val type: HStoreExpressionType","org.ktorm.support.postgresql.HStoreExpression.type"]},{"name":"val updateAssignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.postgresql.BulkInsertExpression.updateAssignments","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-bulk-insert-expression/update-assignments.html","searchKeys":["updateAssignments","val updateAssignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.postgresql.BulkInsertExpression.updateAssignments"]},{"name":"val updateAssignments: List<ColumnAssignmentExpression<*>>","description":"org.ktorm.support.postgresql.InsertOrUpdateExpression.updateAssignments","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-insert-or-update-expression/update-assignments.html","searchKeys":["updateAssignments","val updateAssignments: List<ColumnAssignmentExpression<*>>","org.ktorm.support.postgresql.InsertOrUpdateExpression.updateAssignments"]},{"name":"val wait: LockingWait","description":"org.ktorm.support.postgresql.LockingClause.wait","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-locking-clause/wait.html","searchKeys":["wait","val wait: LockingWait","org.ktorm.support.postgresql.LockingClause.wait"]},{"name":"val x: DoubleArray","description":"org.ktorm.support.postgresql.Cube.x","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube/x.html","searchKeys":["x","val x: DoubleArray","org.ktorm.support.postgresql.Cube.x"]},{"name":"val y: DoubleArray","description":"org.ktorm.support.postgresql.Cube.y","location":"ktorm-support-postgresql/org.ktorm.support.postgresql/-cube/y.html","searchKeys":["y","val y: DoubleArray","org.ktorm.support.postgresql.Cube.y"]},{"name":"fun <E : Any, T : BaseTable<E>> T.any(): Boolean","description":"org.ktorm.global.any","location":"ktorm-global/org.ktorm.global/any.html","searchKeys":["any","fun <E : Any, T : BaseTable<E>> T.any(): Boolean","org.ktorm.global.any"]},{"name":"fun <E : Any, T : BaseTable<E>> T.asSequence(withReferences: Boolean = true): EntitySequence<E, T>","description":"org.ktorm.global.asSequence","location":"ktorm-global/org.ktorm.global/as-sequence.html","searchKeys":["asSequence","fun <E : Any, T : BaseTable<E>> T.asSequence(withReferences: Boolean = true): EntitySequence<E, T>","org.ktorm.global.asSequence"]},{"name":"fun <E : Any, T : BaseTable<E>> T.count(): Int","description":"org.ktorm.global.count","location":"ktorm-global/org.ktorm.global/count.html","searchKeys":["count","fun <E : Any, T : BaseTable<E>> T.count(): Int","org.ktorm.global.count"]},{"name":"fun <E : Any, T : BaseTable<E>> T.isEmpty(): Boolean","description":"org.ktorm.global.isEmpty","location":"ktorm-global/org.ktorm.global/is-empty.html","searchKeys":["isEmpty","fun <E : Any, T : BaseTable<E>> T.isEmpty(): Boolean","org.ktorm.global.isEmpty"]},{"name":"fun <E : Any, T : BaseTable<E>> T.isNotEmpty(): Boolean","description":"org.ktorm.global.isNotEmpty","location":"ktorm-global/org.ktorm.global/is-not-empty.html","searchKeys":["isNotEmpty","fun <E : Any, T : BaseTable<E>> T.isNotEmpty(): Boolean","org.ktorm.global.isNotEmpty"]},{"name":"fun <E : Any, T : BaseTable<E>> T.none(): Boolean","description":"org.ktorm.global.none","location":"ktorm-global/org.ktorm.global/none.html","searchKeys":["none","fun <E : Any, T : BaseTable<E>> T.none(): Boolean","org.ktorm.global.none"]},{"name":"fun <E : Any> BaseTable<E>.findAll(): List<E>","description":"org.ktorm.global.findAll","location":"ktorm-global/org.ktorm.global/find-all.html","searchKeys":["findAll","fun <E : Any> BaseTable<E>.findAll(): List<E>","org.ktorm.global.findAll"]},{"name":"fun <E : Entity<E>> Table<E>.addEntity(entity: E): Int","description":"org.ktorm.global.addEntity","location":"ktorm-global/org.ktorm.global/add-entity.html","searchKeys":["addEntity","fun <E : Entity<E>> Table<E>.addEntity(entity: E): Int","org.ktorm.global.addEntity"]},{"name":"fun <E : Entity<E>> Table<E>.updateEntity(entity: E): Int","description":"org.ktorm.global.updateEntity","location":"ktorm-global/org.ktorm.global/update-entity.html","searchKeys":["updateEntity","fun <E : Entity<E>> Table<E>.updateEntity(entity: E): Int","org.ktorm.global.updateEntity"]},{"name":"fun <T : BaseTable<*>> T.batchInsert(block: BatchInsertStatementBuilder<T>.() -> Unit): IntArray","description":"org.ktorm.global.batchInsert","location":"ktorm-global/org.ktorm.global/batch-insert.html","searchKeys":["batchInsert","fun <T : BaseTable<*>> T.batchInsert(block: BatchInsertStatementBuilder<T>.() -> Unit): IntArray","org.ktorm.global.batchInsert"]},{"name":"fun <T : BaseTable<*>> T.batchUpdate(block: BatchUpdateStatementBuilder<T>.() -> Unit): IntArray","description":"org.ktorm.global.batchUpdate","location":"ktorm-global/org.ktorm.global/batch-update.html","searchKeys":["batchUpdate","fun <T : BaseTable<*>> T.batchUpdate(block: BatchUpdateStatementBuilder<T>.() -> Unit): IntArray","org.ktorm.global.batchUpdate"]},{"name":"fun <T : BaseTable<*>> T.delete(predicate: (T) -> ColumnDeclaring<Boolean>): Int","description":"org.ktorm.global.delete","location":"ktorm-global/org.ktorm.global/delete.html","searchKeys":["delete","fun <T : BaseTable<*>> T.delete(predicate: (T) -> ColumnDeclaring<Boolean>): Int","org.ktorm.global.delete"]},{"name":"fun <T : BaseTable<*>> T.insert(block: AssignmentsBuilder.(T) -> Unit): Int","description":"org.ktorm.global.insert","location":"ktorm-global/org.ktorm.global/insert.html","searchKeys":["insert","fun <T : BaseTable<*>> T.insert(block: AssignmentsBuilder.(T) -> Unit): Int","org.ktorm.global.insert"]},{"name":"fun <T : BaseTable<*>> T.insertAndGenerateKey(block: AssignmentsBuilder.(T) -> Unit): Any","description":"org.ktorm.global.insertAndGenerateKey","location":"ktorm-global/org.ktorm.global/insert-and-generate-key.html","searchKeys":["insertAndGenerateKey","fun <T : BaseTable<*>> T.insertAndGenerateKey(block: AssignmentsBuilder.(T) -> Unit): Any","org.ktorm.global.insertAndGenerateKey"]},{"name":"fun <T : BaseTable<*>> T.update(block: UpdateStatementBuilder.(T) -> Unit): Int","description":"org.ktorm.global.update","location":"ktorm-global/org.ktorm.global/update.html","searchKeys":["update","fun <T : BaseTable<*>> T.update(block: UpdateStatementBuilder.(T) -> Unit): Int","org.ktorm.global.update"]},{"name":"fun BaseTable<*>.crossJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.global.crossJoin","location":"ktorm-global/org.ktorm.global/cross-join.html","searchKeys":["crossJoin","fun BaseTable<*>.crossJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.global.crossJoin"]},{"name":"fun BaseTable<*>.deleteAll(): Int","description":"org.ktorm.global.deleteAll","location":"ktorm-global/org.ktorm.global/delete-all.html","searchKeys":["deleteAll","fun BaseTable<*>.deleteAll(): Int","org.ktorm.global.deleteAll"]},{"name":"fun BaseTable<*>.innerJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.global.innerJoin","location":"ktorm-global/org.ktorm.global/inner-join.html","searchKeys":["innerJoin","fun BaseTable<*>.innerJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.global.innerJoin"]},{"name":"fun BaseTable<*>.joinReferencesAndSelect(): Query","description":"org.ktorm.global.joinReferencesAndSelect","location":"ktorm-global/org.ktorm.global/join-references-and-select.html","searchKeys":["joinReferencesAndSelect","fun BaseTable<*>.joinReferencesAndSelect(): Query","org.ktorm.global.joinReferencesAndSelect"]},{"name":"fun BaseTable<*>.leftJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.global.leftJoin","location":"ktorm-global/org.ktorm.global/left-join.html","searchKeys":["leftJoin","fun BaseTable<*>.leftJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.global.leftJoin"]},{"name":"fun BaseTable<*>.rightJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","description":"org.ktorm.global.rightJoin","location":"ktorm-global/org.ktorm.global/right-join.html","searchKeys":["rightJoin","fun BaseTable<*>.rightJoin(right: BaseTable<*>, on: ColumnDeclaring<Boolean>? = null): QuerySource","org.ktorm.global.rightJoin"]},{"name":"fun BaseTable<*>.select(columns: Collection<ColumnDeclaring<*>>): Query","description":"org.ktorm.global.select","location":"ktorm-global/org.ktorm.global/select.html","searchKeys":["select","fun BaseTable<*>.select(columns: Collection<ColumnDeclaring<*>>): Query","org.ktorm.global.select"]},{"name":"fun BaseTable<*>.select(vararg columns: ColumnDeclaring<*>): Query","description":"org.ktorm.global.select","location":"ktorm-global/org.ktorm.global/select.html","searchKeys":["select","fun BaseTable<*>.select(vararg columns: ColumnDeclaring<*>): Query","org.ktorm.global.select"]},{"name":"fun BaseTable<*>.selectDistinct(columns: Collection<ColumnDeclaring<*>>): Query","description":"org.ktorm.global.selectDistinct","location":"ktorm-global/org.ktorm.global/select-distinct.html","searchKeys":["selectDistinct","fun BaseTable<*>.selectDistinct(columns: Collection<ColumnDeclaring<*>>): Query","org.ktorm.global.selectDistinct"]},{"name":"fun BaseTable<*>.selectDistinct(vararg columns: ColumnDeclaring<*>): Query","description":"org.ktorm.global.selectDistinct","location":"ktorm-global/org.ktorm.global/select-distinct.html","searchKeys":["selectDistinct","fun BaseTable<*>.selectDistinct(vararg columns: ColumnDeclaring<*>): Query","org.ktorm.global.selectDistinct"]},{"name":"fun Database.Companion.connectGlobally(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","description":"org.ktorm.global.connectGlobally","location":"ktorm-global/org.ktorm.global/connect-globally.html","searchKeys":["connectGlobally","fun Database.Companion.connectGlobally(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","org.ktorm.global.connectGlobally"]},{"name":"fun Database.Companion.connectGlobally(dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null, connector: () -> Connection): Database","description":"org.ktorm.global.connectGlobally","location":"ktorm-global/org.ktorm.global/connect-globally.html","searchKeys":["connectGlobally","fun Database.Companion.connectGlobally(dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null, connector: () -> Connection): Database","org.ktorm.global.connectGlobally"]},{"name":"fun Database.Companion.connectGlobally(url: String, driver: String? = null, user: String? = null, password: String? = null, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","description":"org.ktorm.global.connectGlobally","location":"ktorm-global/org.ktorm.global/connect-globally.html","searchKeys":["connectGlobally","fun Database.Companion.connectGlobally(url: String, driver: String? = null, user: String? = null, password: String? = null, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","org.ktorm.global.connectGlobally"]},{"name":"fun Database.Companion.connectWithSpringSupportGlobally(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","description":"org.ktorm.global.connectWithSpringSupportGlobally","location":"ktorm-global/org.ktorm.global/connect-with-spring-support-globally.html","searchKeys":["connectWithSpringSupportGlobally","fun Database.Companion.connectWithSpringSupportGlobally(dataSource: DataSource, dialect: SqlDialect = detectDialectImplementation(), logger: Logger = detectLoggerImplementation(), alwaysQuoteIdentifiers: Boolean = false, generateSqlInUpperCase: Boolean? = null): Database","org.ktorm.global.connectWithSpringSupportGlobally"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> T.maxBy(selector: (T) -> ColumnDeclaring<C>): C?","description":"org.ktorm.global.maxBy","location":"ktorm-global/org.ktorm.global/max-by.html","searchKeys":["maxBy","inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> T.maxBy(selector: (T) -> ColumnDeclaring<C>): C?","org.ktorm.global.maxBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> T.minBy(selector: (T) -> ColumnDeclaring<C>): C?","description":"org.ktorm.global.minBy","location":"ktorm-global/org.ktorm.global/min-by.html","searchKeys":["minBy","inline fun <E : Any, T : BaseTable<E>, C : Comparable<C>> T.minBy(selector: (T) -> ColumnDeclaring<C>): C?","org.ktorm.global.minBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>, C : Number> T.sumBy(selector: (T) -> ColumnDeclaring<C>): C?","description":"org.ktorm.global.sumBy","location":"ktorm-global/org.ktorm.global/sum-by.html","searchKeys":["sumBy","inline fun <E : Any, T : BaseTable<E>, C : Number> T.sumBy(selector: (T) -> ColumnDeclaring<C>): C?","org.ktorm.global.sumBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>> T.all(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","description":"org.ktorm.global.all","location":"ktorm-global/org.ktorm.global/all.html","searchKeys":["all","inline fun <E : Any, T : BaseTable<E>> T.all(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","org.ktorm.global.all"]},{"name":"inline fun <E : Any, T : BaseTable<E>> T.any(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","description":"org.ktorm.global.any","location":"ktorm-global/org.ktorm.global/any.html","searchKeys":["any","inline fun <E : Any, T : BaseTable<E>> T.any(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","org.ktorm.global.any"]},{"name":"inline fun <E : Any, T : BaseTable<E>> T.averageBy(selector: (T) -> ColumnDeclaring<out Number>): Double?","description":"org.ktorm.global.averageBy","location":"ktorm-global/org.ktorm.global/average-by.html","searchKeys":["averageBy","inline fun <E : Any, T : BaseTable<E>> T.averageBy(selector: (T) -> ColumnDeclaring<out Number>): Double?","org.ktorm.global.averageBy"]},{"name":"inline fun <E : Any, T : BaseTable<E>> T.count(predicate: (T) -> ColumnDeclaring<Boolean>): Int","description":"org.ktorm.global.count","location":"ktorm-global/org.ktorm.global/count.html","searchKeys":["count","inline fun <E : Any, T : BaseTable<E>> T.count(predicate: (T) -> ColumnDeclaring<Boolean>): Int","org.ktorm.global.count"]},{"name":"inline fun <E : Any, T : BaseTable<E>> T.findList(predicate: (T) -> ColumnDeclaring<Boolean>): List<E>","description":"org.ktorm.global.findList","location":"ktorm-global/org.ktorm.global/find-list.html","searchKeys":["findList","inline fun <E : Any, T : BaseTable<E>> T.findList(predicate: (T) -> ColumnDeclaring<Boolean>): List<E>","org.ktorm.global.findList"]},{"name":"inline fun <E : Any, T : BaseTable<E>> T.findOne(predicate: (T) -> ColumnDeclaring<Boolean>): E?","description":"org.ktorm.global.findOne","location":"ktorm-global/org.ktorm.global/find-one.html","searchKeys":["findOne","inline fun <E : Any, T : BaseTable<E>> T.findOne(predicate: (T) -> ColumnDeclaring<Boolean>): E?","org.ktorm.global.findOne"]},{"name":"inline fun <E : Any, T : BaseTable<E>> T.none(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","description":"org.ktorm.global.none","location":"ktorm-global/org.ktorm.global/none.html","searchKeys":["none","inline fun <E : Any, T : BaseTable<E>> T.none(predicate: (T) -> ColumnDeclaring<Boolean>): Boolean","org.ktorm.global.none"]},{"name":"inline fun <T> useConnection(func: (Connection) -> T): T","description":"org.ktorm.global.useConnection","location":"ktorm-global/org.ktorm.global/use-connection.html","searchKeys":["useConnection","inline fun <T> useConnection(func: (Connection) -> T): T","org.ktorm.global.useConnection"]},{"name":"inline fun <T> useTransaction(isolation: TransactionIsolation? = null, func: (Transaction) -> T): T","description":"org.ktorm.global.useTransaction","location":"ktorm-global/org.ktorm.global/use-transaction.html","searchKeys":["useTransaction","inline fun <T> useTransaction(isolation: TransactionIsolation? = null, func: (Transaction) -> T): T","org.ktorm.global.useTransaction"]},{"name":"inline operator fun <T> Database.invoke(func: Database.() -> T): T","description":"org.ktorm.global.invoke","location":"ktorm-global/org.ktorm.global/invoke.html","searchKeys":["invoke","inline operator fun <T> Database.invoke(func: Database.() -> T): T","org.ktorm.global.invoke"]},{"name":"val Database.Companion.global: Database","description":"org.ktorm.global.global","location":"ktorm-global/org.ktorm.global/global.html","searchKeys":["global","val Database.Companion.global: Database","org.ktorm.global.global"]},{"name":"class JsonSqlType<T : Any>(val objectMapper: ObjectMapper, val javaType: JavaType) : SqlType<T> ","description":"org.ktorm.jackson.JsonSqlType","location":"ktorm-jackson/org.ktorm.jackson/-json-sql-type/index.html","searchKeys":["JsonSqlType","class JsonSqlType<T : Any>(val objectMapper: ObjectMapper, val javaType: JavaType) : SqlType<T> ","org.ktorm.jackson.JsonSqlType"]},{"name":"class KtormModule : Module","description":"org.ktorm.jackson.KtormModule","location":"ktorm-jackson/org.ktorm.jackson/-ktorm-module/index.html","searchKeys":["KtormModule","class KtormModule : Module","org.ktorm.jackson.KtormModule"]},{"name":"constructor()","description":"org.ktorm.jackson.KtormModule.KtormModule","location":"ktorm-jackson/org.ktorm.jackson/-ktorm-module/-ktorm-module.html","searchKeys":["KtormModule","constructor()","org.ktorm.jackson.KtormModule.KtormModule"]},{"name":"constructor(objectMapper: ObjectMapper, javaType: JavaType)","description":"org.ktorm.jackson.JsonSqlType.JsonSqlType","location":"ktorm-jackson/org.ktorm.jackson/-json-sql-type/-json-sql-type.html","searchKeys":["JsonSqlType","constructor(objectMapper: ObjectMapper, javaType: JavaType)","org.ktorm.jackson.JsonSqlType.JsonSqlType"]},{"name":"constructor(objectMapper: ObjectMapper, typeRef: TypeReference<T>)","description":"org.ktorm.jackson.JsonSqlType.JsonSqlType","location":"ktorm-jackson/org.ktorm.jackson/-json-sql-type/-json-sql-type.html","searchKeys":["JsonSqlType","constructor(objectMapper: ObjectMapper, typeRef: TypeReference<T>)","org.ktorm.jackson.JsonSqlType.JsonSqlType"]},{"name":"constructor(typeRef: TypeReference<T>)","description":"org.ktorm.jackson.JsonSqlType.JsonSqlType","location":"ktorm-jackson/org.ktorm.jackson/-json-sql-type/-json-sql-type.html","searchKeys":["JsonSqlType","constructor(typeRef: TypeReference<T>)","org.ktorm.jackson.JsonSqlType.JsonSqlType"]},{"name":"inline fun <C : Any> BaseTable<*>.json(name: String, mapper: ObjectMapper = sharedObjectMapper): Column<C>","description":"org.ktorm.jackson.json","location":"ktorm-jackson/org.ktorm.jackson/json.html","searchKeys":["json","inline fun <C : Any> BaseTable<*>.json(name: String, mapper: ObjectMapper = sharedObjectMapper): Column<C>","org.ktorm.jackson.json"]},{"name":"open override fun getModuleName(): String","description":"org.ktorm.jackson.KtormModule.getModuleName","location":"ktorm-jackson/org.ktorm.jackson/-ktorm-module/get-module-name.html","searchKeys":["getModuleName","open override fun getModuleName(): String","org.ktorm.jackson.KtormModule.getModuleName"]},{"name":"open override fun setParameter(ps: PreparedStatement, index: Int, parameter: T?)","description":"org.ktorm.jackson.JsonSqlType.setParameter","location":"ktorm-jackson/org.ktorm.jackson/-json-sql-type/set-parameter.html","searchKeys":["setParameter","open override fun setParameter(ps: PreparedStatement, index: Int, parameter: T?)","org.ktorm.jackson.JsonSqlType.setParameter"]},{"name":"open override fun setupModule(context: Module.SetupContext)","description":"org.ktorm.jackson.KtormModule.setupModule","location":"ktorm-jackson/org.ktorm.jackson/-ktorm-module/setup-module.html","searchKeys":["setupModule","open override fun setupModule(context: Module.SetupContext)","org.ktorm.jackson.KtormModule.setupModule"]},{"name":"open override fun version(): Version","description":"org.ktorm.jackson.KtormModule.version","location":"ktorm-jackson/org.ktorm.jackson/-ktorm-module/version.html","searchKeys":["version","open override fun version(): Version","org.ktorm.jackson.KtormModule.version"]},{"name":"val javaType: JavaType","description":"org.ktorm.jackson.JsonSqlType.javaType","location":"ktorm-jackson/org.ktorm.jackson/-json-sql-type/java-type.html","searchKeys":["javaType","val javaType: JavaType","org.ktorm.jackson.JsonSqlType.javaType"]},{"name":"val objectMapper: ObjectMapper","description":"org.ktorm.jackson.JsonSqlType.objectMapper","location":"ktorm-jackson/org.ktorm.jackson/-json-sql-type/object-mapper.html","searchKeys":["objectMapper","val objectMapper: ObjectMapper","org.ktorm.jackson.JsonSqlType.objectMapper"]},{"name":"val sharedObjectMapper: ObjectMapper","description":"org.ktorm.jackson.sharedObjectMapper","location":"ktorm-jackson/org.ktorm.jackson/shared-object-mapper.html","searchKeys":["sharedObjectMapper","val sharedObjectMapper: ObjectMapper","org.ktorm.jackson.sharedObjectMapper"]}]